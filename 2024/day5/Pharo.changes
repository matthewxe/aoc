Object << #HelloMessage	layout: FixedLayout;	traits: {};	slots: {};	sharedVariables: {};	sharedPools: {};	tag: 'HelloMessage' ;	package: 'Hello!!'!Object << #Part1	slots: {};	sharedVariables: {};	package: 'Advent-of-Code-Day5'!Smalltalk globals removeClassNamed: #AnObsoletePart1!Object << #Part1	slots: {};	sharedVariables: {};	package: 'Advent-of-Code-Day5'!Object << #Part1	slots: {};	sharedVariables: { 'count' };	package: 'Advent-of-Code-Day5'!!Part1 methodsFor: 'nil' stamp: '12/7/2024 06:43'!increase  count := count + 1! !!Part1 methodsFor: 'nil' stamp: '12/7/2024 06:44'!amount	^ count! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 06:45'!increase: i  count := count + i! !Object << #Part1	slots: {};	sharedVariables: { #count };	package: 'Advent-of-Code-Day5'!!Part1 methodsFor: 'accessing' stamp: '12/7/2024 06:51' prior: 1223!amount	^ count! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 06:51'!set: i  count := i! !Part1 removeSelector: #increase:!Part1 removeSelector: #increase!!Part1 methodsFor: 'accessing' stamp: '12/7/2024 06:52'!hi  ^ 'Hello World!!'! !----SNAPSHOT----2024-12-07T06:55:26.966683+08:00 Pharo.image priorSource: 314!----SNAPSHOT----2024-12-07T06:55:26.967887+08:00 Pharo.image priorSource: 1137!!Part1 methodsFor: 'nil' stamp: '12/7/2024 06:57'!main  ^ self hi.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:14' prior: 2701!main  | home |  home := FileLocator home.  (home / 'Code/aoc/2024/day5') parent pathString.  ^ self home! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:14' prior: 2881!main  | home |  home := FileLocator home.  (home / 'Code/aoc/2024/day5') parent pathString.  ^ self home pathString.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:15' prior: 3245!main  | home |  home := FileLocator home.  (home / 'Code/aoc/2024/day5') parent pathString.  ^ home pathString.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:15' prior: 3633!main  | home |  home := FileLocator home.  (home / 'Code') parent pathString.  ^ home pathString.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:15' prior: 4011!main  | home |  home := FileLocator new home.  (home / 'Code') parent pathString.  ^ home pathString.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:15' prior: 4361!main  | home |  home := FileLocator home.    ^ (home / 'Code') directories.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:16' prior: 4719!main  | home |  home := FileLocator home.    ^ (home / 'Code/aoc') directories.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:16' prior: 5025!main  | home |  home := FileLocator home.    ^ (home / 'Code/aoc/2024') directories.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:16' prior: 5339!main  | home |  home := FileLocator home.    ^ (home / 'Code/aoc/2024/day5') directories.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:17' prior: 5663!main  | home |  home := FileLocator home / 'Code/aoc/2024/day5/'.  ^ home pathString.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:19' prior: 5997!main  | home input  |  home := FileLocator home / 'Code/aoc/2024/day5/'.	  input := 'example.txt' asFileReference.  Transcript show: input exists.  ^ home pathString.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:20' prior: 6321!main  | home input  |  home := FileLocator home / 'Code/aoc/2024/day5/'.	  input := 'example.txt' asFileReference.  ^ home input exists.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:21' prior: 6815!main  | home input  |  home := FileLocator home / 'Code/aoc/2024/day5/'.  input := 'example.txt' asFileReference.  ^ input exists.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:21' prior: 7245!main  | home input |  home := FileLocator home / 'Code/aoc/2024/day5/'.  input := 'example.txt' asFileReference.  ^ input isFile.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:23' prior: 7661!main  | home input |  home := FileLocator home / 'Code/aoc/2024/day5/'.  input := 'example.txt' asFileReference.  input isFile                                                         ifTrue: [Transcript show: 'ifTrue'; cr]    ifFalse: [Transcript show: 'ifFalse'; cr].  ^ input isFile.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:24' prior: 8075!main  | home input |  home := FileLocator home / 'Code/aoc/2024/day5/'.  input := 'example.txt' asFileReference.  input isFile                                                         ifTrue: [Transcript show: 'ifTrue'; cr]    ifFalse: [^ false].  ^ input isFile.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:24' prior: 8807!main  | home input |  home := FileLocator home / 'Code/aoc/2024/day5/'.  input := 'balls.txt' asFileReference.  input isFile                                                         ifTrue: [Transcript show: 'ifTrue'; cr]    ifFalse: [^ false].  ^ input isFile.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:26' prior: 9493!main  | home input stream |  home := FileLocator home / 'Code/aoc/2024/day5/'.  input := 'example.txt' asFileReference.  input isFile ifFalse: [^ false].  stream := input readStream.  ^ stream next.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:27' prior: 10175!main  | home input stream |  home := FileLocator home / 'Code/aoc/2024/day5/'.  input := 'example.txt' asFileReference.  input isFile ifFalse: [^ false].  stream := input readStream.  ^ stream upToEnd.! !Part1 removeSelector: #amount!Part1 removeSelector: #set:!!Part1 methodsFor: 'nil' stamp: '12/7/2024 07:34'!populateRules:  stream  ^ stream upToEnd.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:34' prior: 10735!main  | home input stream |  home := FileLocator home / 'Code/aoc/2024/day5/'.  input := 'example.txt' asFileReference.  input isFile ifFalse: [^ false].  stream := input readStream.  self populateRules: stream.  ^ stream upToEnd.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:34' prior: 11619!main  | home input stream |  home := FileLocator home / 'Code/aoc/2024/day5/'.  input := 'example.txt' asFileReference.  input isFile ifFalse: [^ false].  stream := input readStream.  self populateRules: stream.  ^ self rules.! !!ManifestAdventofCodeDay5 commentStamp: '<historical>' prior: 0!Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestAdventofCodeDay5 class methodsFor: 'code-critics' stamp: '12/7/2024 07:35'!ruleUnclassifiedMethodsRuleV1FalsePositive	<ignoreForCoverage>	^ #()! !!ManifestAdventofCodeDay5 class methodsFor: 'code-critics' stamp: '12/7/2024 07:35' prior: 13551!ruleUnclassifiedMethodsRuleV1FalsePositive	<ignoreForCoverage>	^ #(#(#(#RGMethodDefinition #(#Part1 #populateRules: #false)) #'2024-12-07T07:35:37.100993+08:00') )! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:37' prior: 11387!populateRules: stream  self rules add: #foo.  self rules add: #bar.  self rules addAll: 'hello'.  self rules.  ^ stream upToEnd.! !!Part1 methodsFor: 'nil' stamp: '12/7/2024 07:40'!rules  ^ Set new.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:40' prior: 14397!populateRules: stream  rules add: #foo.  self rules add: #bar.  self rules addAll: 'hello'.  self rules.  ^ stream upToEnd.! !Object << #Part1	slots: {  };	sharedVariables: { #count, #rules };	package: 'Advent-of-Code-Day5'!Object << #Part1	slots: {};	sharedVariables: { #count, #rules };	package: 'Advent-of-Code-Day5'!Object << #Part1	slots: {};	sharedVariables: { #count .  #rules };	package: 'Advent-of-Code-Day5'!!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:43' prior: 14981!populateRules: stream  rules add: #foo.  ^ rules.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:44' prior: 12247!main  | home input stream |  home := FileLocator home / 'Code/aoc/2024/day5/'.  input := 'example.txt' asFileReference.  input isFile ifFalse: [^ false].  stream := input readStream.  self populateRules: stream.  ^ self rules.! !!Part1 methodsFor: 'accessing' stamp: '12/7/2024 07:44' prior: 16277!main  | home input stream |  home := FileLocator home / 'Code/aoc/2024/day5/'.  input := 'example.txt' asFileReference.  input isFile ifFalse: [^ false].  stream := input readStream.  self populateRules: stream.  ^ rules.! !Part1 removeSelector: #rules!!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:44' prior: 16023!populateRules: stream  rules := Set new.   rules add: #foo.  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:46' prior: 17589!populateRules: stream  rules := Set new.   rules add: #foo.  stream upTo: #|.  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:46' prior: 17905!populateRules: stream  rules := Set new.   rules add: #foo.  rules add: (stream upTo: #|).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:52' prior: 18261!populateRules: stream  | string parts rolers bolers |  string := stream upToEnd.  parts := string substrings: '\n\n'.  rolers := string parts: '\n'.  bolers := string parts: '|'.    rules := Set new.   rules add: #foo.  rules add: (stream upTo: #|).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:53' prior: 18643!populateRules: stream  | string parts rolers bolers |  string := stream upToEnd.  parts := string substrings: '\n\n'.  rolers := string parts: '\n'.  bolers := string parts: '|'.  rules add: bolers.    rules := Set new.   rules add: #foo.  rules add: (stream upTo: #|).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:53' prior: 19355!populateRules: stream  | string parts rolers bolers |  string := stream upToEnd.  parts := string substrings: '\n\n'.  rolers := string parts: '\n'.  bolers := string parts: '|'.    rules := Set new.   rules add: #foo.  rules add: bolers.  rules add: (stream upTo: #|).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:53' prior: 20111!populateRules: stream  | string parts rolers bolers |  string := stream upToEnd.  parts := string substrings: '\n\n'.  rolers := string parts: '\n'.  bolers := string parts: '|'.  rules := Set new.   rules add: #foo.  rules add: bolers.  rules add: (stream upTo: #|).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:53' prior: 20869!populateRules: stream  | string parts rolers bolers |  string := stream upToEnd.  parts := string substrings: '\n\n'.  rolers := string parts: '\n'.  bolers := string parts: '|'.  rules := Set new.   rules add: #foo.  rules add: parts.  rules add: (stream upTo: #|).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:54' prior: 21617!populateRules: stream  | string parts rolers bolers |  string := stream upToEnd.  parts := string substrings: '\n\n'.  rolers := string parts: '\n'.  bolers := string parts: '|'.  rules := Set new.   rules add: #foo.  rules add: parts.  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:54' prior: 22363!populateRules: stream  | string parts rolers bolers |  string := stream upToEnd.  parts := string substrings: '\n\n'.  rolers := string parts: '\n'.  bolers := string parts: '|'.  rules := Set new.   rules add: #foo.  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:55' prior: 23043!populateRules: stream  | string parts rolers bolers |  string := stream upToEnd.  rules := Set new.   rules add: #foo.  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:55' prior: 23685!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: #foo.  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:55' prior: 24127!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: string.  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:55' prior: 24531!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: string substring: '|'.  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:56' prior: 24939!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: (string substring: '|').  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:56' prior: 25377!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: (string substring: $|).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:56' prior: 25819!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: (string substrings: $|).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:56' prior: 26259!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: (string substrings: ' ').  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:57' prior: 26701!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: (string substrings: '|').  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:57' prior: 27145!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: (string substrings: '\n').  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:57' prior: 27589!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: (string substrings: ' ').  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:58' prior: 28035!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: (string substrings: $lf).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:59' prior: 28479!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: (string splitOn: Character cr).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 07:59' prior: 28923!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: (string splitOn: Character lf).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:00' prior: 29379!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: (string splitOn: (Character lf + Character lf)).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:00' prior: 29835!populateRules: stream  | string  |  string := stream upToEnd.  rules := Set new.   rules add: (string splitOn: (Character lf , Character lf)).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:01' prior: 30325!populateRules: stream  | string |  string := stream upToEnd.  rules := Set new.   rules add: (string splitOn: (Character lf , Character lf)).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:01' prior: 30815!populateRules: stream  | string |  string := stream upToEnd.  rules := Set new.   rules add: (string splitOn: (Character lf lf)).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:01' prior: 31303!populateRules: stream  | string |  string := stream upToEnd.  rules := Set new.   rules add: (string splitOn: (Character lf , Character lf)).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:01' prior: 31767!populateRules: stream  | string |  string := stream upToEnd.  rules := Set new.   rules add: (string substrings: (Character lf , Character lf)).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:02' prior: 32255!populateRules: stream  | string |  string := stream upToEnd.  rules := Set new.   rules add: (string substrings: (Character lf)).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:03' prior: 32749!populateRules: stream  | string |  string := stream upToEnd.  rules := Set new.   rules add: (string splitOn: (Character lf)).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:03' prior: 33213!populateRules: stream  | string |  string := stream upToEnd.  rules := Set new.   rules add: (string splitOn: Character lf).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:03' prior: 33671!populateRules: stream  | string |  string := stream upToEnd.  rules := Set new.   rules add: ((string splitOn: Character lf) splitOn: Character lf).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:04' prior: 34125!populateRules: stream  | string |  string := stream upToEnd.  rules := Set new.   rules add: ((string splitOn: Character lf) splitOn: ByteString).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:05' prior: 34627!populateRules: stream  | string |  string := stream upToEnd.  rules := Set new.   rules add: ((string splitOn: Character lf) splitOn: '').  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:10' prior: 35125!populateRules: stream  | string |  string := stream upToEnd.  rules := Set new.   rules add: ((string splitOn: Character lf) substrings:( $, asByteString)).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:10' prior: 35607!populateRules: stream  | string |  string := stream upToEnd.  rules := Set new.   rules add: ((string splitOn: Character lf) substrings: ( $, asByteString)).  ^ rules.! !!Part1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 08:10' prior: 36125!populateRules: stream  | string |  string := stream upToEnd.  rules := Set new.   rules add: ((string splitOn: Character lf) substrings: ($, asByteString)).  ^ rules.! !----QUIT/NOSAVE----2024-12-07T08:11:09.04884+08:00 Pharo.image priorSource: 1217!----QUIT/NOSAVE----2024-12-07T08:11:09.049877+08:00 Pharo.image priorSource: 1217!----SNAPSHOT----2024-12-07T17:24:38.605257+08:00 Pharo.image priorSource: 1217!----SNAPSHOT----2024-12-07T17:24:38.605952+08:00 Pharo.image priorSource: 18667!Object << #Part1	slots: {};	sharedVariables: { #total . #what };	package: 'Advent-of-Code-Day5'!----SNAPSHOT----2024-12-07T17:25:09.456611+08:00 Pharo.image priorSource: 18748!----SNAPSHOT----2024-12-07T17:25:09.457219+08:00 Pharo.image priorSource: 18931!----QUIT----2024-12-07T17:25:15.143542+08:00 Pharo.image priorSource: 19013!----QUIT----2024-12-07T17:25:15.146016+08:00 Pharo.image priorSource: 19095!Object << #Part1	"This is a comment"	slots: {};	sharedVariables: { #total . #what };	package: 'Advent-of-Code-Day5'!Smalltalk globals removeClassNamed: #AnObsoletePart1!Object << #MyCounter 	slots: {};	sharedVariables: {};	package: 'AdventOfCodeDay5'!Object << #MyCounter	slots: {};	package: 'Advent-Of-Code-Day5'!!MyCounterTest commentStamp: '<historical>' prior: 0!A MyCounterTest is a test class for testing the behavior of MyCounter!!MyCounterTest methodsFor: 'basic tests' stamp: '12/7/2024 17:41'!testCreatingMyCounter	"A test that will check if the creation of an object MyCounter is done properly"	| tmp |	tmp := MyCounter new.	self deny: (tmp = nil)! !----SNAPSHOT----2024-12-07T17:41:17.478725+08:00 Pharo.image priorSource: 19173!----SNAPSHOT----2024-12-07T17:41:17.480956+08:00 Pharo.image priorSource: 19937!!MyCounterTest methodsFor: 'nil' stamp: '12/7/2024 17:43'!testIncrementing	"A test that will check if method increment is working properly. 	Test value 5. Expected result 6."	| tmp inc |	tmp := MyCounter new.	tmp value: 5.	tmp increment.		self assert: (tmp value = 6)! !!MyCounterTest methodsFor: 'tests' stamp: '12/7/2024 17:43' prior: 40323!testIncrementing	"A test that will check if method increment is working properly. 	Test value 5. Expected result 6."	| tmp |	tmp := MyCounter new.	tmp value: 5.	tmp increment.		self assert: (tmp value = 6)! !!MyCounterTest methodsFor: 'nil' stamp: '12/7/2024 17:44'!testDecrementing	"A test that will check if method decrement is working properly. 	Test value 5. Expected result 64"	| tmp |	tmp := MyCounter new.	tmp value: 5.	tmp decrement.		self assert: (tmp value = 4)! !Object << #MyCounter	slots: { #value };	package: 'Advent-Of-Code-Day5'!!MyCounter methodsFor: 'initialization' stamp: '12/7/2024 17:48'!value	^ value! !!MyCounter methodsFor: 'initialization' stamp: '12/7/2024 17:48'!value: anInteger	value := anInteger ! !!MyCounter methodsFor: 'initialization' stamp: '12/7/2024 17:49'!init	"Method for initialization. Setting variables to some default values. For example 0."	value := 0! !!MyCounter methodsFor: 'initialization' stamp: '12/7/2024 17:51'!increment  "This method adds 1 to variable value."	self value: (value + 1)! !!MyCounter methodsFor: 'initialization' stamp: '12/7/2024 17:51'!decrement  "This method substracts 1 to variable value."	self value: (value + 1)! !!MyCounter methodsFor: 'initialization' stamp: '12/7/2024 17:51' prior: 43207!decrement  "This method substracts 1 to variable value."	self value: (value - 1)! !Object << #MyCounter	"ballin"	slots: { #value };	package: 'Advent-Of-Code-Day5'!----SNAPSHOT----2024-12-07T18:10:29.876512+08:00 Pharo.image priorSource: 20019!----SNAPSHOT----2024-12-07T18:10:29.877585+08:00 Pharo.image priorSource: 21938!