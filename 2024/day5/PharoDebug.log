THERE_BE_DRAGONS_HERE
receiver of "asText" is nil
6 December 2024 11:53:02.625197 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #asText
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

ClyPackageRichTextCommentEditorToolMorph>>asRenderedText:
	Receiver: a ClyPackageRichTextCommentEditorToolMorph(972411392)
	Arguments and temporary variables: 
		arg1: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (214094592)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowserMorph(320107776)
		context: 	a ClyFullBrowserPackageContext
		decorators: 	an OrderedCollection()
		containerTab: 	a ClyNotebookPageMorph(29095424)
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(455067904)
		changesCancelRequested: 	false
		applyingChanges: 	false
		editingPackage: 	a Package(AST-Core)
		isRendering: 	true


ClyPackageRichTextCommentEditorToolMorph>>editingText
	Receiver: a ClyPackageRichTextCommentEditorToolMorph(972411392)
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (214094592)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowserMorph(320107776)
		context: 	a ClyFullBrowserPackageContext
		decorators: 	an OrderedCollection()
		containerTab: 	a ClyNotebookPageMorph(29095424)
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(455067904)
		changesCancelRequested: 	false
		applyingChanges: 	false
		editingPackage: 	a Package(AST-Core)
		isRendering: 	true


ClyPackageRichTextCommentEditorToolMorph(ClyTextEditorToolMorph)>>buildTextMorph
	Receiver: a ClyPackageRichTextCommentEditorToolMorph(972411392)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (214094592)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowserMorph(320107776)
		context: 	a ClyFullBrowserPackageContext
		decorators: 	an OrderedCollection()
		containerTab: 	a ClyNotebookPageMorph(29095424)
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(455067904)
		changesCancelRequested: 	false
		applyingChanges: 	false
		editingPackage: 	a Package(AST-Core)
		isRendering: 	true


ClyPackageRichTextCommentEditorToolMorph>>buildTextMorph
	Receiver: a ClyPackageRichTextCommentEditorToolMorph(972411392)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (214094592)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowserMorph(320107776)
		context: 	a ClyFullBrowserPackageContext
		decorators: 	an OrderedCollection()
		containerTab: 	a ClyNotebookPageMorph(29095424)
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(455067904)
		changesCancelRequested: 	false
		applyingChanges: 	false
		editingPackage: 	a Package(AST-Core)
		isRendering: 	true


ClyPackageRichTextCommentEditorToolMorph(ClyTextEditorToolMorph)>>build
	Receiver: a ClyPackageRichTextCommentEditorToolMorph(972411392)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (214094592)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowserMorph(320107776)
		context: 	a ClyFullBrowserPackageContext
		decorators: 	an OrderedCollection()
		containerTab: 	a ClyNotebookPageMorph(29095424)
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(455067904)
		changesCancelRequested: 	false
		applyingChanges: 	false
		editingPackage: 	a Package(AST-Core)
		isRendering: 	true


ClyPackageRichTextCommentEditorToolMorph(ClyBrowserToolMorph)>>buildPageAndDecorate
	Receiver: a ClyPackageRichTextCommentEditorToolMorph(972411392)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (214094592)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowserMorph(320107776)
		context: 	a ClyFullBrowserPackageContext
		decorators: 	an OrderedCollection()
		containerTab: 	a ClyNotebookPageMorph(29095424)
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(455067904)
		changesCancelRequested: 	false
		applyingChanges: 	false
		editingPackage: 	a Package(AST-Core)
		isRendering: 	true


[ self buildPageAndDecorate ] in ClyPackageRichTextCommentEditorToolMorph(ClyBrowserToolMorph)>>addNotebookPageOn:
	Receiver: a ClyPackageRichTextCommentEditorToolMorph(972411392)
	Arguments and temporary variables: 
		arg1: 	a ClyNotebookMorph(559120384)
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (214094592)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowserMorph(320107776)
		context: 	a ClyFullBrowserPackageContext
		decorators: 	an OrderedCollection()
		containerTab: 	a ClyNotebookPageMorph(29095424)
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(455067904)
		changesCancelRequested: 	false
		applyingChanges: 	false
		editingPackage: 	a Package(AST-Core)
		isRendering: 	true


ClyNotebookPageMorph(SpNotebookPageMorph)>>actualPageMorph
	Receiver: a ClyNotebookPageMorph(29095424)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyNotebookMorph(559120384)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (400081664)
		actualPageMorph: 	nil
		lazyPageMorphCreation: 	[ self buildPageAndDecorate ]
		labelMorph: 	a Morph(402569472)
		model: 	a ClyPackageRichTextCommentEditorToolMorph(972411392)
		icon: 	Form(16x16x32)
		labelPresenter: 	a ClyNotebookPageHeaderPresenter
		label: 	'Comment'
		actions: 	an OrderedCollection(a ClyNotebookPageActionButtonMorph(338689536)[..]
		closeable: 	true


ClyNotebookMorph(SpNotebookMorph)>>pageAt:
	Receiver: a ClyNotebookMorph(559120384)
	Arguments and temporary variables: 
		arg1: 	1
	Receiver's instance variables: 
		bounds: 	(255.0@449.0) corner: (1170.0@729.0)
		owner: 	a PanelMorph(822398720)
		submorphs: 	an Array(a PanelMorph(357606400) a PanelMorph(726332672))
		fullBounds: 	(255@449) corner: (1170@729)
		color: 	Color transparent
		extension: 	a MorphExtension (157901824) [other:  (announcer -> an Announcer[..]
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a SpNotebookTabSelectorMorph(534390528)
		contentMorph: 	a PanelMorph(357606400)
		pageMorphs: 	a SortedCollection(a ClyNotebookPageMorph(29095424) a ClyNotebo[..]
		headerMorph: 	a PanelMorph(726332672)
		toolbarMorph: 	a SpNotebookPanelMorph(641253376)


ClyNotebookMorph(SpNotebookMorph)>>updatePageIndex:
	Receiver: a ClyNotebookMorph(559120384)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(255.0@449.0) corner: (1170.0@729.0)
		owner: 	a PanelMorph(822398720)
		submorphs: 	an Array(a PanelMorph(357606400) a PanelMorph(726332672))
		fullBounds: 	(255@449) corner: (1170@729)
		color: 	Color transparent
		extension: 	a MorphExtension (157901824) [other:  (announcer -> an Announcer[..]
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a SpNotebookTabSelectorMorph(534390528)
		contentMorph: 	a PanelMorph(357606400)
		pageMorphs: 	a SortedCollection(a ClyNotebookPageMorph(29095424) a ClyNotebo[..]
		headerMorph: 	a PanelMorph(726332672)
		toolbarMorph: 	a SpNotebookPanelMorph(641253376)


ClyNotebookMorph(TabGroupMorph)>>update:with:
	Receiver: a ClyNotebookMorph(559120384)
	Arguments and temporary variables: 
		arg1: 	#selectedIndex
		arg2: 	0
	Receiver's instance variables: 
		bounds: 	(255.0@449.0) corner: (1170.0@729.0)
		owner: 	a PanelMorph(822398720)
		submorphs: 	an Array(a PanelMorph(357606400) a PanelMorph(726332672))
		fullBounds: 	(255@449) corner: (1170@729)
		color: 	Color transparent
		extension: 	a MorphExtension (157901824) [other:  (announcer -> an Announcer[..]
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a SpNotebookTabSelectorMorph(534390528)
		contentMorph: 	a PanelMorph(357606400)
		pageMorphs: 	a SortedCollection(a ClyNotebookPageMorph(29095424) a ClyNotebo[..]
		headerMorph: 	a PanelMorph(726332672)
		toolbarMorph: 	a SpNotebookPanelMorph(641253376)


MorphChangedWithArguments>>deliverTo:
	Receiver: a MorphChangedWithArguments
	Arguments and temporary variables: 
		arg1: 	a ClyNotebookMorph(559120384)
	Receiver's instance variables: 
		morph: 	a SpNotebookTabSelectorMorph(534390528)
		selector: 	#selectedIndex
		arguments: 	0


ClyNotebookMorph(Morph)>>handleUpdate:
	Receiver: a ClyNotebookMorph(559120384)
	Arguments and temporary variables: 
		arg1: 	a MorphChangedWithArguments
	Receiver's instance variables: 
		bounds: 	(255.0@449.0) corner: (1170.0@729.0)
		owner: 	a PanelMorph(822398720)
		submorphs: 	an Array(a PanelMorph(357606400) a PanelMorph(726332672))
		fullBounds: 	(255@449) corner: (1170@729)
		color: 	Color transparent
		extension: 	a MorphExtension (157901824) [other:  (announcer -> an Announcer[..]
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a SpNotebookTabSelectorMorph(534390528)
		contentMorph: 	a PanelMorph(357606400)
		pageMorphs: 	a SortedCollection(a ClyNotebookPageMorph(29095424) a ClyNotebo[..]
		headerMorph: 	a PanelMorph(726332672)
		toolbarMorph: 	a SpNotebookPanelMorph(641253376)


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a ClyNotebookMorph(559120384))
	Arguments and temporary variables: 
		arg1: 	a MorphChangedWithArguments
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a ClyNotebookMorph(559120384)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a ClyNotebookMorph(559120384))
	Arguments and temporary variables: 
		arg1: 	a MorphChangedWithArguments
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a ClyNotebookMorph(559120384)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a ClyNotebookMorph(559120384))
	Arguments and temporary variables: 
		arg1: 	a MorphChangedWithArguments
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a ClyNotebookMorph(559120384)


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
	Receiver: an AnnouncementSubscription (a ClyNotebookMorph(559120384) subscribes to an Announceme[..]
	Arguments and temporary variables: 
		arg1: 	a MorphChangedWithArguments
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	an AnnouncementSet(MorphChangedWithArguments MorphChanged)
		action: 	MessageSend(#handleUpdate: -> a ClyNotebookMorph(559120384))
		subscriber: 	a ClyNotebookMorph(559120384)


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 |
			  | tmp1 tmp2 tmp3 tmp4 |
			  tmp1 := thisContext.
			 [..]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription(AbstractAnnouncementSubscription)>>d[..]
		compiledBlock: 	a CompiledBlock: [ action cull: arg1 cull: announcer ]
		numArgs: 	0
		receiver: 	an AnnouncementSubscription (a ClyNotebookMorph(559120384) subscr[..]


[ Processor terminateRealActive ] in [ :arg3 |
			  | tmp1 tmp2 tmp3 tmp4 |
			  tmp1 := thisContext.
			  tmp4 := tmp1 home.
			  [ tmp1 sender == tmp4 ] whileFalse: [
				  tmp1 := tmp1 sender.
				  tmp1 ifNil: [ ^ arg2 cull: arg3 ] ifNotNil: [ tmp1 ] ].
			  tmp3 := [ Processor terminateRealActive ] asContext.
			  tmp1 privSender: tmp3.
			  tmp2 := [ arg2 cull: arg3 ] asContext.
			  tmp2 privSender: thisContext sender.
			  (Process forContext: tmp2 priority: Processor activePriority)
				  resume.
			  thisContext privSender: tmp4 ] in FullBlockClosure(BlockClosure)>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	nil
		arg3: 	UnhandledError
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription(AbstractAnnouncementSubscription)>>d[..]
		compiledBlock: 	a CompiledBlock: [ action cull: arg1 cull: announcer ]
		numArgs: 	0
		receiver: 	an AnnouncementSubscription (a ClyNotebookMorph(559120384) subscr[..]



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asText
ClyPackageRichTextCommentEditorToolMorph>>asRenderedText:
ClyPackageRichTextCommentEditorToolMorph>>editingText
ClyPackageRichTextCommentEditorToolMorph(ClyTextEditorToolMorph)>>buildTextMorph
ClyPackageRichTextCommentEditorToolMorph>>buildTextMorph
ClyPackageRichTextCommentEditorToolMorph(ClyTextEditorToolMorph)>>build
ClyPackageRichTextCommentEditorToolMorph(ClyBrowserToolMorph)>>buildPageAndDecorate
[ self buildPageAndDecorate ] in ClyPackageRichTextCommentEditorToolMorph(ClyBrowserToolMorph)>>addNotebookPageOn:
ClyNotebookPageMorph(SpNotebookPageMorph)>>actualPageMorph
ClyNotebookMorph(SpNotebookMorph)>>pageAt:
ClyNotebookMorph(SpNotebookMorph)>>updatePageIndex:
ClyNotebookMorph(TabGroupMorph)>>update:with:
MorphChangedWithArguments>>deliverTo:
ClyNotebookMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
[ Processor terminateRealActive ] in [ :arg3 |
			  | tmp1 tmp2 tmp3 tmp4 |
			  tmp1 := thisContext.
			  tmp4 := tmp1 home.
			  [ tmp1 sender == tmp4 ] whileFalse: [
				  tmp1 := tmp1 sender.
				  tmp1 ifNil: [ ^ arg2 cull: arg3 ] ifNotNil: [ tmp1 ] ].
			  tmp3 := [ Processor terminateRealActive ] asContext.
			  tmp1 privSender: tmp3.
			  tmp2 := [ arg2 cull: arg3 ] asContext.
			  tmp2 privSender: thisContext sender.
			  (Process forContext: tmp2 priority: Processor activePriority)
				  resume.
			  thisContext privSender: tmp4 ] in FullBlockClosure(BlockClosure)>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SmallInteger >> #c
7 December 2024 6:46:16.791484 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #c
	Receiver: 5
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
5

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		c: 	a Part1
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| c |
	c := Part1 new.

	c increase: 5 c amount
		source: 	'| c |

c := Part1 new.

c increase: 5
c amount '
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 47) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5
c am[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'| c |

c := Part1 new.

c increase: 5
c amount '
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 47) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5
c am[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(296119552))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(296119552)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(16.0@14.0) mouseUp 25773306 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824[..]
		arg3: 	a SpToolbarButtonMorph(296119552)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824439040) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824439040) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(16.0@14.0) mouseUp 25773306 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(16.0@14.0) mouseUp 25773306 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(296119552)
	Receiver's instance variables: 
		timeStamp: 	25773306
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(16.0@14.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(16.0@14.0) mouseUp 25773306 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(16.0@14.0) mouseUp 25773306 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(66@314) corner: (82@330)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(66@314) corner: (82@330)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(66@314) mouseUp 25773306 nil]
		targetOffset: 	(16.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	true


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(66@314) corner: (82@330)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(66@314) corner: (82@330)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(66@314) mouseUp 25773306 nil]
		targetOffset: 	(16.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	true


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(66@314) mouseUp 25773306 nil]
		arg2: 	a SpToolbarButtonMorph(296119552)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(66@314) corner: (82@330)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(66@314) corner: (82@330)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(66@314) mouseUp 25773306 nil]
		targetOffset: 	(16.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	true


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(66@314) mouseUp 25773306 nil]
	Receiver's instance variables: 
		bounds: 	(66@314) corner: (82@330)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(66@314) corner: (82@330)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(66@314) mouseUp 25773306 nil]
		targetOffset: 	(16.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	true


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(66@314) mouseUp 25773306 nil]
		tmp1: 	[(66@314) mouseUp 25773306 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(66@314) corner: (82@330)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(66@314) corner: (82@330)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(66@314) mouseUp 25773306 nil]
		targetOffset: 	(16.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	true


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(66@314) mouseUp 25773306 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25770202
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(358643200)))
		lastAlarmTime: 	25773298
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25770202
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(358643200)))
		lastAlarmTime: 	25773298
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #c
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SmallInteger >> #c
7 December 2024 6:46:19.525072 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #c
	Receiver: 5
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
5

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		c: 	a Part1
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| c |
	c := Part1 new.

	c increase: 5 c amount
		source: 	'| c |

c := Part1 new.

c increase: 5
c amount '
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 47) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5
c am[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary(#c->nil )
		arg1: 	'| c |

c := Part1 new.

c increase: 5
c amount '
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 47) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5
c am[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(296119552))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(296119552)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(22.0@31.0) mouseUp 25776040 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824[..]
		arg3: 	a SpToolbarButtonMorph(296119552)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824439040) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824439040) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(22.0@31.0) mouseUp 25776040 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(22.0@31.0) mouseUp 25776040 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(296119552)
	Receiver's instance variables: 
		timeStamp: 	25776040
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(22.0@31.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(22.0@31.0) mouseUp 25776040 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(22.0@31.0) mouseUp 25776040 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(64@223) corner: (80@239)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(64@223) corner: (80@239)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(64@223) mouseUp 25776040 nil]
		targetOffset: 	(22.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	true


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(64@223) corner: (80@239)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(64@223) corner: (80@239)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(64@223) mouseUp 25776040 nil]
		targetOffset: 	(22.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	true


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(64@223) mouseUp 25776040 nil]
		arg2: 	a SpToolbarButtonMorph(296119552)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(64@223) corner: (80@239)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(64@223) corner: (80@239)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(64@223) mouseUp 25776040 nil]
		targetOffset: 	(22.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	true


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(64@223) mouseUp 25776040 nil]
	Receiver's instance variables: 
		bounds: 	(64@223) corner: (80@239)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(64@223) corner: (80@239)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(64@223) mouseUp 25776040 nil]
		targetOffset: 	(22.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	true


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(64@223) mouseUp 25776040 nil]
		tmp1: 	[(64@223) mouseUp 25776040 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(64@223) corner: (80@239)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(64@223) corner: (80@239)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(64@223) mouseUp 25776040 nil]
		targetOffset: 	(22.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	true


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(64@223) mouseUp 25776040 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 2 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25770202
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(358643200)))
		lastAlarmTime: 	25776030
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 2 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25770202
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(358643200)))
		lastAlarmTime: 	25776030
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 2 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #c
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SmallInteger >> #c
7 December 2024 6:46:20.946617 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #c
	Receiver: 5
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
5

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		c: 	a Part1
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| c |
	c := Part1 new.

	c increase: 5 c amount
		source: 	'| c |

c := Part1 new.

c increase: 5
c amount '
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 47) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5
c am[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary(#c->nil )
		arg1: 	'| c |

c := Part1 new.

c increase: 5
c amount '
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 47) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5
c am[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StEvaluateCommand>>execute
	Receiver: a StEvaluateCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it and go'
		basicDescription: 	'Evaluate selection and open an inspection column.'
		transform: 	[ :arg1 | arg1 ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it and go)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StEvaluateCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	a KMKeyCombinationChoice
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Do it and go)


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Do it and go)


[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
	Receiver: a SpMenuPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpMenuItemPresenter
		arg2: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ arg2 execute ]
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpMenuPresenterBuilder>>fillItem:with:
		compiledBlock: 	a CompiledBlock: [ arg2 execute ]
		numArgs: 	0
		receiver: 	a SpMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
		tmp1: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ [ arg1 canBeExecuted ] ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Do it and go' ]
		icon: 	an ObservableValueHolder[ Form(13x13x32) ]
		description: 	an ObservableValueHolder[ 'Evaluate selection and open an insp[..]
		action: 	[ arg2 execute ]
		shortcut: 	a KMKeyCombinationChoice
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(34750976)'Do it and go'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(34750976)'Do it and go'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(117.0@302.0) corner: (274.0@319.0)
		owner: 	a MenuMorph(170579200)
		submorphs: 	#()
		fullBounds: 	(117.0@302.0) corner: (274.0@319.0)
		color: 	Color black
		extension: 	a MorphExtension (750573824) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it and go'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+G'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: Cursor normal
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	[ tmp1 show ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: Cursor normal
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(34750976)'Do it and go'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		arg1: 	Cursor normal
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(34750976)'Do it and go'
	Arguments and temporary variables: 
		arg1: 	[(138@315) mouseUp 25777471 nil]
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(117.0@302.0) corner: (274.0@319.0)
		owner: 	a MenuMorph(170579200)
		submorphs: 	#()
		fullBounds: 	(117.0@302.0) corner: (274.0@319.0)
		color: 	Color black
		extension: 	a MorphExtension (750573824) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it and go'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+G'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(34750976)'Do it and go'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(117.0@302.0) corner: (274.0@319.0)
		owner: 	a MenuMorph(170579200)
		submorphs: 	#()
		fullBounds: 	(117.0@302.0) corner: (274.0@319.0)
		color: 	Color black
		extension: 	a MorphExtension (750573824) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it and go'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+G'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(34750976)'Do it and go'
	Arguments and temporary variables: 
		arg1: 	[(138@315) mouseUp 25777471 nil]
	Receiver's instance variables: 
		bounds: 	(117.0@302.0) corner: (274.0@319.0)
		owner: 	a MenuMorph(170579200)
		submorphs: 	#()
		fullBounds: 	(117.0@302.0) corner: (274.0@319.0)
		color: 	Color black
		extension: 	a MorphExtension (750573824) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it and go'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+G'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(138@315) mouseUp 25777471 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToggleMenuItemMorph(34750976)'Do it and go'
	Receiver's instance variables: 
		timeStamp: 	25777471
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(138@315)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(34750976)'Do it and go'
	Arguments and temporary variables: 
		arg1: 	[(138@315) mouseUp 25777471 nil]
	Receiver's instance variables: 
		bounds: 	(117.0@302.0) corner: (274.0@319.0)
		owner: 	a MenuMorph(170579200)
		submorphs: 	#()
		fullBounds: 	(117.0@302.0) corner: (274.0@319.0)
		color: 	Color black
		extension: 	a MorphExtension (750573824) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it and go'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+G'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(138@315) mouseUp 25777471 nil]
		arg2: 	a SpToggleMenuItemMorph(34750976)'Do it and go'
		tmp1: 	nil
		tmp2: 	1
		tmp3: 	nil
		tmp4: 	#()
		tmp5: 	true
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(34750976)'Do it and go'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(138@315) mouseUp 25777471 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(34750976)'Do it and go'


MouseButtonEvent>>sentTo:
	Receiver: [(138@315) mouseUp 25777471 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	25777471
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(138@315)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(138@315) mouseUp 25777471 nil]
		arg2: 	a SpToggleMenuItemMorph(34750976)'Do it and go'
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(34750976)'Do it and go'


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ arg1 sentTo: self ]
	Arguments and temporary variables: 
		arg1: 	[ morph := nil ]
		tmp1: 	[ morph := nil ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		compiledBlock: 	a CompiledBlock: [ ^ arg1 sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(138@315) mouseUp 25777471 nil]
		arg2: 	a SpToggleMenuItemMorph(34750976)'Do it and go'
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(34750976)'Do it and go'


SpToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a SpToggleMenuItemMorph(34750976)'Do it and go'
	Arguments and temporary variables: 
		arg1: 	[(138@315) mouseUp 25777471 nil]
		arg2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(117.0@302.0) corner: (274.0@319.0)
		owner: 	a MenuMorph(170579200)
		submorphs: 	#()
		fullBounds: 	(117.0@302.0) corner: (274.0@319.0)
		color: 	Color black
		extension: 	a MorphExtension (750573824) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it and go'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+G'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(138@315) mouseUp 25777471 nil]
		arg2: 	a MenuMorph(170579200)
		tmp1: 	[(138@315) mouseUp 25777471 nil]
		tmp2: 	1
		tmp3: 	a SpToggleMenuItemMorph(34750976)'Do it and go'
		tmp4: 	an Array(a SpToggleMenuItemMorph(34750976)'Do it and go' a MenuLineMo[..]
		tmp5: 	false
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(34750976)'Do it and go'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(138@315) mouseUp 25777471 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(34750976)'Do it and go'


MouseButtonEvent>>sentTo:
	Receiver: [(138@315) mouseUp 25777471 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	25777471
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(138@315)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(138@315) mouseUp 25777471 nil]
		arg2: 	a MenuMorph(170579200)
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(34750976)'Do it and go'



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #c
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StEvaluateCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "+" is nil
7 December 2024 6:46:28.218683 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

Part1>>increase:
	Receiver: a Part1
	Arguments and temporary variables: 
		i: 	5
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		c: 	a Part1
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| c |
	c := Part1 new.

	c increase: 5.
	c amount
		source: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary(#c->nil )
		arg1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(296119552))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(296119552)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(9.0@25.0) mouseUp 25784741 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824[..]
		arg3: 	a SpToolbarButtonMorph(296119552)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824439040) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824439040) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(9.0@25.0) mouseUp 25784741 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(9.0@25.0) mouseUp 25784741 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(296119552)
	Receiver's instance variables: 
		timeStamp: 	25784741
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(9.0@25.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(9.0@25.0) mouseUp 25784741 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(9.0@25.0) mouseUp 25784741 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(51@217) corner: (67@233)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(51@217) corner: (67@233)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(51@217) mouseUp 25784741 nil]
		targetOffset: 	(8.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(51@217) corner: (67@233)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(51@217) corner: (67@233)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(51@217) mouseUp 25784741 nil]
		targetOffset: 	(8.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(51@217) mouseUp 25784741 nil]
		arg2: 	a SpToolbarButtonMorph(296119552)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(51@217) corner: (67@233)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(51@217) corner: (67@233)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(51@217) mouseUp 25784741 nil]
		targetOffset: 	(8.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(51@217) mouseUp 25784741 nil]
	Receiver's instance variables: 
		bounds: 	(51@217) corner: (67@233)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(51@217) corner: (67@233)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(51@217) mouseUp 25784741 nil]
		targetOffset: 	(8.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(51@217) mouseUp 25784741 nil]
		tmp1: 	[(51@217) mouseUp 25784741 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(51@217) corner: (67@233)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(51@217) corner: (67@233)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(51@217) mouseUp 25784741 nil]
		targetOffset: 	(8.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(51@217) mouseUp 25784741 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 1 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25770202
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(358643200)))
		lastAlarmTime: 	25784722
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25770202
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(358643200)))
		lastAlarmTime: 	25784722
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
Part1>>increase:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "+" is nil
7 December 2024 6:46:30.102116 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

Part1>>increase:
	Receiver: a Part1
	Arguments and temporary variables: 
		i: 	5
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		c: 	a Part1
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| c |
	c := Part1 new.

	c increase: 5.
	c amount
		source: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary(#c->nil )
		arg1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StEvaluateCommand>>execute
	Receiver: a StEvaluateCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it and go'
		basicDescription: 	'Evaluate selection and open an inspection column.'
		transform: 	[ :arg1 | arg1 ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it and go)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StEvaluateCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	a KMKeyCombinationChoice
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Do it and go)


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Do it and go)


[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
	Receiver: a SpMenuPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpMenuItemPresenter
		arg2: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ arg2 execute ]
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpMenuPresenterBuilder>>fillItem:with:
		compiledBlock: 	a CompiledBlock: [ arg2 execute ]
		numArgs: 	0
		receiver: 	a SpMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
		tmp1: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ [ arg1 canBeExecuted ] ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Do it and go' ]
		icon: 	an ObservableValueHolder[ Form(13x13x32) ]
		description: 	an ObservableValueHolder[ 'Evaluate selection and open an insp[..]
		action: 	[ arg2 execute ]
		shortcut: 	a KMKeyCombinationChoice
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(947711232)'Do it and go'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(947711232)'Do it and go'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(112.0@263.0) corner: (269.0@280.0)
		owner: 	a MenuMorph(950497024)
		submorphs: 	#()
		fullBounds: 	(112.0@263.0) corner: (269.0@280.0)
		color: 	Color black
		extension: 	a MorphExtension (413911808) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it and go'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+G'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: Cursor normal
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	[ tmp1 show ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: Cursor normal
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(947711232)'Do it and go'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		arg1: 	Cursor normal
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(947711232)'Do it and go'
	Arguments and temporary variables: 
		arg1: 	[(123@273) mouseUp 25786626 nil]
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(112.0@263.0) corner: (269.0@280.0)
		owner: 	a MenuMorph(950497024)
		submorphs: 	#()
		fullBounds: 	(112.0@263.0) corner: (269.0@280.0)
		color: 	Color black
		extension: 	a MorphExtension (413911808) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it and go'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+G'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(947711232)'Do it and go'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(112.0@263.0) corner: (269.0@280.0)
		owner: 	a MenuMorph(950497024)
		submorphs: 	#()
		fullBounds: 	(112.0@263.0) corner: (269.0@280.0)
		color: 	Color black
		extension: 	a MorphExtension (413911808) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it and go'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+G'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(947711232)'Do it and go'
	Arguments and temporary variables: 
		arg1: 	[(123@273) mouseUp 25786626 nil]
	Receiver's instance variables: 
		bounds: 	(112.0@263.0) corner: (269.0@280.0)
		owner: 	a MenuMorph(950497024)
		submorphs: 	#()
		fullBounds: 	(112.0@263.0) corner: (269.0@280.0)
		color: 	Color black
		extension: 	a MorphExtension (413911808) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it and go'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+G'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(123@273) mouseUp 25786626 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToggleMenuItemMorph(947711232)'Do it and go'
	Receiver's instance variables: 
		timeStamp: 	25786626
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(123@273)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(947711232)'Do it and go'
	Arguments and temporary variables: 
		arg1: 	[(123@273) mouseUp 25786626 nil]
	Receiver's instance variables: 
		bounds: 	(112.0@263.0) corner: (269.0@280.0)
		owner: 	a MenuMorph(950497024)
		submorphs: 	#()
		fullBounds: 	(112.0@263.0) corner: (269.0@280.0)
		color: 	Color black
		extension: 	a MorphExtension (413911808) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it and go'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+G'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(123@273) mouseUp 25786626 nil]
		arg2: 	a SpToggleMenuItemMorph(947711232)'Do it and go'
		tmp1: 	nil
		tmp2: 	1
		tmp3: 	nil
		tmp4: 	#()
		tmp5: 	true
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(947711232)'Do it and go'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(123@273) mouseUp 25786626 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(947711232)'Do it and go'


MouseButtonEvent>>sentTo:
	Receiver: [(123@273) mouseUp 25786626 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	25786626
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(123@273)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(123@273) mouseUp 25786626 nil]
		arg2: 	a SpToggleMenuItemMorph(947711232)'Do it and go'
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(947711232)'Do it and go'


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ arg1 sentTo: self ]
	Arguments and temporary variables: 
		arg1: 	[ morph := nil ]
		tmp1: 	[ morph := nil ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		compiledBlock: 	a CompiledBlock: [ ^ arg1 sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(123@273) mouseUp 25786626 nil]
		arg2: 	a SpToggleMenuItemMorph(947711232)'Do it and go'
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(947711232)'Do it and go'


SpToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a SpToggleMenuItemMorph(947711232)'Do it and go'
	Arguments and temporary variables: 
		arg1: 	[(123@273) mouseUp 25786626 nil]
		arg2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(112.0@263.0) corner: (269.0@280.0)
		owner: 	a MenuMorph(950497024)
		submorphs: 	#()
		fullBounds: 	(112.0@263.0) corner: (269.0@280.0)
		color: 	Color black
		extension: 	a MorphExtension (413911808) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Do it and go'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+G'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(123@273) mouseUp 25786626 nil]
		arg2: 	a MenuMorph(950497024)
		tmp1: 	[(123@273) mouseUp 25786626 nil]
		tmp2: 	1
		tmp3: 	a SpToggleMenuItemMorph(947711232)'Do it and go'
		tmp4: 	an Array(a SpToggleMenuItemMorph(947711232)'Do it and go' a MenuLineM[..]
		tmp5: 	false
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(947711232)'Do it and go'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(123@273) mouseUp 25786626 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(947711232)'Do it and go'


MouseButtonEvent>>sentTo:
	Receiver: [(123@273) mouseUp 25786626 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	25786626
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(123@273)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
Part1>>increase:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StEvaluateCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "+" is nil
7 December 2024 6:46:40.867406 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

Part1>>increase:
	Receiver: a Part1
	Arguments and temporary variables: 
		i: 	5
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		c: 	a Part1
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| c |
	c := Part1 new.

	c increase: 5.
	c amount
		source: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary(#c->nil )
		arg1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		arg2: 	[ ^ self ]
		arg3: 	[ :arg3 | arg3 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		arg2: 	[ :arg1 | self printObject: arg1 ]
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	[ :arg1 | self printObject: arg1 ]
		tmp1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand>>execute
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Print it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCodePrintItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallPrintIt
		shortcutKey: 	a KMKeyCombinationChoice
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
	Receiver: a SpMenuPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpMenuItemPresenter
		arg2: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ arg2 execute ]
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpMenuPresenterBuilder>>fillItem:with:
		compiledBlock: 	a CompiledBlock: [ arg2 execute ]
		numArgs: 	0
		receiver: 	a SpMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
		tmp1: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ [ arg1 canBeExecuted ] ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Print it' ]
		icon: 	an ObservableValueHolder[ Form(13x13x32) ]
		description: 	an ObservableValueHolder[ 'Evaluate selection and print the re[..]
		action: 	[ arg2 execute ]
		shortcut: 	a KMKeyCombinationChoice
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(1046336512)'Print it'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(1046336512)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(132.0@430.0) corner: (289.0@447.0)
		owner: 	a MenuMorph(507219200)
		submorphs: 	#()
		fullBounds: 	(132.0@430.0) corner: (289.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (405991936) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: Cursor normal
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	[ tmp1 show ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: Cursor normal
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(1046336512)'Print it'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		arg1: 	Cursor normal
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(1046336512)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(189@439) mouseUp 25797380 nil]
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(132.0@430.0) corner: (289.0@447.0)
		owner: 	a MenuMorph(507219200)
		submorphs: 	#()
		fullBounds: 	(132.0@430.0) corner: (289.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (405991936) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(1046336512)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(132.0@430.0) corner: (289.0@447.0)
		owner: 	a MenuMorph(507219200)
		submorphs: 	#()
		fullBounds: 	(132.0@430.0) corner: (289.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (405991936) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(1046336512)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(189@439) mouseUp 25797380 nil]
	Receiver's instance variables: 
		bounds: 	(132.0@430.0) corner: (289.0@447.0)
		owner: 	a MenuMorph(507219200)
		submorphs: 	#()
		fullBounds: 	(132.0@430.0) corner: (289.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (405991936) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(189@439) mouseUp 25797380 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToggleMenuItemMorph(1046336512)'Print it'
	Receiver's instance variables: 
		timeStamp: 	25797380
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(189@439)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(1046336512)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(189@439) mouseUp 25797380 nil]
	Receiver's instance variables: 
		bounds: 	(132.0@430.0) corner: (289.0@447.0)
		owner: 	a MenuMorph(507219200)
		submorphs: 	#()
		fullBounds: 	(132.0@430.0) corner: (289.0@447.0)
		color: 	Color black
		extension: 	a MorphExtension (405991936) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(189@439) mouseUp 25797380 nil]
		arg2: 	a SpToggleMenuItemMorph(1046336512)'Print it'
		tmp1: 	nil
		tmp2: 	1
		tmp3: 	nil
		tmp4: 	#()
		tmp5: 	true
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(1046336512)'Print it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(189@439) mouseUp 25797380 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(1046336512)'Print it'


MouseButtonEvent>>sentTo:
	Receiver: [(189@439) mouseUp 25797380 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	25797380
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(189@439)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
Part1>>increase:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
SpCodePrintItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Process>>debugWithTitle:
7 December 2024 6:47:33.979487 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Process>>debugWithTitle:
	Receiver: a Process in nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	nil
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	nil
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(22.0@28.0) corner: (405.0@61.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(22.0@45.0) corner: (405.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(22@45) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(22.0@45.0) corner: (405.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(22@45) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(22.0@45.0) corner: (405.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(22@45) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(362@50) corner: (378@66)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(362@50) corner: (378@66)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpPluggableButtonMorph(267778048)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(362@50) mouseUp 25850459 nil]
		targetOffset: 	(340.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(362@50) corner: (378@66)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(362@50) corner: (378@66)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpPluggableButtonMorph(267778048)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(362@50) mouseUp 25850459 nil]
		targetOffset: 	(340.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(362@50) corner: (378@66)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(362@50) corner: (378@66)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpPluggableButtonMorph(267778048)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(362@50) mouseUp 25850459 nil]
		targetOffset: 	(340.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(362@50) corner: (378@66)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(362@50) corner: (378@66)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpPluggableButtonMorph(267778048)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(362@50) mouseUp 25850459 nil]
		targetOffset: 	(340.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(362@50) corner: (378@66)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(362@50) corner: (378@66)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpPluggableButtonMorph(267778048)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(362@50) mouseUp 25850459 nil]
		targetOffset: 	(340.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 41 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25841057
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25850451
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 41 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25841057
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25850451
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 41 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(10.0@20.0) corner: (417.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	nil
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(10.0@20.0) corner: (417.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	nil
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(10.0@20.0) corner: (417.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	nil
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
	Receiver: an AnnouncementSubscription (a SystemProgressMorph(110145280) subscribes to an Announc[..]
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	an AnnouncementSet(MorphChangedWithArguments MorphChanged)
		action: 	MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
		subscriber: 	a SystemProgressMorph(110145280)


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 |
			  | tmp1 tmp2 tmp3 tmp4 |
			  tmp1 := thisContext.
			 [..]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription(AbstractAnnouncementSubscription)>>d[..]
		compiledBlock: 	a CompiledBlock: [ action cull: arg1 cull: announcer ]
		numArgs: 	0
		receiver: 	an AnnouncementSubscription (a SystemProgressMorph(110145280) sub[..]


FullBlockClosure(BlockClosure)>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg2 | arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription(AbstractAnnouncementSubscription)>>d[..]
		compiledBlock: 	a CompiledBlock: [ action cull: arg1 cull: announcer ]
		numArgs: 	0
		receiver: 	an AnnouncementSubscription (a SystemProgressMorph(110145280) sub[..]


AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
	Receiver: an AnnouncementSubscription (a SystemProgressMorph(110145280) subscribes to an Announc[..]
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	an AnnouncementSet(MorphChangedWithArguments MorphChanged)
		action: 	MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
		subscriber: 	a SystemProgressMorph(110145280)


arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription (a SystemProgress[..]
		monitor: 	a Semaphore()


FullBlockClosure(BlockClosure)>>ifCurtailed:
	Receiver: arg2 at: tmp3
	Arguments and temporary variables: 
		arg1: 	[ tmp4 deliver: arg1 ]
		tmp1: 	[ tmp4 deliver: arg1 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		compiledBlock: 	a CompiledBlock: tmp4 := arg2 at: tmp3
		numArgs: 	0
		receiver: 	a SubscriptionRegistry


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription (a SystemProgress[..]
		monitor: 	a Semaphore()



--- The full stack ---
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 6:47:36.471245 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	nil


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(22.0@28.0) corner: (405.0@61.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(22@28) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(22.0@45.0) corner: (405.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(22@45) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(22.0@45.0) corner: (405.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(22@45) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(22.0@45.0) corner: (405.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(22@45) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(396@47) corner: (412@63)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(396@47) corner: (412@63)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(396@47) mouseUp 25852996 nil]
		targetOffset: 	(374.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(396@47) corner: (412@63)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(396@47) corner: (412@63)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(396@47) mouseUp 25852996 nil]
		targetOffset: 	(374.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(396@47) corner: (412@63)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(396@47) corner: (412@63)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(396@47) mouseUp 25852996 nil]
		targetOffset: 	(374.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(396@47) corner: (412@63)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(396@47) corner: (412@63)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(396@47) mouseUp 25852996 nil]
		targetOffset: 	(374.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(396@47) corner: (412@63)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(396@47) corner: (412@63)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(396@47) mouseUp 25852996 nil]
		targetOffset: 	(374.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 1 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25841057
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25852986
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25841057
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25852986
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(10.0@20.0) corner: (417.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(10@20) corner: (417@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(10.0@20.0) corner: (417.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(10@20) corner: (417@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(10.0@20.0) corner: (417.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(10@20) corner: (417@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 6:47:36.80511 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	nil


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(22.0@28.0) corner: (405.0@61.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(22@28) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(22.0@45.0) corner: (405.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(22@45) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(22.0@45.0) corner: (405.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(22@45) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(22.0@45.0) corner: (405.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(22@45) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(395@48) corner: (411@64)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(395@48) corner: (411@64)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(395@48) mouseUp 25853341 nil]
		targetOffset: 	(373.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(395@48) corner: (411@64)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(395@48) corner: (411@64)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(395@48) mouseUp 25853341 nil]
		targetOffset: 	(373.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(395@48) corner: (411@64)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(395@48) corner: (411@64)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(395@48) mouseUp 25853341 nil]
		targetOffset: 	(373.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(395@48) corner: (411@64)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(395@48) corner: (411@64)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(395@48) mouseUp 25853341 nil]
		targetOffset: 	(373.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(395@48) corner: (411@64)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(395@48) corner: (411@64)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(395@48) mouseUp 25853341 nil]
		targetOffset: 	(373.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 3 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25841057
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25853330
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 3 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25841057
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25853330
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 3 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(10.0@20.0) corner: (417.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(10@20) corner: (417@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(10.0@20.0) corner: (417.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(10@20) corner: (417@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(10.0@20.0) corner: (417.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(10@20) corner: (417@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 6:47:37.151942 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	nil


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(22.0@28.0) corner: (405.0@61.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(22@28) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(22.0@45.0) corner: (405.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(22@45) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(22.0@45.0) corner: (405.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(22@45) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(22.0@45.0) corner: (405.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(22@45) corner: (405@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(395@52) corner: (411@68)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(395@52) corner: (411@68)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(395@52) mouseUp 25853687 nil]
		targetOffset: 	(373.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(395@52) corner: (411@68)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(395@52) corner: (411@68)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(395@52) mouseUp 25853687 nil]
		targetOffset: 	(373.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(395@52) corner: (411@68)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(395@52) corner: (411@68)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(395@52) mouseUp 25853687 nil]
		targetOffset: 	(373.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(395@52) corner: (411@68)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(395@52) corner: (411@68)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(395@52) mouseUp 25853687 nil]
		targetOffset: 	(373.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(395@52) corner: (411@68)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(395@52) corner: (411@68)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(927001088)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(395@52) mouseUp 25853687 nil]
		targetOffset: 	(373.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 1 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25841057
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25853676
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25841057
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25853676
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(10.0@20.0) corner: (417.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(10@20) corner: (417@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(10.0@20.0) corner: (417.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(10@20) corner: (417@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(10.0@20.0) corner: (417.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(10@20) corner: (417@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 6:48:37.39911 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	nil


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0.0@28.0) corner: (383.0@61.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(0@28) corner: (383@61)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@45.0) corner: (383.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(0@45) corner: (383@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@45.0) corner: (383.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(0@45) corner: (383@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@45.0) corner: (383.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(0@45) corner: (383@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(407@60) corner: (423@76)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(407@60) corner: (423@76)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(407@60) mouseUp 25913922 nil]
		targetOffset: 	(358.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(407@60) corner: (423@76)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(407@60) corner: (423@76)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(407@60) mouseUp 25913922 nil]
		targetOffset: 	(358.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(407@60) corner: (423@76)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(407@60) corner: (423@76)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(407@60) mouseUp 25913922 nil]
		targetOffset: 	(358.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(407@60) corner: (423@76)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(407@60) corner: (423@76)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(407@60) mouseUp 25913922 nil]
		targetOffset: 	(358.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(407@60) corner: (423@76)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(407@60) corner: (423@76)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(407@60) mouseUp 25913922 nil]
		targetOffset: 	(358.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 32 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25913911
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 32 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25913911
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 32 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(-12.0@20.0) corner: (395.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(-12@20) corner: (395@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(-12.0@20.0) corner: (395.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(-12@20) corner: (395@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(-12.0@20.0) corner: (395.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(-12@20) corner: (395@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 6:48:37.860563 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	nil


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0.0@28.0) corner: (383.0@61.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(0@28) corner: (383@61)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@45.0) corner: (383.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(0@45) corner: (383@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@45.0) corner: (383.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(0@45) corner: (383@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@45.0) corner: (383.0@61.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(0@45) corner: (383@61)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(399@50) corner: (415@66)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(399@50) corner: (415@66)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(399@50) mouseUp 25914405 nil]
		targetOffset: 	(381.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(399@50) corner: (415@66)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(399@50) corner: (415@66)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(399@50) mouseUp 25914405 nil]
		targetOffset: 	(381.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(399@50) corner: (415@66)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(399@50) corner: (415@66)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(399@50) mouseUp 25914405 nil]
		targetOffset: 	(381.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(399@50) corner: (415@66)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(399@50) corner: (415@66)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(399@50) mouseUp 25914405 nil]
		targetOffset: 	(381.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(399@50) corner: (415@66)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(399@50) corner: (415@66)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(399@50) mouseUp 25914405 nil]
		targetOffset: 	(381.0@1.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25914380
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25914380
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(-12.0@20.0) corner: (395.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(-12@20) corner: (395@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(-12.0@20.0) corner: (395.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(-12@20) corner: (395@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(-12.0@20.0) corner: (395.0@69.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(-12@20) corner: (395@69)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 6:48:41.234008 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	nil


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(598.0@138.0) corner: (981.0@171.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(598@138) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25917771 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25917771 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25917771 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25917771 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25917771 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25917760
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25917760
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 6:48:41.423372 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	nil


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(598.0@138.0) corner: (981.0@171.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(598@138) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25917957 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25917957 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25917957 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25917957 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25917957 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 1 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25917947
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25917947
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 6:48:41.584774 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	nil


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(598.0@138.0) corner: (981.0@171.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(598@138) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25918131 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25918131 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25918131 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25918131 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(972@164) corner: (988@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(972@164) corner: (988@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(972@164) mouseUp 25918131 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25918106
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25918106
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 6:48:41.782496 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	nil


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(598.0@138.0) corner: (981.0@171.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(598@138) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(971@164) corner: (987@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(971@164) corner: (987@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(971@164) mouseUp 25918329 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(971@164) corner: (987@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(971@164) corner: (987@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(971@164) mouseUp 25918329 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(971@164) corner: (987@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(971@164) corner: (987@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(971@164) mouseUp 25918329 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(971@164) corner: (987@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(971@164) corner: (987@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(971@164) mouseUp 25918329 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(971@164) corner: (987@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(971@164) corner: (987@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(971@164) mouseUp 25918329 nil]
		targetOffset: 	(374.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 3 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25918307
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 3 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25918307
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 3 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 6:48:42.171771 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	nil


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(598.0@138.0) corner: (981.0@171.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(598@138) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(598.0@155.0) corner: (981.0@171.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(598@155) corner: (981@171)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(967@164) corner: (983@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(967@164) corner: (983@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(967@164) mouseUp 25918718 nil]
		targetOffset: 	(369.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(967@164) corner: (983@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(967@164) corner: (983@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(967@164) mouseUp 25918718 nil]
		targetOffset: 	(369.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(967@164) corner: (983@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(967@164) corner: (983@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(967@164) mouseUp 25918718 nil]
		targetOffset: 	(369.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(967@164) corner: (983@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(967@164) corner: (983@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(967@164) mouseUp 25918718 nil]
		targetOffset: 	(369.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(967@164) corner: (983@180)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(967@164) corner: (983@180)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(363992576)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(967@164) mouseUp 25918718 nil]
		targetOffset: 	(369.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25918697
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	25918697
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(586.0@130.0) corner: (993.0@179.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(586@130) corner: (993@179)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	25850519


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "+" is nil
7 December 2024 6:50:28.055652 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

Part1>>increase:
	Receiver: a Part1
	Arguments and temporary variables: 
		i: 	5
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		c: 	a Part1
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| c |
	c := Part1 new.

	c increase: 5.
	c amount
		source: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary(#c->nil )
		arg1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		arg2: 	[ ^ self ]
		arg3: 	[ :arg3 | arg3 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		arg2: 	[ :arg1 | self printObject: arg1 ]
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	[ :arg1 | self printObject: arg1 ]
		tmp1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand>>execute
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Print it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCodePrintItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallPrintIt
		shortcutKey: 	a KMKeyCombinationChoice
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
	Receiver: a SpMenuPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpMenuItemPresenter
		arg2: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ arg2 execute ]
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpMenuPresenterBuilder>>fillItem:with:
		compiledBlock: 	a CompiledBlock: [ arg2 execute ]
		numArgs: 	0
		receiver: 	a SpMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
		tmp1: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ [ arg1 canBeExecuted ] ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Print it' ]
		icon: 	an ObservableValueHolder[ Form(13x13x32) ]
		description: 	an ObservableValueHolder[ 'Evaluate selection and print the re[..]
		action: 	[ arg2 execute ]
		shortcut: 	a KMKeyCombinationChoice
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(939169280)'Print it'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(939169280)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(128.0@409.0) corner: (285.0@426.0)
		owner: 	a MenuMorph(845590272)
		submorphs: 	#()
		fullBounds: 	(128.0@409.0) corner: (285.0@426.0)
		color: 	Color black
		extension: 	a MorphExtension (981592832) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: Cursor normal
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	[ tmp1 show ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: Cursor normal
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(939169280)'Print it'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		arg1: 	Cursor normal
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(939169280)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(187@422) mouseUp 26024576 nil]
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(128.0@409.0) corner: (285.0@426.0)
		owner: 	a MenuMorph(845590272)
		submorphs: 	#()
		fullBounds: 	(128.0@409.0) corner: (285.0@426.0)
		color: 	Color black
		extension: 	a MorphExtension (981592832) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(939169280)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(128.0@409.0) corner: (285.0@426.0)
		owner: 	a MenuMorph(845590272)
		submorphs: 	#()
		fullBounds: 	(128.0@409.0) corner: (285.0@426.0)
		color: 	Color black
		extension: 	a MorphExtension (981592832) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(939169280)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(187@422) mouseUp 26024576 nil]
	Receiver's instance variables: 
		bounds: 	(128.0@409.0) corner: (285.0@426.0)
		owner: 	a MenuMorph(845590272)
		submorphs: 	#()
		fullBounds: 	(128.0@409.0) corner: (285.0@426.0)
		color: 	Color black
		extension: 	a MorphExtension (981592832) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(187@422) mouseUp 26024576 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToggleMenuItemMorph(939169280)'Print it'
	Receiver's instance variables: 
		timeStamp: 	26024576
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(187@422)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(939169280)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(187@422) mouseUp 26024576 nil]
	Receiver's instance variables: 
		bounds: 	(128.0@409.0) corner: (285.0@426.0)
		owner: 	a MenuMorph(845590272)
		submorphs: 	#()
		fullBounds: 	(128.0@409.0) corner: (285.0@426.0)
		color: 	Color black
		extension: 	a MorphExtension (981592832) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(187@422) mouseUp 26024576 nil]
		arg2: 	a SpToggleMenuItemMorph(939169280)'Print it'
		tmp1: 	nil
		tmp2: 	1
		tmp3: 	nil
		tmp4: 	#()
		tmp5: 	true
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(939169280)'Print it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(187@422) mouseUp 26024576 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(939169280)'Print it'


MouseButtonEvent>>sentTo:
	Receiver: [(187@422) mouseUp 26024576 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	26024576
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(187@422)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
Part1>>increase:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
SpCodePrintItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "+" is nil
7 December 2024 6:50:31.02724 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

Part1>>increase:
	Receiver: a Part1
	Arguments and temporary variables: 
		i: 	5
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		c: 	a Part1
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| c |
	c := Part1 new.

	c increase: 5.
	c amount
		source: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary(#c->nil )
		arg1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		arg2: 	[ ^ self ]
		arg3: 	[ :arg3 | arg3 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		arg2: 	[ :arg1 | self printObject: arg1 ]
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	[ :arg1 | self printObject: arg1 ]
		tmp1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand>>execute
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Print it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCodePrintItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallPrintIt
		shortcutKey: 	a KMKeyCombinationChoice
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
	Receiver: a SpMenuPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpMenuItemPresenter
		arg2: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ arg2 execute ]
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpMenuPresenterBuilder>>fillItem:with:
		compiledBlock: 	a CompiledBlock: [ arg2 execute ]
		numArgs: 	0
		receiver: 	a SpMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
		tmp1: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ [ arg1 canBeExecuted ] ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Print it' ]
		icon: 	an ObservableValueHolder[ Form(13x13x32) ]
		description: 	an ObservableValueHolder[ 'Evaluate selection and print the re[..]
		action: 	[ arg2 execute ]
		shortcut: 	a KMKeyCombinationChoice
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(31704064)'Print it'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(31704064)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(130.0@424.0) corner: (287.0@441.0)
		owner: 	a MenuMorph(879954944)
		submorphs: 	#()
		fullBounds: 	(130.0@424.0) corner: (287.0@441.0)
		color: 	Color black
		extension: 	a MorphExtension (891174912) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: Cursor normal
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	[ tmp1 show ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: Cursor normal
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(31704064)'Print it'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		arg1: 	Cursor normal
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(31704064)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(154@440) mouseUp 26027536 nil]
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(130.0@424.0) corner: (287.0@441.0)
		owner: 	a MenuMorph(879954944)
		submorphs: 	#()
		fullBounds: 	(130.0@424.0) corner: (287.0@441.0)
		color: 	Color black
		extension: 	a MorphExtension (891174912) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(31704064)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(130.0@424.0) corner: (287.0@441.0)
		owner: 	a MenuMorph(879954944)
		submorphs: 	#()
		fullBounds: 	(130.0@424.0) corner: (287.0@441.0)
		color: 	Color black
		extension: 	a MorphExtension (891174912) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(31704064)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(154@440) mouseUp 26027536 nil]
	Receiver's instance variables: 
		bounds: 	(130.0@424.0) corner: (287.0@441.0)
		owner: 	a MenuMorph(879954944)
		submorphs: 	#()
		fullBounds: 	(130.0@424.0) corner: (287.0@441.0)
		color: 	Color black
		extension: 	a MorphExtension (891174912) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(154@440) mouseUp 26027536 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToggleMenuItemMorph(31704064)'Print it'
	Receiver's instance variables: 
		timeStamp: 	26027536
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(154@440)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(31704064)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(154@440) mouseUp 26027536 nil]
	Receiver's instance variables: 
		bounds: 	(130.0@424.0) corner: (287.0@441.0)
		owner: 	a MenuMorph(879954944)
		submorphs: 	#()
		fullBounds: 	(130.0@424.0) corner: (287.0@441.0)
		color: 	Color black
		extension: 	a MorphExtension (891174912) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(154@440) mouseUp 26027536 nil]
		arg2: 	a SpToggleMenuItemMorph(31704064)'Print it'
		tmp1: 	nil
		tmp2: 	1
		tmp3: 	nil
		tmp4: 	#()
		tmp5: 	true
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(31704064)'Print it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(154@440) mouseUp 26027536 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(31704064)'Print it'


MouseButtonEvent>>sentTo:
	Receiver: [(154@440) mouseUp 26027536 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	26027536
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(154@440)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
Part1>>increase:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
SpCodePrintItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "amount" is nil
7 December 2024 6:50:35.29544 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #amount
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	c amount
		source: 	'.
c amount'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (38 to: 47) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary(#c->nil )
		arg1: 	'.
c amount'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg3 | arg3 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (38 to: 47) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	'.
c amount'
		arg2: 	[ :arg1 | self printObject: arg1 ]
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	[ :arg1 | self printObject: arg1 ]
		tmp1: 	'.
c amount'
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand>>execute
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Print it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCodePrintItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallPrintIt
		shortcutKey: 	a KMKeyCombinationChoice
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
	Receiver: a SpMenuPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpMenuItemPresenter
		arg2: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ arg2 execute ]
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpMenuPresenterBuilder>>fillItem:with:
		compiledBlock: 	a CompiledBlock: [ arg2 execute ]
		numArgs: 	0
		receiver: 	a SpMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
		tmp1: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ [ arg1 canBeExecuted ] ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Print it' ]
		icon: 	an ObservableValueHolder[ Form(13x13x32) ]
		description: 	an ObservableValueHolder[ 'Evaluate selection and print the re[..]
		action: 	[ arg2 execute ]
		shortcut: 	a KMKeyCombinationChoice
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(5065984)'Print it'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(5065984)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(103.0@420.0) corner: (260.0@437.0)
		owner: 	a MenuMorph(422927360)
		submorphs: 	#()
		fullBounds: 	(103.0@420.0) corner: (260.0@437.0)
		color: 	Color black
		extension: 	a MorphExtension (897008896) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: Cursor normal
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	[ tmp1 show ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: Cursor normal
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(5065984)'Print it'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		arg1: 	Cursor normal
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(5065984)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(137@431) mouseUp 26031818 nil]
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(103.0@420.0) corner: (260.0@437.0)
		owner: 	a MenuMorph(422927360)
		submorphs: 	#()
		fullBounds: 	(103.0@420.0) corner: (260.0@437.0)
		color: 	Color black
		extension: 	a MorphExtension (897008896) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(5065984)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(103.0@420.0) corner: (260.0@437.0)
		owner: 	a MenuMorph(422927360)
		submorphs: 	#()
		fullBounds: 	(103.0@420.0) corner: (260.0@437.0)
		color: 	Color black
		extension: 	a MorphExtension (897008896) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(5065984)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(137@431) mouseUp 26031818 nil]
	Receiver's instance variables: 
		bounds: 	(103.0@420.0) corner: (260.0@437.0)
		owner: 	a MenuMorph(422927360)
		submorphs: 	#()
		fullBounds: 	(103.0@420.0) corner: (260.0@437.0)
		color: 	Color black
		extension: 	a MorphExtension (897008896) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(137@431) mouseUp 26031818 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToggleMenuItemMorph(5065984)'Print it'
	Receiver's instance variables: 
		timeStamp: 	26031818
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(137@431)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(5065984)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(137@431) mouseUp 26031818 nil]
	Receiver's instance variables: 
		bounds: 	(103.0@420.0) corner: (260.0@437.0)
		owner: 	a MenuMorph(422927360)
		submorphs: 	#()
		fullBounds: 	(103.0@420.0) corner: (260.0@437.0)
		color: 	Color black
		extension: 	a MorphExtension (897008896) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(137@431) mouseUp 26031818 nil]
		arg2: 	a SpToggleMenuItemMorph(5065984)'Print it'
		tmp1: 	nil
		tmp2: 	1
		tmp3: 	nil
		tmp4: 	#()
		tmp5: 	true
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(5065984)'Print it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(137@431) mouseUp 26031818 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(5065984)'Print it'


MouseButtonEvent>>sentTo:
	Receiver: [(137@431) mouseUp 26031818 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	26031818
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(137@431)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(137@431) mouseUp 26031818 nil]
		arg2: 	a SpToggleMenuItemMorph(5065984)'Print it'
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(5065984)'Print it'



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #amount
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
SpCodePrintItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "+" is nil
7 December 2024 6:50:35.852857 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

Part1>>increase:
	Receiver: a Part1
	Arguments and temporary variables: 
		i: 	5
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		c: 	a Part1
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| c |
	c := Part1 new.

	c increase: 5.
	c amount
		source: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary(#c->nil )
		arg1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(296119552))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(296119552)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(10.0@22.0) mouseUp 26032381 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824[..]
		arg3: 	a SpToolbarButtonMorph(296119552)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824439040) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824439040) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(10.0@22.0) mouseUp 26032381 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(10.0@22.0) mouseUp 26032381 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(296119552)
	Receiver's instance variables: 
		timeStamp: 	26032381
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(10.0@22.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(10.0@22.0) mouseUp 26032381 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(10.0@22.0) mouseUp 26032381 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(52@214) corner: (68@230)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(52@214) corner: (68@230)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(52@214) mouseUp 26032381 nil]
		targetOffset: 	(10.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(52@214) corner: (68@230)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(52@214) corner: (68@230)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(52@214) mouseUp 26032381 nil]
		targetOffset: 	(10.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(52@214) mouseUp 26032381 nil]
		arg2: 	a SpToolbarButtonMorph(296119552)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(52@214) corner: (68@230)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(52@214) corner: (68@230)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(52@214) mouseUp 26032381 nil]
		targetOffset: 	(10.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(52@214) mouseUp 26032381 nil]
	Receiver's instance variables: 
		bounds: 	(52@214) corner: (68@230)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(52@214) corner: (68@230)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(52@214) mouseUp 26032381 nil]
		targetOffset: 	(10.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(52@214) mouseUp 26032381 nil]
		tmp1: 	[(52@214) mouseUp 26032381 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(52@214) corner: (68@230)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(52@214) corner: (68@230)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(52@214) mouseUp 26032381 nil]
		targetOffset: 	(10.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(52@214) mouseUp 26032381 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 34 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	26032360
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 40 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	25886471
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	26032360
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 40 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
Part1>>increase:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "+" is nil
7 December 2024 6:50:37.214573 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

Part1>>increase:
	Receiver: a Part1
	Arguments and temporary variables: 
		i: 	5
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		c: 	a Part1
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| c |
	c := Part1 new.

	c increase: 5.
	c amount
		source: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary(#c->nil )
		arg1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		arg2: 	[ ^ self ]
		arg3: 	[ :arg3 | arg3 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		arg2: 	[ :arg1 | self printObject: arg1 ]
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	[ :arg1 | self printObject: arg1 ]
		tmp1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand>>execute
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Print it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCodePrintItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallPrintIt
		shortcutKey: 	a KMKeyCombinationChoice
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
	Receiver: a SpMenuPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpMenuItemPresenter
		arg2: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ arg2 execute ]
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpMenuPresenterBuilder>>fillItem:with:
		compiledBlock: 	a CompiledBlock: [ arg2 execute ]
		numArgs: 	0
		receiver: 	a SpMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
		tmp1: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ [ arg1 canBeExecuted ] ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Print it' ]
		icon: 	an ObservableValueHolder[ Form(13x13x32) ]
		description: 	an ObservableValueHolder[ 'Evaluate selection and print the re[..]
		action: 	[ arg2 execute ]
		shortcut: 	a KMKeyCombinationChoice
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(80195584)'Print it'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(80195584)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(115.0@421.0) corner: (272.0@438.0)
		owner: 	a MenuMorph(17475840)
		submorphs: 	#()
		fullBounds: 	(115.0@421.0) corner: (272.0@438.0)
		color: 	Color black
		extension: 	a MorphExtension (773264896) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: Cursor normal
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	[ tmp1 show ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: Cursor normal
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(80195584)'Print it'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		arg1: 	Cursor normal
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(80195584)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(169@427) mouseUp 26033737 nil]
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(115.0@421.0) corner: (272.0@438.0)
		owner: 	a MenuMorph(17475840)
		submorphs: 	#()
		fullBounds: 	(115.0@421.0) corner: (272.0@438.0)
		color: 	Color black
		extension: 	a MorphExtension (773264896) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(80195584)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(115.0@421.0) corner: (272.0@438.0)
		owner: 	a MenuMorph(17475840)
		submorphs: 	#()
		fullBounds: 	(115.0@421.0) corner: (272.0@438.0)
		color: 	Color black
		extension: 	a MorphExtension (773264896) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(80195584)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(169@427) mouseUp 26033737 nil]
	Receiver's instance variables: 
		bounds: 	(115.0@421.0) corner: (272.0@438.0)
		owner: 	a MenuMorph(17475840)
		submorphs: 	#()
		fullBounds: 	(115.0@421.0) corner: (272.0@438.0)
		color: 	Color black
		extension: 	a MorphExtension (773264896) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(169@427) mouseUp 26033737 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToggleMenuItemMorph(80195584)'Print it'
	Receiver's instance variables: 
		timeStamp: 	26033737
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(169@427)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(80195584)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(169@427) mouseUp 26033737 nil]
	Receiver's instance variables: 
		bounds: 	(115.0@421.0) corner: (272.0@438.0)
		owner: 	a MenuMorph(17475840)
		submorphs: 	#()
		fullBounds: 	(115.0@421.0) corner: (272.0@438.0)
		color: 	Color black
		extension: 	a MorphExtension (773264896) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(169@427) mouseUp 26033737 nil]
		arg2: 	a SpToggleMenuItemMorph(80195584)'Print it'
		tmp1: 	nil
		tmp2: 	1
		tmp3: 	nil
		tmp4: 	#()
		tmp5: 	true
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(80195584)'Print it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(169@427) mouseUp 26033737 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(80195584)'Print it'


MouseButtonEvent>>sentTo:
	Receiver: [(169@427) mouseUp 26033737 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	26033737
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(169@427)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
Part1>>increase:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
SpCodePrintItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "+" is nil
7 December 2024 6:51:07.391631 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

Part1>>increase:
	Receiver: a Part1
	Arguments and temporary variables: 
		i: 	5
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		c: 	a Part1
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| c |
	c := Part1 new.

	c increase: 5.
	c amount
		source: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary(#c->nil )
		arg1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(296119552))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(296119552)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(18.0@35.0) mouseUp 26063912 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824[..]
		arg3: 	a SpToolbarButtonMorph(296119552)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824439040) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824439040) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(18.0@35.0) mouseUp 26063912 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(296119552) a SpToolbarButtonMorph(824[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(18.0@35.0) mouseUp 26063912 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(296119552)
	Receiver's instance variables: 
		timeStamp: 	26063912
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(18.0@35.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(18.0@35.0) mouseUp 26063912 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(296119552)
	Arguments and temporary variables: 
		arg1: 	[(18.0@35.0) mouseUp 26063912 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(89300736)
		submorphs: 	an Array(an AlignmentMorph(917828352))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (680799232) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(451060736)'Do it'
		iconMorph: 	an ImageMorph(361857024)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(60@227) corner: (76@243)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(60@227) corner: (76@243)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(60@227) mouseUp 26063912 nil]
		targetOffset: 	(18.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(60@227) corner: (76@243)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(60@227) corner: (76@243)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(60@227) mouseUp 26063912 nil]
		targetOffset: 	(18.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(60@227) mouseUp 26063912 nil]
		arg2: 	a SpToolbarButtonMorph(296119552)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(60@227) corner: (76@243)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(60@227) corner: (76@243)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(60@227) mouseUp 26063912 nil]
		targetOffset: 	(18.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(60@227) mouseUp 26063912 nil]
	Receiver's instance variables: 
		bounds: 	(60@227) corner: (76@243)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(60@227) corner: (76@243)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(60@227) mouseUp 26063912 nil]
		targetOffset: 	(18.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(60@227) mouseUp 26063912 nil]
		tmp1: 	[(60@227) mouseUp 26063912 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(60@227) corner: (76@243)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(60@227) corner: (76@243)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(478856192)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(60@227) mouseUp 26063912 nil]
		targetOffset: 	(18.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(60@227) mouseUp 26063912 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(478856192))(a[..]
		lastStepTime: 	26063902
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(358643200)))
		lastAlarmTime: 	26063902
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(478856192))(a[..]
		lastStepTime: 	26063902
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(358643200)))
		lastAlarmTime: 	26063902
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
Part1>>increase:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "+" is nil
7 December 2024 6:51:09.053607 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

Part1>>increase:
	Receiver: a Part1
	Arguments and temporary variables: 
		i: 	5
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		c: 	a Part1
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| c |
	c := Part1 new.

	c increase: 5.
	c amount
		source: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary(#c->nil )
		arg1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		arg2: 	[ ^ self ]
		arg3: 	[ :arg3 | arg3 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 48) ]
		text: 	an ObservableValueHolder[ '| c |

c := Part1 new.

c increase: 5.
c a[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
		arg2: 	[ :arg1 | self printObject: arg1 ]
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	[ :arg1 | self printObject: arg1 ]
		tmp1: 	'| c |

c := Part1 new.

c increase: 5.
c amount '
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand>>execute
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Print it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCodePrintItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallPrintIt
		shortcutKey: 	a KMKeyCombinationChoice
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
	Receiver: a SpMenuPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpMenuItemPresenter
		arg2: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ arg2 execute ]
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpMenuPresenterBuilder>>fillItem:with:
		compiledBlock: 	a CompiledBlock: [ arg2 execute ]
		numArgs: 	0
		receiver: 	a SpMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
		tmp1: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ [ arg1 canBeExecuted ] ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Print it' ]
		icon: 	an ObservableValueHolder[ Form(13x13x32) ]
		description: 	an ObservableValueHolder[ 'Evaluate selection and print the re[..]
		action: 	[ arg2 execute ]
		shortcut: 	a KMKeyCombinationChoice
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(407401728)'Print it'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(407401728)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(144.0@405.0) corner: (301.0@422.0)
		owner: 	a MenuMorph(596640768)
		submorphs: 	#()
		fullBounds: 	(144.0@405.0) corner: (301.0@422.0)
		color: 	Color black
		extension: 	a MorphExtension (563394304) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: Cursor normal
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	[ tmp1 show ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: Cursor normal
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(407401728)'Print it'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		arg1: 	Cursor normal
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(407401728)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(213@420) mouseUp 26065577 nil]
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(144.0@405.0) corner: (301.0@422.0)
		owner: 	a MenuMorph(596640768)
		submorphs: 	#()
		fullBounds: 	(144.0@405.0) corner: (301.0@422.0)
		color: 	Color black
		extension: 	a MorphExtension (563394304) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(407401728)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(144.0@405.0) corner: (301.0@422.0)
		owner: 	a MenuMorph(596640768)
		submorphs: 	#()
		fullBounds: 	(144.0@405.0) corner: (301.0@422.0)
		color: 	Color black
		extension: 	a MorphExtension (563394304) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(407401728)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(213@420) mouseUp 26065577 nil]
	Receiver's instance variables: 
		bounds: 	(144.0@405.0) corner: (301.0@422.0)
		owner: 	a MenuMorph(596640768)
		submorphs: 	#()
		fullBounds: 	(144.0@405.0) corner: (301.0@422.0)
		color: 	Color black
		extension: 	a MorphExtension (563394304) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(213@420) mouseUp 26065577 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToggleMenuItemMorph(407401728)'Print it'
	Receiver's instance variables: 
		timeStamp: 	26065577
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(213@420)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(407401728)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(213@420) mouseUp 26065577 nil]
	Receiver's instance variables: 
		bounds: 	(144.0@405.0) corner: (301.0@422.0)
		owner: 	a MenuMorph(596640768)
		submorphs: 	#()
		fullBounds: 	(144.0@405.0) corner: (301.0@422.0)
		color: 	Color black
		extension: 	a MorphExtension (563394304) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(213@420) mouseUp 26065577 nil]
		arg2: 	a SpToggleMenuItemMorph(407401728)'Print it'
		tmp1: 	nil
		tmp2: 	1
		tmp3: 	nil
		tmp4: 	#()
		tmp5: 	true
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(407401728)'Print it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(213@420) mouseUp 26065577 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(407401728)'Print it'


MouseButtonEvent>>sentTo:
	Receiver: [(213@420) mouseUp 26065577 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	26065577
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(213@420)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
Part1>>increase:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
SpCodePrintItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Part1 class >> #main
7 December 2024 6:57:19.754566 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Part1 class(Object)>>doesNotUnderstand: #main
	Receiver: Part1
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#amount->Part1>>#amount #hi->Part1>>#hi #mai[..]
		format: 	0
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (accessing) - 4 selector(s))
		subclasses: 	#()
		name: 	#Part1
		classPool: 	a Dictionary(#count->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	nil
		packageTag: 	a PackageTag(Uncategorized)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 main
		source: 	'Part1 main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 11) ]
		text: 	an ObservableValueHolder[ 'Part1 main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg3 | arg3 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 11) ]
		text: 	an ObservableValueHolder[ 'Part1 main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	'Part1 main.'
		arg2: 	[ :arg1 | self printObject: arg1 ]
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	[ :arg1 | self printObject: arg1 ]
		tmp1: 	'Part1 main.'
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand>>execute
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Print it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCodePrintItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallPrintIt
		shortcutKey: 	a KMKeyCombinationChoice
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
	Receiver: a SpMenuPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpMenuItemPresenter
		arg2: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ arg2 execute ]
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpMenuPresenterBuilder>>fillItem:with:
		compiledBlock: 	a CompiledBlock: [ arg2 execute ]
		numArgs: 	0
		receiver: 	a SpMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
		tmp1: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ [ arg1 canBeExecuted ] ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Print it' ]
		icon: 	an ObservableValueHolder[ Form(13x13x32) ]
		description: 	an ObservableValueHolder[ 'Evaluate selection and print the re[..]
		action: 	[ arg2 execute ]
		shortcut: 	a KMKeyCombinationChoice
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(457522432)'Print it'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(457522432)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(321.0@616.0) corner: (478.0@633.0)
		owner: 	a MenuMorph(705782272)
		submorphs: 	#()
		fullBounds: 	(321.0@616.0) corner: (478.0@633.0)
		color: 	Color black
		extension: 	a MorphExtension (633650432) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: Cursor normal
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	[ tmp1 show ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: Cursor normal
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(457522432)'Print it'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		arg1: 	Cursor normal
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(457522432)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(375@630) mouseUp 26436277 nil]
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(321.0@616.0) corner: (478.0@633.0)
		owner: 	a MenuMorph(705782272)
		submorphs: 	#()
		fullBounds: 	(321.0@616.0) corner: (478.0@633.0)
		color: 	Color black
		extension: 	a MorphExtension (633650432) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(457522432)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(321.0@616.0) corner: (478.0@633.0)
		owner: 	a MenuMorph(705782272)
		submorphs: 	#()
		fullBounds: 	(321.0@616.0) corner: (478.0@633.0)
		color: 	Color black
		extension: 	a MorphExtension (633650432) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(457522432)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(375@630) mouseUp 26436277 nil]
	Receiver's instance variables: 
		bounds: 	(321.0@616.0) corner: (478.0@633.0)
		owner: 	a MenuMorph(705782272)
		submorphs: 	#()
		fullBounds: 	(321.0@616.0) corner: (478.0@633.0)
		color: 	Color black
		extension: 	a MorphExtension (633650432) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(375@630) mouseUp 26436277 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToggleMenuItemMorph(457522432)'Print it'
	Receiver's instance variables: 
		timeStamp: 	26436277
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(375@630)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(457522432)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(375@630) mouseUp 26436277 nil]
	Receiver's instance variables: 
		bounds: 	(321.0@616.0) corner: (478.0@633.0)
		owner: 	a MenuMorph(705782272)
		submorphs: 	#()
		fullBounds: 	(321.0@616.0) corner: (478.0@633.0)
		color: 	Color black
		extension: 	a MorphExtension (633650432) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(375@630) mouseUp 26436277 nil]
		arg2: 	a SpToggleMenuItemMorph(457522432)'Print it'
		tmp1: 	nil
		tmp2: 	1
		tmp3: 	nil
		tmp4: 	#()
		tmp5: 	true
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(457522432)'Print it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(375@630) mouseUp 26436277 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(457522432)'Print it'


MouseButtonEvent>>sentTo:
	Receiver: [(375@630) mouseUp 26436277 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	26436277
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(375@630)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(375@630) mouseUp 26436277 nil]
		arg2: 	a SpToggleMenuItemMorph(457522432)'Print it'
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(457522432)'Print it'



--- The full stack ---
Part1 class(Object)>>doesNotUnderstand: #main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
SpCodePrintItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Part1 class >> #main
7 December 2024 6:57:21.4813 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Part1 class(Object)>>doesNotUnderstand: #main
	Receiver: Part1
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#amount->Part1>>#amount #hi->Part1>>#hi #mai[..]
		format: 	0
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (accessing) - 4 selector(s))
		subclasses: 	#()
		name: 	#Part1
		classPool: 	a Dictionary(#count->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	nil
		packageTag: 	a PackageTag(Uncategorized)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 main
		source: 	'Part1 main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 11) ]
		text: 	an ObservableValueHolder[ 'Part1 main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 11) ]
		text: 	an ObservableValueHolder[ 'Part1 main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(386796288))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(386796288)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(7.0@15.0) mouseUp 26438007 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673[..]
		arg3: 	a SpToolbarButtonMorph(386796288)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673635840) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673635840) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(7.0@15.0) mouseUp 26438007 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(7.0@15.0) mouseUp 26438007 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(386796288)
	Receiver's instance variables: 
		timeStamp: 	26438007
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(7.0@15.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(7.0@15.0) mouseUp 26438007 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(7.0@15.0) mouseUp 26438007 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(227@539.0) corner: (243@555.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(227@539.0) corner: (243@555.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(227@539) mouseUp 26438007 nil]
		targetOffset: 	(7.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(227@539.0) corner: (243@555.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(227@539.0) corner: (243@555.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(227@539) mouseUp 26438007 nil]
		targetOffset: 	(7.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(227@539) mouseUp 26438007 nil]
		arg2: 	a SpToolbarButtonMorph(386796288)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(227@539.0) corner: (243@555.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(227@539.0) corner: (243@555.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(227@539) mouseUp 26438007 nil]
		targetOffset: 	(7.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(227@539) mouseUp 26438007 nil]
	Receiver's instance variables: 
		bounds: 	(227@539.0) corner: (243@555.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(227@539.0) corner: (243@555.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(227@539) mouseUp 26438007 nil]
		targetOffset: 	(7.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(227@539) mouseUp 26438007 nil]
		tmp1: 	[(227@539) mouseUp 26438007 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(227@539.0) corner: (243@555.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(227@539.0) corner: (243@555.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(227@539) mouseUp 26438007 nil]
		targetOffset: 	(7.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(227@539) mouseUp 26438007 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 20 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	26423271
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	26437999
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 20 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	26423271
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	26437999
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 26 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
Part1 class(Object)>>doesNotUnderstand: #main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "ifEmpty:" is nil
7 December 2024 7:10:55.200065 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #ifEmpty:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

ClyClassIconTableDecorator class(ClyClassTableDecorator class)>>decorateTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(536578816)
		arg2: 	a ClyDataSourceItem(FileLocator)
		tmp1: 	a MorphExtension (997667072)
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(536578816)
		arg2: 	a ClyDataSourceItem(FileLocator)
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class>>decorateMainTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(536578816)
		arg2: 	a ClyDataSourceItem(FileLocator)
		tmp1: 	nil
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:inContext:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(536578816)
		arg2: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyTableDecorationStrategyAnnotation>>decorateMainTableCell:inContext:
	Receiver: a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(536578816)
		arg2: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		annotatedClass: 	ClyClassIconTableDecorator
		declarationSelector: 	#decorationStrategy
		priority: 	0
		activeContext: 	a ClyBrowserItemContext


[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ] in ClyQueryViewMorph>>decorateMainTableCell:of:
	Receiver: a ClyQueryViewMorph(989167872)
	Arguments and temporary variables: 
		arg1: 	a ClyFullBrowserClassContext
		arg2: 	a ClyDataSourceItem(FileLocator)
		tmp1: 	a ClyMainItemCellMorph(536578816)
		arg3: 	a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(276651008)
		submorphs: 	an Array(a FTTableMorph(372200192))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1023846656)
		table: 	a FTTableMorph(372200192)
		browser: 	a ClyFullBrowserMorph(513682176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


SortedCollection(SequenceableCollection)>>select:thenDo:
	Receiver: a SortedCollection(a ClyTableDecorationStrategyAnnotation(ClyClassCommentTableDecorato[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 isActiveInContext: arg1 ]
		arg2: 	[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ]
		tmp1: 	a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
		tmp2: 	25
		tmp3: 	1
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil[..]
		firstIndex: 	16
		lastIndex: 	40
		sortBlock: 	a PropertySortFunction


ClyTableDecorationStrategyAnnotation class(ClassAnnotation class)>>activeInstancesInContext:do:
	Receiver: ClyTableDecorationStrategyAnnotation
	Arguments and temporary variables: 
		arg1: 	a ClyFullBrowserClassContext
		arg2: 	[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ]
	Receiver's instance variables: 
		superclass: 	ClassAnnotation
		methodDict: 	a MethodDictionary(#annotatedClass:->ClyTableDecorationStrategy[..]
		format: 	65540
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (accessing) - 1 selector(s) Protocol (decorati[..]
		subclasses: 	nil
		name: 	#ClyTableDecorationStrategyAnnotation
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	9121576
		packageTag: 	a PackageTag(Table)
		redefinedInstances: 	nil


ClyQueryViewMorph>>decorateMainTableCell:of:
	Receiver: a ClyQueryViewMorph(989167872)
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(536578816)
		arg2: 	a ClyDataSourceItem(FileLocator)
		tmp1: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(276651008)
		submorphs: 	an Array(a FTTableMorph(372200192))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1023846656)
		table: 	a FTTableMorph(372200192)
		browser: 	a ClyFullBrowserMorph(513682176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyMainTableColumn>>createCellFor:in:
	Receiver: a ClyMainTableColumn
	Arguments and temporary variables: 
		arg1: 	a ClyDataSourceItem(FileLocator)
		arg2: 	a ClyQueryViewMorph(989167872)
		tmp1: 	a ClyMainItemCellMorph(536578816)
	Receiver's instance variables: 
		id: 	#item
		width: 	nil
		sortingStrategy: 	a FTNullColumnSortingStrategy
		displayBlock: 	tmp2


ClyExpandedDataSource(ClyDataSource)>>cellColumn:row:
	Receiver: a ClyExpandedDataSource
	Arguments and temporary variables: 
		arg1: 	a ClyMainTableColumn
		arg2: 	2
		tmp1: 	a ClyDataSourceItem(FileLocator)
	Receiver's instance variables: 
		table: 	a FTTableMorph(372200192)
		query: 	a ClyTaggedClassesQuery(Public) from packages: FileSystem-Core
		itemCursor: 	a ClyBrowserQueryCursor(a ClyTaggedClassesQuery(Public) from pa[..]
		depth: 	0
		parentItem: 	nil
		lastFilteredDataSource: 	nil
		queryView: 	a ClyQueryViewMorph(989167872)
		dirty: 	false
		collapsedItems: 	a SortedCollection()


(self exposedColumnsRange: tmp3) in FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(452746496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (87@17)
		owner: 	a FTTableMorph(372200192)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()
		startColumnIndex: 	0
		rowColors: 	nil


Interval>>do:
	Receiver: (1 to: 1)
	Arguments and temporary variables: 
		arg1: 	(self exposedColumnsRange: tmp3)
		tmp1: 	1
		tmp2: 	1
		tmp3: 	1
	Receiver's instance variables: 
		start: 	1
		stop: 	1
		step: 	1


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(452746496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (87@17)
		owner: 	a FTTableMorph(372200192)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()
		startColumnIndex: 	0
		rowColors: 	nil


FTTableMorph>>resizeAllSubviews
	Receiver: a FTTableMorph(372200192)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(989167872)
		submorphs: 	an Array(a ScrollBarMorph(304564224) a RubTextFieldMorph(2844444[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (360043776) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(452746496)
		verticalScrollBar: 	a ScrollBarMorph(304564224)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#(2)
		highlightedIndexes: 	#()
		showIndex: 	2
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph>>extent:
	Receiver: a FTTableMorph(372200192)
	Arguments and temporary variables: 
		arg1: 	(100@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(989167872)
		submorphs: 	an Array(a ScrollBarMorph(304564224) a RubTextFieldMorph(2844444[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (360043776) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(452746496)
		verticalScrollBar: 	a ScrollBarMorph(304564224)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#(2)
		highlightedIndexes: 	#()
		showIndex: 	2
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph(Morph)>>bounds:
	Receiver: a FTTableMorph(372200192)
	Arguments and temporary variables: 
		arg1: 	(0@0) corner: (100@40)
		tmp1: 	(50@40)
		tmp2: 	(100@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(989167872)
		submorphs: 	an Array(a ScrollBarMorph(304564224) a RubTextFieldMorph(2844444[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (360043776) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(452746496)
		verticalScrollBar: 	a ScrollBarMorph(304564224)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#(2)
		highlightedIndexes: 	#()
		showIndex: 	2
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph(Morph)>>layoutInBounds:
	Receiver: a FTTableMorph(372200192)
	Arguments and temporary variables: 
		arg1: 	(0@0) corner: (100@40)
		tmp1: 	(0@0) corner: (100@40)
		tmp2: 	#center
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(989167872)
		submorphs: 	an Array(a ScrollBarMorph(304564224) a RubTextFieldMorph(2844444[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (360043776) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(452746496)
		verticalScrollBar: 	a ScrollBarMorph(304564224)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#(2)
		highlightedIndexes: 	#()
		showIndex: 	2
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


TableLayout>>layoutTopToBottom:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		arg1: 	a ClyQueryViewMorph(989167872)
		arg2: 	(0@0) corner: (8@40)
		tmp1: 	0
		tmp2: 	(8@40)
		tmp3: 	[ :arg3 |
	        | tmp25 tmp26 tmp27 tmp29 |
	        tmp29 := arg3[..]
		tmp4: 	0
		tmp5: 	0
		tmp6: 	nil
		tmp7: 	19.0
		tmp8: 	19
		tmp9: 	0
		tmp10: 	0
		tmp11: 	1073741823
		tmp12: 	1073741823
		tmp13: 	an Array(a FTTableMorph(372200192))
		tmp15: 	1
		tmp16: 	40
		tmp17: 	19.0
		tmp18: 	0
		tmp19: 	a LayoutCell
		tmp20: 	(100@21)
		tmp21: 	100
		tmp22: 	1
		tmp23: 	true
		tmp24: 	a LayoutCell
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


TableLayout>>layout:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		arg1: 	a ClyQueryViewMorph(989167872)
		arg2: 	(0@0) corner: (8@40)
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	(0@0) corner: (8@40)
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


ClyQueryViewMorph(Morph)>>doLayoutIn:
	Receiver: a ClyQueryViewMorph(989167872)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(276651008)
		submorphs: 	an Array(a FTTableMorph(372200192))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1023846656)
		table: 	a FTTableMorph(372200192)
		browser: 	a ClyFullBrowserMorph(513682176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>computeFullBounds
	Receiver: a ClyQueryViewMorph(989167872)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(276651008)
		submorphs: 	an Array(a FTTableMorph(372200192))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1023846656)
		table: 	a FTTableMorph(372200192)
		browser: 	a ClyFullBrowserMorph(513682176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>fullBounds
	Receiver: a ClyQueryViewMorph(989167872)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(276651008)
		submorphs: 	an Array(a FTTableMorph(372200192))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1023846656)
		table: 	a FTTableMorph(372200192)
		browser: 	a ClyFullBrowserMorph(513682176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>position:
	Receiver: a ClyQueryViewMorph(989167872)
	Arguments and temporary variables: 
		arg1: 	(13@0)
		tmp1: 	(13.0@0.0)
		tmp2: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(276651008)
		submorphs: 	an Array(a FTTableMorph(372200192))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1023846656)
		table: 	a FTTableMorph(372200192)
		browser: 	a ClyFullBrowserMorph(513682176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>bounds:
	Receiver: a ClyQueryViewMorph(989167872)
	Arguments and temporary variables: 
		arg1: 	(13@0) corner: (21@40)
		tmp1: 	(50@40)
		tmp2: 	(8@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(276651008)
		submorphs: 	an Array(a FTTableMorph(372200192))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1023846656)
		table: 	a FTTableMorph(372200192)
		browser: 	a ClyFullBrowserMorph(513682176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>layoutInBounds:
	Receiver: a ClyQueryViewMorph(989167872)
	Arguments and temporary variables: 
		arg1: 	(13@0) corner: (21@40)
		tmp1: 	(13@0) corner: (21@40)
		tmp2: 	#center
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(276651008)
		submorphs: 	an Array(a FTTableMorph(372200192))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1023846656)
		table: 	a FTTableMorph(372200192)
		browser: 	a ClyFullBrowserMorph(513682176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>layoutProportionallyIn:
	Receiver: a ClyQueryViewMorph(989167872)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(276651008)
		submorphs: 	an Array(a FTTableMorph(372200192))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1023846656)
		table: 	a FTTableMorph(372200192)
		browser: 	a ClyFullBrowserMorph(513682176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


[ :arg3 | arg3 layoutProportionallyIn: arg2 ] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(276651008)
		arg2: 	(0@0) corner: (50@40)
		arg3: 	a ClyQueryViewMorph(989167872)
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a ProportionalSplitterMorph(939582464) a ProportionalSplitterMorph(42811392) [..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 layoutProportionallyIn: arg2 ]
		tmp1: 	7
		tmp2: 	1
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(939582464) a ProportionalSplitterMorph(42811392) [..]

PanelMorph(Morph)>>submorphsDo:
	Receiver: a PanelMorph(276651008)
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 layoutProportionallyIn: arg2 ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(513682176)
		submorphs: 	an Array(a ProportionalSplitterMorph(939582464) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1023081472) [sticky]  [externalName = navigati[..]
		borderWidth: 	0
		borderColor: 	Color black


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(276651008)
		arg2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
a ProportionalLayout

PanelMorph(Morph)>>doLayoutIn:
	Receiver: a PanelMorph(276651008)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(513682176)
		submorphs: 	an Array(a ProportionalSplitterMorph(939582464) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1023081472) [sticky]  [externalName = navigati[..]
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(276651008)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(513682176)
		submorphs: 	an Array(a ProportionalSplitterMorph(939582464) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1023081472) [sticky]  [externalName = navigati[..]
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>fullBounds
	Receiver: a PanelMorph(276651008)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(513682176)
		submorphs: 	an Array(a ProportionalSplitterMorph(939582464) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1023081472) [sticky]  [externalName = navigati[..]
		borderWidth: 	0
		borderColor: 	Color black


[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBounds.
			tmp2
				ifNil: [ tmp2 := tmp3 copy ]
				ifNotNil: [ tmp2 := tmp2 quickMerge: tmp3 ] ] ] in ClyFullBrowserMorph(Morph)>>submorphBounds
	Receiver: a ClyFullBrowserMorph(513682176)
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(276651008)
		tmp3: 	nil
		tmp2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(49991936) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(549706496) a PanelMorph(443[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (841627648) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(276651008)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(835639040) a ClyQ[..]
		toolPanel: 	a PanelMorph(443231232)
		toolbar: 	a ClyToolbarMorph(43631872)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(835639040)
		classView: 	a ClyQueryViewMorph(989167872)
		methodGroupView: 	a ClyQueryViewMorph(1029755392)
		methodView: 	a ClyQueryViewMorph(529498624)
		metaLevelScope: 	ClyClassSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from class side: FileLocator


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ProportionalSplitterMorph(549706496) a PanelMorph(443231232) a PanelMorph(2[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBou[..]
		tmp1: 	3
		tmp2: 	1
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(549706496) a PanelMorph(443231232) a PanelMorph(2[..]

ClyFullBrowserMorph(Morph)>>submorphBounds
	Receiver: a ClyFullBrowserMorph(513682176)
	Arguments and temporary variables: 
		tmp2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(49991936) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(549706496) a PanelMorph(443[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (841627648) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(276651008)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(835639040) a ClyQ[..]
		toolPanel: 	a PanelMorph(443231232)
		toolbar: 	a ClyToolbarMorph(43631872)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(835639040)
		classView: 	a ClyQueryViewMorph(989167872)
		methodGroupView: 	a ClyQueryViewMorph(1029755392)
		methodView: 	a ClyQueryViewMorph(529498624)
		metaLevelScope: 	ClyClassSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from class side: FileLocator


ClyFullBrowserMorph(Morph)>>privateFullBounds
	Receiver: a ClyFullBrowserMorph(513682176)
	Arguments and temporary variables: 
		tmp1: 	(0@0) corner: (915@620)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(49991936) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(549706496) a PanelMorph(443[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (841627648) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(276651008)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(835639040) a ClyQ[..]
		toolPanel: 	a PanelMorph(443231232)
		toolbar: 	a ClyToolbarMorph(43631872)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(835639040)
		classView: 	a ClyQueryViewMorph(989167872)
		methodGroupView: 	a ClyQueryViewMorph(1029755392)
		methodView: 	a ClyQueryViewMorph(529498624)
		metaLevelScope: 	ClyClassSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from class side: FileLocator



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #ifEmpty:
ClyClassIconTableDecorator class(ClyClassTableDecorator class)>>decorateTableCell:of:
ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:of:
ClyClassIconTableDecorator class>>decorateMainTableCell:of:
ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:inContext:
ClyTableDecorationStrategyAnnotation>>decorateMainTableCell:inContext:
[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ] in ClyQueryViewMorph>>decorateMainTableCell:of:
SortedCollection(SequenceableCollection)>>select:thenDo:
ClyTableDecorationStrategyAnnotation class(ClassAnnotation class)>>activeInstancesInContext:do:
ClyQueryViewMorph>>decorateMainTableCell:of:
ClyMainTableColumn>>createCellFor:in:
ClyExpandedDataSource(ClyDataSource)>>cellColumn:row:
(self exposedColumnsRange: tmp3) in FTTableContainerMorph>>updateExposedRows
Interval>>do:
FTTableContainerMorph>>updateExposedRows
FTTableMorph>>resizeAllSubviews
FTTableMorph>>extent:
FTTableMorph(Morph)>>bounds:
FTTableMorph(Morph)>>layoutInBounds:
TableLayout>>layoutTopToBottom:in:
TableLayout>>layout:in:
ClyQueryViewMorph(Morph)>>doLayoutIn:
ClyQueryViewMorph(Morph)>>computeFullBounds
ClyQueryViewMorph(Morph)>>fullBounds
ClyQueryViewMorph(Morph)>>position:
ClyQueryViewMorph(Morph)>>bounds:
ClyQueryViewMorph(Morph)>>layoutInBounds:
ClyQueryViewMorph(Morph)>>layoutProportionallyIn:
[ :arg3 | arg3 layoutProportionallyIn: arg2 ] in ProportionalLayout>>layout:in:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
ProportionalLayout>>layout:in:
PanelMorph(Morph)>>doLayoutIn:
PanelMorph(Morph)>>computeFullBounds
PanelMorph(Morph)>>fullBounds
[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBounds.
			tmp2
				ifNil: [ tmp2 := tmp3 copy ]
				ifNotNil: [ tmp2 := tmp2 quickMerge: tmp3 ] ] ] in ClyFullBrowserMorph(Morph)>>submorphBounds
Array(SequenceableCollection)>>do:
ClyFullBrowserMorph(Morph)>>submorphBounds
ClyFullBrowserMorph(Morph)>>privateFullBounds
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
ClyFullBrowserMorph(Morph)>>changed
ClyFullBrowserMorph(BorderedMorph)>>borderStyle:
SystemWindow>>addMorph:fullFrame:
SystemWindow>>addMorph:frame:
ClyFullBrowserMorph(Morph)>>wrappedInWindow
ClyFullBrowserMorph(Morph)>>openInWindowLabeled:inWorld:
ClyFullBrowserMorph(Morph)>>openInWindowLabeled:
ClyFullBrowserMorph(Morph)>>openInWindow
ClyFullBrowserMorph(ClyBrowserMorph)>>open
ClyFullBrowserMorph class>>openOn:withState:
ClyFullBrowserMorph class>>openWithState:
ClyFullBrowserMorph class>>openOnMethod:
ClyFullBrowserMorph class>>openOnClass:selector:
[ :arg1 |
			  Smalltalk tools browser
				  openOnClass: arg1 methodClass
				  selector: arg1 selector.
			  true ] in NECSelectorEntry>>browse
NECSelectorEntry>>findMethodAndDo:ifAbsent:
NECSelectorEntry>>browse
NECMenuMorph>>browse
CoCompletionEngine(CompletionEngine)>>browse
ClyTextEditor(RubSmalltalkEditor)>>browseIt:
[ :arg2 | arg2 editor browseIt: nil ] in RubSmalltalkEditor class>>buildShortcutsOn:
FullBlockClosure(BlockClosure)>>cull:
FullBlockClosure(BlockClosure)>>cull:cull:
FullBlockClosure(BlockClosure)>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :arg3 | arg3 completeMatch: self buffer: arg2 ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :arg4 |
		arg4 onMatchWith: arg1 notify: arg2 andDo: arg3 ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :arg2 |
		arg2 verifyMatchWith: arg1 notifying: self thenDoing: [ ^ self ] ] in CmdKMDispatcher(KMDispatcher)>>dispatch:
OrderedCollection>>do:
CmdKMDispatcher(KMDispatcher)>>dispatch:
CmdKMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :arg2 |
		arg2 dispatch: KMBuffer uniqueInstance buffer copy.
		arg1 wasHandled ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
CmdKMDispatcher(KMDispatcher)>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(Morph)>>handleKeystrokeWithKeymappings:
KMShortcutHandler>>handleKeystroke:inMorph:
RubEditingArea(Morph)>>handleKeyDown:
RubEditingArea(RubAbstractTextArea)>>handleKeyDown:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "do:" is nil
7 December 2024 7:12:33.068891 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #do:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

WriteStream(Stream)>>nextPutAll:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		arg1: 	nil
	Receiver's instance variables: 
		collection: 	'AbstractFileReference << #FileLocator
	slots: { #origin };
	sh[..]
		position: 	138
		readLimit: 	0
		writeLimit: 	170


WriteStream>>nextPutAll:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		arg1: 	nil
		tmp1: 	nil
	Receiver's instance variables: 
		collection: 	'AbstractFileReference << #FileLocator
	slots: { #origin };
	sh[..]
		position: 	138
		readLimit: 	0
		writeLimit: 	170


[ :arg2 |
		  arg2 nextPutAll: arg1 definitionString.
		  arg1 hasComment ifTrue: [
			  arg2
				  cr;
				  cr;
				  cr;
				  nextPutAll: arg1 comment ] ] in FinderUI>>buildDescriptionOf:
	Receiver: a FinderUI
	Arguments and temporary variables: 
		arg1: 	FileLocator
		arg2: 	a WriteStream
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


String class(SequenceableCollection class)>>new:streamContents:
	Receiver: String
	Arguments and temporary variables: 
		arg1: 	100
		arg2: 	[ :arg2 |
		  arg2 nextPutAll: arg1 definitionString.
		  arg1 hasCom[..]
		tmp1: 	a WriteStream
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 311)
		format: 	0
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (*AST-Core) - 1 selector(s) Protocol (comparin[..]
		subclasses: 	{ByteString. Symbol. WideString}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	73027578
		packageTag: 	a PackageTag(Base)


String class(SequenceableCollection class)>>streamContents:
	Receiver: String
	Arguments and temporary variables: 
		arg1: 	[ :arg2 |
		  arg2 nextPutAll: arg1 definitionString.
		  arg1 hasCom[..]
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 311)
		format: 	0
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (*AST-Core) - 1 selector(s) Protocol (comparin[..]
		subclasses: 	{ByteString. Symbol. WideString}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	73027578
		packageTag: 	a PackageTag(Base)


FinderUI>>buildDescriptionOf:
	Receiver: a FinderUI
	Arguments and temporary variables: 
		arg1: 	FileLocator
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


FinderUI>>sourceCode
	Receiver: a FinderUI
	Arguments and temporary variables: 
		tmp1: 	FileLocator
		tmp2: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


FinderUI>>updateSourceCode
	Receiver: a FinderUI
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


WeakMessageSend>>value
	Receiver: WeakMessageSend(#updateSourceCode -> nil)(#updateSourceCode -> a FinderUI)
	Arguments and temporary variables: 
		tmp1: 	a FinderUI
	Receiver's instance variables: 
		selector: 	#updateSourceCode
		arguments: 	a WeakArray()
		lookupClass: 	nil
		receiver: 	nil
		shouldBeNil: 	#()


Finder(Object)>>triggerEvent:
	Receiver: a Finder
	Arguments and temporary variables: 
		arg1: 	#updateSourceCode
	Receiver's instance variables: 
		searchingString: 	'FileLocator'
		selectedMethod: 	nil
		selectedClass: 	FileLocator
		packagesSelection: 	Smalltalk
		environment: 	Smalltalk
		resultDictionary: 	a Dictionary(FileLocator->#(#= #absolutePath #acceptSetti[..]
		useRegEx: 	false
		searchStrategy: 	a FinderClassesSearchStrategy


Finder>>selection:
	Receiver: a Finder
	Arguments and temporary variables: 
		arg1: 	a MorphTreeMorphSingleSelection
		tmp1: 	an OrderedCollection(Node(FileLocator))
	Receiver's instance variables: 
		searchingString: 	'FileLocator'
		selectedMethod: 	nil
		selectedClass: 	FileLocator
		packagesSelection: 	Smalltalk
		environment: 	Smalltalk
		resultDictionary: 	a Dictionary(FileLocator->#(#= #absolutePath #acceptSetti[..]
		useRegEx: 	false
		searchStrategy: 	a FinderClassesSearchStrategy


FinderUI>>selection:
	Receiver: a FinderUI
	Arguments and temporary variables: 
		arg1: 	a MorphTreeMorphSingleSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


[
		| tmp4 |
		tmp4 := self newSelectionHolderWithNodePath: tmp1.
		self listModel selection: tmp4 ] in MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		arg1: 	[(714@341) mouseUp 27349591 nil]
		arg2: 	NodeMorph(Node(FileLocator))
		tmp1: 	an OrderedCollection(Node(FileLocator))
		tmp2: 	false
		tmp3: 	false
		tmp4: 	a MorphTreeMorphSingleSelection
	Receiver's instance variables: 
		multipleSelection: 	false
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(FileLocator))
		lastClickedMorph: 	NodeMorph(Node(FileLocator))
		columnDropUnabled: 	nil
		autoDeselection: 	nil
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(37147392)
		isSelectionUpdateFromView: 	true
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(FileLocator)))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClick
		keyDownActionSelector: 	#keyDown:


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp4 |
		tmp4 := self newSelectionHolderWithNodePath: tmp1.
		self listModel sel[..]
	Arguments and temporary variables: 
		arg1: 	[ isSelectionUpdateFromView := tmp1 ]
		tmp1: 	[ isSelectionUpdateFromView := tmp1 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphTreeListManager>>mouseUp:on:
		compiledBlock: 	a CompiledBlock: [
		| tmp4 |
		tmp4 := self newSelectionHol[..]
		numArgs: 	0
		receiver: 	a MorphTreeListManager


MorphTreeListManager>>selectionUpdateFromViewWhile:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		arg1: 	[
		| tmp4 |
		tmp4 := self newSelectionHolderWithNodePath: tmp1.
		s[..]
		tmp1: 	false
	Receiver's instance variables: 
		multipleSelection: 	false
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(FileLocator))
		lastClickedMorph: 	NodeMorph(Node(FileLocator))
		columnDropUnabled: 	nil
		autoDeselection: 	nil
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(37147392)
		isSelectionUpdateFromView: 	true
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(FileLocator)))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClick
		keyDownActionSelector: 	#keyDown:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		arg1: 	[(714@341) mouseUp 27349591 nil]
		arg2: 	NodeMorph(Node(FileLocator))
		tmp1: 	an OrderedCollection(Node(FileLocator))
		tmp2: 	false
		tmp3: 	false
	Receiver's instance variables: 
		multipleSelection: 	false
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(FileLocator))
		lastClickedMorph: 	NodeMorph(Node(FileLocator))
		columnDropUnabled: 	nil
		autoDeselection: 	nil
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(37147392)
		isSelectionUpdateFromView: 	true
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(FileLocator)))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClick
		keyDownActionSelector: 	#keyDown:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(37147392)
	Arguments and temporary variables: 
		arg1: 	[(714@341) mouseUp 27349591 nil]
		tmp1: 	NodeMorph(Node(FileLocator))
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(671.0@330.0) corner: (1361.0@574.0)
		owner: 	a StandardWindow(471149312) named: Finder
		submorphs: 	an Array(a Morph(238637824) a MorphTreeTransformMorph(126625280))
		fullBounds: 	(671@330) corner: (1362@574)
		color: 	Color white
		extension: 	a MorphExtension (361539840) [other:  (announcer -> an Announcer)]
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		model: 	a FinderUI
		scrollBar: 	a ScrollBarMorph(95915520)
		scroller: 	a MorphTreeTransformMorph(126625280)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBarMorph(367011328)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	2
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		resizerWidth: 	0
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(238637824)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an Array(Node(FileLocator) Node(FileLocatorStoredSetting) Node(Fi[..]
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	154.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(37147392)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(671.0@330.0) corner: (1361.0@574.0)
		owner: 	a StandardWindow(471149312) named: Finder
		submorphs: 	an Array(a Morph(238637824) a MorphTreeTransformMorph(126625280))
		fullBounds: 	(671@330) corner: (1362@574)
		color: 	Color white
		extension: 	a MorphExtension (361539840) [other:  (announcer -> an Announcer)]
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		model: 	a FinderUI
		scrollBar: 	a ScrollBarMorph(95915520)
		scroller: 	a MorphTreeTransformMorph(126625280)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBarMorph(367011328)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	2
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		resizerWidth: 	0
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(238637824)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an Array(Node(FileLocator) Node(FileLocatorStoredSetting) Node(Fi[..]
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	154.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(714@341) mouseUp 27349591 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphTreeMorph(37147392)
	Receiver's instance variables: 
		timeStamp: 	27349591
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(714@341)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(37147392)
	Arguments and temporary variables: 
		arg1: 	[(714@341) mouseUp 27349591 nil]
	Receiver's instance variables: 
		bounds: 	(671.0@330.0) corner: (1361.0@574.0)
		owner: 	a StandardWindow(471149312) named: Finder
		submorphs: 	an Array(a Morph(238637824) a MorphTreeTransformMorph(126625280))
		fullBounds: 	(671@330) corner: (1362@574)
		color: 	Color white
		extension: 	a MorphExtension (361539840) [other:  (announcer -> an Announcer)]
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		model: 	a FinderUI
		scrollBar: 	a ScrollBarMorph(95915520)
		scroller: 	a MorphTreeTransformMorph(126625280)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBarMorph(367011328)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	2
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		resizerWidth: 	0
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(238637824)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an Array(Node(FileLocator) Node(FileLocatorStoredSetting) Node(Fi[..]
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	154.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(37147392)
	Arguments and temporary variables: 
		arg1: 	[(714@341) mouseUp 27349591 nil]
	Receiver's instance variables: 
		bounds: 	(671.0@330.0) corner: (1361.0@574.0)
		owner: 	a StandardWindow(471149312) named: Finder
		submorphs: 	an Array(a Morph(238637824) a MorphTreeTransformMorph(126625280))
		fullBounds: 	(671@330) corner: (1362@574)
		color: 	Color white
		extension: 	a MorphExtension (361539840) [other:  (announcer -> an Announcer)]
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		model: 	a FinderUI
		scrollBar: 	a ScrollBarMorph(95915520)
		scroller: 	a MorphTreeTransformMorph(126625280)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBarMorph(367011328)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	2
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		resizerWidth: 	0
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(238637824)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an Array(Node(FileLocator) Node(FileLocatorStoredSetting) Node(Fi[..]
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	154.0
		enabled: 	true


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(714@341.0) corner: (730@357.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(714@341.0) corner: (730@357.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(714@341) mouseOver 27349591 nil]
		targetOffset: 	(43.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(714@341.0) corner: (730@357.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(714@341.0) corner: (730@357.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(714@341) mouseOver 27349591 nil]
		targetOffset: 	(43.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(714@341) mouseUp 27349591 nil]
		arg2: 	a MorphTreeMorph(37147392)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(714@341.0) corner: (730@357.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(714@341.0) corner: (730@357.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(714@341) mouseOver 27349591 nil]
		targetOffset: 	(43.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(714@341) mouseUp 27349591 nil]
	Receiver's instance variables: 
		bounds: 	(714@341.0) corner: (730@357.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(714@341.0) corner: (730@357.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(714@341) mouseOver 27349591 nil]
		targetOffset: 	(43.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(714@341) mouseUp 27349591 nil]
		tmp1: 	[(714@341) mouseUp 27349591 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(714@341.0) corner: (730@357.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(714@341.0) corner: (730@357.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(714@341) mouseOver 27349591 nil]
		targetOffset: 	(43.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>processEvents
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		tmp1: 	[(714@341) mouseUp 27349591 nil]
	Receiver's instance variables: 
		bounds: 	(714@341.0) corner: (730@357.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(714@341.0) corner: (730@357.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(714@341) mouseOver 27349591 nil]
		targetOffset: 	(43.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27326046
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	27349602
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 18 items


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(566076672))
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
		tmp1: 	1
		tmp2: 	1
	Receiver's instance variables: 
an Array(a HandMorph(566076672))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27326046
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	27349602
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 19 items


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27326046
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	27349602
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 19 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #do:
WriteStream(Stream)>>nextPutAll:
WriteStream>>nextPutAll:
[ :arg2 |
		  arg2 nextPutAll: arg1 definitionString.
		  arg1 hasComment ifTrue: [
			  arg2
				  cr;
				  cr;
				  cr;
				  nextPutAll: arg1 comment ] ] in FinderUI>>buildDescriptionOf:
String class(SequenceableCollection class)>>new:streamContents:
String class(SequenceableCollection class)>>streamContents:
FinderUI>>buildDescriptionOf:
FinderUI>>sourceCode
FinderUI>>updateSourceCode
WeakMessageSend>>value
Finder(Object)>>triggerEvent:
Finder>>selection:
FinderUI>>selection:
[
		| tmp4 |
		tmp4 := self newSelectionHolderWithNodePath: tmp1.
		self listModel selection: tmp4 ] in MorphTreeListManager>>mouseUp:on:
FullBlockClosure(BlockClosure)>>ensure:
MorphTreeListManager>>selectionUpdateFromViewWhile:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "do:" is nil
7 December 2024 7:12:33.622892 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #do:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

WriteStream(Stream)>>nextPutAll:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		arg1: 	nil
	Receiver's instance variables: 
		collection: 	'AbstractFileReference << #FileLocator
	slots: { #origin };
	sh[..]
		position: 	138
		readLimit: 	0
		writeLimit: 	170


WriteStream>>nextPutAll:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		arg1: 	nil
		tmp1: 	nil
	Receiver's instance variables: 
		collection: 	'AbstractFileReference << #FileLocator
	slots: { #origin };
	sh[..]
		position: 	138
		readLimit: 	0
		writeLimit: 	170


[ :arg2 |
		  arg2 nextPutAll: arg1 definitionString.
		  arg1 hasComment ifTrue: [
			  arg2
				  cr;
				  cr;
				  cr;
				  nextPutAll: arg1 comment ] ] in FinderUI>>buildDescriptionOf:
	Receiver: a FinderUI
	Arguments and temporary variables: 
		arg1: 	FileLocator
		arg2: 	a WriteStream
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


String class(SequenceableCollection class)>>new:streamContents:
	Receiver: String
	Arguments and temporary variables: 
		arg1: 	100
		arg2: 	[ :arg2 |
		  arg2 nextPutAll: arg1 definitionString.
		  arg1 hasCom[..]
		tmp1: 	a WriteStream
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 311)
		format: 	0
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (*AST-Core) - 1 selector(s) Protocol (comparin[..]
		subclasses: 	{ByteString. Symbol. WideString}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	73027578
		packageTag: 	a PackageTag(Base)


String class(SequenceableCollection class)>>streamContents:
	Receiver: String
	Arguments and temporary variables: 
		arg1: 	[ :arg2 |
		  arg2 nextPutAll: arg1 definitionString.
		  arg1 hasCom[..]
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 311)
		format: 	0
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (*AST-Core) - 1 selector(s) Protocol (comparin[..]
		subclasses: 	{ByteString. Symbol. WideString}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	73027578
		packageTag: 	a PackageTag(Base)


FinderUI>>buildDescriptionOf:
	Receiver: a FinderUI
	Arguments and temporary variables: 
		arg1: 	FileLocator
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


FinderUI>>sourceCode
	Receiver: a FinderUI
	Arguments and temporary variables: 
		tmp1: 	FileLocator
		tmp2: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


FinderUI>>updateSourceCode
	Receiver: a FinderUI
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


WeakMessageSend>>value
	Receiver: WeakMessageSend(#updateSourceCode -> nil)(#updateSourceCode -> a FinderUI)
	Arguments and temporary variables: 
		tmp1: 	a FinderUI
	Receiver's instance variables: 
		selector: 	#updateSourceCode
		arguments: 	a WeakArray()
		lookupClass: 	nil
		receiver: 	nil
		shouldBeNil: 	#()


Finder(Object)>>triggerEvent:
	Receiver: a Finder
	Arguments and temporary variables: 
		arg1: 	#updateSourceCode
	Receiver's instance variables: 
		searchingString: 	'FileLocator'
		selectedMethod: 	nil
		selectedClass: 	FileLocator
		packagesSelection: 	Smalltalk
		environment: 	Smalltalk
		resultDictionary: 	a Dictionary(FileLocator->#(#= #absolutePath #acceptSetti[..]
		useRegEx: 	false
		searchStrategy: 	a FinderClassesSearchStrategy


Finder>>selection:
	Receiver: a Finder
	Arguments and temporary variables: 
		arg1: 	a MorphTreeMorphSingleSelection
		tmp1: 	an OrderedCollection(Node(FileLocator))
	Receiver's instance variables: 
		searchingString: 	'FileLocator'
		selectedMethod: 	nil
		selectedClass: 	FileLocator
		packagesSelection: 	Smalltalk
		environment: 	Smalltalk
		resultDictionary: 	a Dictionary(FileLocator->#(#= #absolutePath #acceptSetti[..]
		useRegEx: 	false
		searchStrategy: 	a FinderClassesSearchStrategy


FinderUI>>selection:
	Receiver: a FinderUI
	Arguments and temporary variables: 
		arg1: 	a MorphTreeMorphSingleSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


[
		| tmp4 |
		tmp4 := self newSelectionHolderWithNodePath: tmp1.
		self listModel selection: tmp4 ] in MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		arg1: 	[(679@338) mouseUp 27350145 nil]
		arg2: 	NodeMorph(Node(FileLocator))
		tmp1: 	an OrderedCollection(Node(FileLocator))
		tmp2: 	false
		tmp3: 	false
		tmp4: 	a MorphTreeMorphSingleSelection
	Receiver's instance variables: 
		multipleSelection: 	false
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(FileLocator))
		lastClickedMorph: 	NodeMorph(Node(FileLocator))
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(37147392)
		isSelectionUpdateFromView: 	true
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(FileLocator)))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClick
		keyDownActionSelector: 	#keyDown:


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp4 |
		tmp4 := self newSelectionHolderWithNodePath: tmp1.
		self listModel sel[..]
	Arguments and temporary variables: 
		arg1: 	[ isSelectionUpdateFromView := tmp1 ]
		tmp1: 	[ isSelectionUpdateFromView := tmp1 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphTreeListManager>>mouseUp:on:
		compiledBlock: 	a CompiledBlock: [
		| tmp4 |
		tmp4 := self newSelectionHol[..]
		numArgs: 	0
		receiver: 	a MorphTreeListManager


MorphTreeListManager>>selectionUpdateFromViewWhile:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		arg1: 	[
		| tmp4 |
		tmp4 := self newSelectionHolderWithNodePath: tmp1.
		s[..]
		tmp1: 	true
	Receiver's instance variables: 
		multipleSelection: 	false
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(FileLocator))
		lastClickedMorph: 	NodeMorph(Node(FileLocator))
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(37147392)
		isSelectionUpdateFromView: 	true
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(FileLocator)))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClick
		keyDownActionSelector: 	#keyDown:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		arg1: 	[(679@338) mouseUp 27350145 nil]
		arg2: 	NodeMorph(Node(FileLocator))
		tmp1: 	an OrderedCollection(Node(FileLocator))
		tmp2: 	false
		tmp3: 	false
	Receiver's instance variables: 
		multipleSelection: 	false
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(FileLocator))
		lastClickedMorph: 	NodeMorph(Node(FileLocator))
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(37147392)
		isSelectionUpdateFromView: 	true
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(FileLocator)))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClick
		keyDownActionSelector: 	#keyDown:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(37147392)
	Arguments and temporary variables: 
		arg1: 	[(679@338) mouseUp 27350145 nil]
		tmp1: 	NodeMorph(Node(FileLocator))
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(671.0@330.0) corner: (1361.0@574.0)
		owner: 	a StandardWindow(471149312) named: Finder
		submorphs: 	an Array(a ScrollBarMorph(95915520) a Morph(238637824) a MorphTr[..]
		fullBounds: 	(671@330) corner: (1362@574)
		color: 	Color white
		extension: 	a MorphExtension (361539840) [other:  (announcer -> an Announcer)]
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		model: 	a FinderUI
		scrollBar: 	a ScrollBarMorph(95915520)
		scroller: 	a MorphTreeTransformMorph(126625280)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBarMorph(367011328)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	2
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		resizerWidth: 	0
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(238637824)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an Array(Node(FileLocator) Node(FileLocatorStoredSetting) Node(Fi[..]
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	172.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(37147392)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(671.0@330.0) corner: (1361.0@574.0)
		owner: 	a StandardWindow(471149312) named: Finder
		submorphs: 	an Array(a ScrollBarMorph(95915520) a Morph(238637824) a MorphTr[..]
		fullBounds: 	(671@330) corner: (1362@574)
		color: 	Color white
		extension: 	a MorphExtension (361539840) [other:  (announcer -> an Announcer)]
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		model: 	a FinderUI
		scrollBar: 	a ScrollBarMorph(95915520)
		scroller: 	a MorphTreeTransformMorph(126625280)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBarMorph(367011328)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	2
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		resizerWidth: 	0
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(238637824)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an Array(Node(FileLocator) Node(FileLocatorStoredSetting) Node(Fi[..]
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	172.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(679@338) mouseUp 27350145 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphTreeMorph(37147392)
	Receiver's instance variables: 
		timeStamp: 	27350145
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(679@338)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(37147392)
	Arguments and temporary variables: 
		arg1: 	[(679@338) mouseUp 27350145 nil]
	Receiver's instance variables: 
		bounds: 	(671.0@330.0) corner: (1361.0@574.0)
		owner: 	a StandardWindow(471149312) named: Finder
		submorphs: 	an Array(a ScrollBarMorph(95915520) a Morph(238637824) a MorphTr[..]
		fullBounds: 	(671@330) corner: (1362@574)
		color: 	Color white
		extension: 	a MorphExtension (361539840) [other:  (announcer -> an Announcer)]
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		model: 	a FinderUI
		scrollBar: 	a ScrollBarMorph(95915520)
		scroller: 	a MorphTreeTransformMorph(126625280)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBarMorph(367011328)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	2
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		resizerWidth: 	0
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(238637824)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an Array(Node(FileLocator) Node(FileLocatorStoredSetting) Node(Fi[..]
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	172.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(37147392)
	Arguments and temporary variables: 
		arg1: 	[(679@338) mouseUp 27350145 nil]
	Receiver's instance variables: 
		bounds: 	(671.0@330.0) corner: (1361.0@574.0)
		owner: 	a StandardWindow(471149312) named: Finder
		submorphs: 	an Array(a ScrollBarMorph(95915520) a Morph(238637824) a MorphTr[..]
		fullBounds: 	(671@330) corner: (1362@574)
		color: 	Color white
		extension: 	a MorphExtension (361539840) [other:  (announcer -> an Announcer)]
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		model: 	a FinderUI
		scrollBar: 	a ScrollBarMorph(95915520)
		scroller: 	a MorphTreeTransformMorph(126625280)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBarMorph(367011328)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	2
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		resizerWidth: 	0
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(238637824)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an Array(Node(FileLocator) Node(FileLocatorStoredSetting) Node(Fi[..]
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	172.0
		enabled: 	true


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(679@338.0) corner: (695@354.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(679@338.0) corner: (695@354.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(679@338) mouseUp 27350145 nil]
		targetOffset: 	(8.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(679@338.0) corner: (695@354.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(679@338.0) corner: (695@354.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(679@338) mouseUp 27350145 nil]
		targetOffset: 	(8.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(679@338) mouseUp 27350145 nil]
		arg2: 	a MorphTreeMorph(37147392)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(679@338.0) corner: (695@354.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(679@338.0) corner: (695@354.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(679@338) mouseUp 27350145 nil]
		targetOffset: 	(8.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(679@338) mouseUp 27350145 nil]
	Receiver's instance variables: 
		bounds: 	(679@338.0) corner: (695@354.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(679@338.0) corner: (695@354.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(679@338) mouseUp 27350145 nil]
		targetOffset: 	(8.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(679@338) mouseUp 27350145 nil]
		tmp1: 	[(679@338) mouseUp 27350145 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(679@338.0) corner: (695@354.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(679@338.0) corner: (695@354.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(679@338) mouseUp 27350145 nil]
		targetOffset: 	(8.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(679@338) mouseUp 27350145 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27326046
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	27350135
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27326046
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	27350135
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #do:
WriteStream(Stream)>>nextPutAll:
WriteStream>>nextPutAll:
[ :arg2 |
		  arg2 nextPutAll: arg1 definitionString.
		  arg1 hasComment ifTrue: [
			  arg2
				  cr;
				  cr;
				  cr;
				  nextPutAll: arg1 comment ] ] in FinderUI>>buildDescriptionOf:
String class(SequenceableCollection class)>>new:streamContents:
String class(SequenceableCollection class)>>streamContents:
FinderUI>>buildDescriptionOf:
FinderUI>>sourceCode
FinderUI>>updateSourceCode
WeakMessageSend>>value
Finder(Object)>>triggerEvent:
Finder>>selection:
FinderUI>>selection:
[
		| tmp4 |
		tmp4 := self newSelectionHolderWithNodePath: tmp1.
		self listModel selection: tmp4 ] in MorphTreeListManager>>mouseUp:on:
FullBlockClosure(BlockClosure)>>ensure:
MorphTreeListManager>>selectionUpdateFromViewWhile:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "do:" is nil
7 December 2024 7:12:55.386362 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #do:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

WriteStream(Stream)>>nextPutAll:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		arg1: 	nil
	Receiver's instance variables: 
		collection: 	'AbstractFileReference << #FileLocator
	slots: { #origin };
	sh[..]
		position: 	138
		readLimit: 	0
		writeLimit: 	170


WriteStream>>nextPutAll:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		arg1: 	nil
		tmp1: 	nil
	Receiver's instance variables: 
		collection: 	'AbstractFileReference << #FileLocator
	slots: { #origin };
	sh[..]
		position: 	138
		readLimit: 	0
		writeLimit: 	170


[ :arg2 |
		  arg2 nextPutAll: arg1 definitionString.
		  arg1 hasComment ifTrue: [
			  arg2
				  cr;
				  cr;
				  cr;
				  nextPutAll: arg1 comment ] ] in FinderUI>>buildDescriptionOf:
	Receiver: a FinderUI
	Arguments and temporary variables: 
		arg1: 	FileLocator
		arg2: 	a WriteStream
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


String class(SequenceableCollection class)>>new:streamContents:
	Receiver: String
	Arguments and temporary variables: 
		arg1: 	100
		arg2: 	[ :arg2 |
		  arg2 nextPutAll: arg1 definitionString.
		  arg1 hasCom[..]
		tmp1: 	a WriteStream
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 311)
		format: 	0
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (*AST-Core) - 1 selector(s) Protocol (comparin[..]
		subclasses: 	{ByteString. Symbol. WideString}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	73027578
		packageTag: 	a PackageTag(Base)


String class(SequenceableCollection class)>>streamContents:
	Receiver: String
	Arguments and temporary variables: 
		arg1: 	[ :arg2 |
		  arg2 nextPutAll: arg1 definitionString.
		  arg1 hasCom[..]
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 311)
		format: 	0
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (*AST-Core) - 1 selector(s) Protocol (comparin[..]
		subclasses: 	{ByteString. Symbol. WideString}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	73027578
		packageTag: 	a PackageTag(Base)


FinderUI>>buildDescriptionOf:
	Receiver: a FinderUI
	Arguments and temporary variables: 
		arg1: 	FileLocator
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


FinderUI>>sourceCode
	Receiver: a FinderUI
	Arguments and temporary variables: 
		tmp1: 	FileLocator
		tmp2: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


FinderUI>>updateSourceCode
	Receiver: a FinderUI
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


WeakMessageSend>>value
	Receiver: WeakMessageSend(#updateSourceCode -> nil)(#updateSourceCode -> a FinderUI)
	Arguments and temporary variables: 
		tmp1: 	a FinderUI
	Receiver's instance variables: 
		selector: 	#updateSourceCode
		arguments: 	a WeakArray()
		lookupClass: 	nil
		receiver: 	nil
		shouldBeNil: 	#()


Finder(Object)>>triggerEvent:
	Receiver: a Finder
	Arguments and temporary variables: 
		arg1: 	#updateSourceCode
	Receiver's instance variables: 
		searchingString: 	'FileLocator'
		selectedMethod: 	nil
		selectedClass: 	FileLocator
		packagesSelection: 	Smalltalk
		environment: 	Smalltalk
		resultDictionary: 	a Dictionary(FileLocator->#(#= #absolutePath #acceptSetti[..]
		useRegEx: 	false
		searchStrategy: 	a FinderClassesSearchStrategy


Finder>>selection:
	Receiver: a Finder
	Arguments and temporary variables: 
		arg1: 	a MorphTreeMorphSingleSelection
		tmp1: 	an OrderedCollection(Node(FileLocator))
	Receiver's instance variables: 
		searchingString: 	'FileLocator'
		selectedMethod: 	nil
		selectedClass: 	FileLocator
		packagesSelection: 	Smalltalk
		environment: 	Smalltalk
		resultDictionary: 	a Dictionary(FileLocator->#(#= #absolutePath #acceptSetti[..]
		useRegEx: 	false
		searchStrategy: 	a FinderClassesSearchStrategy


FinderUI>>selection:
	Receiver: a FinderUI
	Arguments and temporary variables: 
		arg1: 	a MorphTreeMorphSingleSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a StandardWindow(471149312) named: Finder an [..]
		announcer: 	an Announcer
		selection: 	a MorphTreeMorphSingleSelection
		rootItems: 	nil
		autoMultiSelection: 	false
		headerLabel: 	nil
		multiSelection: 	false
		wrapBlockOrSelector: 	[ :arg1 | arg1 asString ]
		isCheckList: 	false
		enabled: 	nil
		finder: 	a Finder
		forceSearch: 	false
		searchingTextArea: 	an EditableDropListMorph(983958016)
		sourceTextArea: 	a RubScrolledTextMorph(102826752)
		useRegExCheckbox: 	a CheckboxMorph(699963648)
		searchedTextList: 	an OrderedCollection('FileLocator')
		sourceTextModel: 	a RubScrolledTextModel


[
		| tmp4 |
		tmp4 := self newSelectionHolderWithNodePath: tmp1.
		self listModel selection: tmp4 ] in MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		arg1: 	[(789@344) mouseUp 27371910 nil]
		arg2: 	NodeMorph(Node(FileLocator))
		tmp1: 	an OrderedCollection(Node(FileLocator))
		tmp2: 	false
		tmp3: 	false
		tmp4: 	a MorphTreeMorphSingleSelection
	Receiver's instance variables: 
		multipleSelection: 	false
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(FileLocator))
		lastClickedMorph: 	NodeMorph(Node(FileLocator))
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(37147392)
		isSelectionUpdateFromView: 	true
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(FileLocator)))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClick
		keyDownActionSelector: 	#keyDown:


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp4 |
		tmp4 := self newSelectionHolderWithNodePath: tmp1.
		self listModel sel[..]
	Arguments and temporary variables: 
		arg1: 	[ isSelectionUpdateFromView := tmp1 ]
		tmp1: 	[ isSelectionUpdateFromView := tmp1 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphTreeListManager>>mouseUp:on:
		compiledBlock: 	a CompiledBlock: [
		| tmp4 |
		tmp4 := self newSelectionHol[..]
		numArgs: 	0
		receiver: 	a MorphTreeListManager


MorphTreeListManager>>selectionUpdateFromViewWhile:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		arg1: 	[
		| tmp4 |
		tmp4 := self newSelectionHolderWithNodePath: tmp1.
		s[..]
		tmp1: 	true
	Receiver's instance variables: 
		multipleSelection: 	false
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(FileLocator))
		lastClickedMorph: 	NodeMorph(Node(FileLocator))
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(37147392)
		isSelectionUpdateFromView: 	true
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(FileLocator)))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClick
		keyDownActionSelector: 	#keyDown:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		arg1: 	[(789@344) mouseUp 27371910 nil]
		arg2: 	NodeMorph(Node(FileLocator))
		tmp1: 	an OrderedCollection(Node(FileLocator))
		tmp2: 	false
		tmp3: 	false
	Receiver's instance variables: 
		multipleSelection: 	false
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(FileLocator))
		lastClickedMorph: 	NodeMorph(Node(FileLocator))
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(37147392)
		isSelectionUpdateFromView: 	true
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(FileLocator)))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClick
		keyDownActionSelector: 	#keyDown:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(37147392)
	Arguments and temporary variables: 
		arg1: 	[(789@344) mouseUp 27371910 nil]
		tmp1: 	NodeMorph(Node(FileLocator))
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(671.0@330.0) corner: (1361.0@574.0)
		owner: 	a StandardWindow(471149312) named: Finder
		submorphs: 	an Array(a ScrollBarMorph(95915520) a Morph(238637824) a MorphTr[..]
		fullBounds: 	(671@330) corner: (1362@574)
		color: 	Color white
		extension: 	a MorphExtension (361539840) [other:  (announcer -> an Announcer)]
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		model: 	a FinderUI
		scrollBar: 	a ScrollBarMorph(95915520)
		scroller: 	a MorphTreeTransformMorph(126625280)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBarMorph(367011328)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	2
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		resizerWidth: 	0
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(238637824)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an Array(Node(FileLocator) Node(FileLocatorStoredSetting) Node(Fi[..]
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	172.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(37147392)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(671.0@330.0) corner: (1361.0@574.0)
		owner: 	a StandardWindow(471149312) named: Finder
		submorphs: 	an Array(a ScrollBarMorph(95915520) a Morph(238637824) a MorphTr[..]
		fullBounds: 	(671@330) corner: (1362@574)
		color: 	Color white
		extension: 	a MorphExtension (361539840) [other:  (announcer -> an Announcer)]
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		model: 	a FinderUI
		scrollBar: 	a ScrollBarMorph(95915520)
		scroller: 	a MorphTreeTransformMorph(126625280)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBarMorph(367011328)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	2
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		resizerWidth: 	0
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(238637824)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an Array(Node(FileLocator) Node(FileLocatorStoredSetting) Node(Fi[..]
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	172.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(789@344) mouseUp 27371910 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphTreeMorph(37147392)
	Receiver's instance variables: 
		timeStamp: 	27371910
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(789@344)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(37147392)
	Arguments and temporary variables: 
		arg1: 	[(789@344) mouseUp 27371910 nil]
	Receiver's instance variables: 
		bounds: 	(671.0@330.0) corner: (1361.0@574.0)
		owner: 	a StandardWindow(471149312) named: Finder
		submorphs: 	an Array(a ScrollBarMorph(95915520) a Morph(238637824) a MorphTr[..]
		fullBounds: 	(671@330) corner: (1362@574)
		color: 	Color white
		extension: 	a MorphExtension (361539840) [other:  (announcer -> an Announcer)]
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		model: 	a FinderUI
		scrollBar: 	a ScrollBarMorph(95915520)
		scroller: 	a MorphTreeTransformMorph(126625280)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBarMorph(367011328)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	2
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		resizerWidth: 	0
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(238637824)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an Array(Node(FileLocator) Node(FileLocatorStoredSetting) Node(Fi[..]
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	172.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(37147392)
	Arguments and temporary variables: 
		arg1: 	[(789@344) mouseUp 27371910 nil]
	Receiver's instance variables: 
		bounds: 	(671.0@330.0) corner: (1361.0@574.0)
		owner: 	a StandardWindow(471149312) named: Finder
		submorphs: 	an Array(a ScrollBarMorph(95915520) a Morph(238637824) a MorphTr[..]
		fullBounds: 	(671@330) corner: (1362@574)
		color: 	Color white
		extension: 	a MorphExtension (361539840) [other:  (announcer -> an Announcer)]
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		model: 	a FinderUI
		scrollBar: 	a ScrollBarMorph(95915520)
		scroller: 	a MorphTreeTransformMorph(126625280)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBarMorph(367011328)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	2
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		resizerWidth: 	0
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(238637824)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an Array(Node(FileLocator) Node(FileLocatorStoredSetting) Node(Fi[..]
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	172.0
		enabled: 	true


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(789@344.0) corner: (805@360.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(789@344.0) corner: (805@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(789@344) mouseOver 27371910 nil]
		targetOffset: 	(119.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(789@344.0) corner: (805@360.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(789@344.0) corner: (805@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(789@344) mouseOver 27371910 nil]
		targetOffset: 	(119.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(789@344) mouseUp 27371910 nil]
		arg2: 	a MorphTreeMorph(37147392)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(789@344.0) corner: (805@360.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(789@344.0) corner: (805@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(789@344) mouseOver 27371910 nil]
		targetOffset: 	(119.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(789@344) mouseUp 27371910 nil]
	Receiver's instance variables: 
		bounds: 	(789@344.0) corner: (805@360.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(789@344.0) corner: (805@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(789@344) mouseOver 27371910 nil]
		targetOffset: 	(119.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(789@344) mouseUp 27371910 nil]
		tmp1: 	[(789@344) mouseUp 27371910 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(789@344.0) corner: (805@360.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(789@344.0) corner: (805@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(789@344) mouseOver 27371910 nil]
		targetOffset: 	(119.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>processEvents
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		tmp1: 	[(789@344) mouseUp 27371910 nil]
	Receiver's instance variables: 
		bounds: 	(789@344.0) corner: (805@360.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(789@344.0) corner: (805@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(37147392)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(789@344) mouseOver 27371910 nil]
		targetOffset: 	(119.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27326046
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	27371921
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(566076672))
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
		tmp1: 	1
		tmp2: 	1
	Receiver's instance variables: 
an Array(a HandMorph(566076672))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27326046
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	27371921
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27326046
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	27371921
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #do:
WriteStream(Stream)>>nextPutAll:
WriteStream>>nextPutAll:
[ :arg2 |
		  arg2 nextPutAll: arg1 definitionString.
		  arg1 hasComment ifTrue: [
			  arg2
				  cr;
				  cr;
				  cr;
				  nextPutAll: arg1 comment ] ] in FinderUI>>buildDescriptionOf:
String class(SequenceableCollection class)>>new:streamContents:
String class(SequenceableCollection class)>>streamContents:
FinderUI>>buildDescriptionOf:
FinderUI>>sourceCode
FinderUI>>updateSourceCode
WeakMessageSend>>value
Finder(Object)>>triggerEvent:
Finder>>selection:
FinderUI>>selection:
[
		| tmp4 |
		tmp4 := self newSelectionHolderWithNodePath: tmp1.
		self listModel selection: tmp4 ] in MorphTreeListManager>>mouseUp:on:
FullBlockClosure(BlockClosure)>>ensure:
MorphTreeListManager>>selectionUpdateFromViewWhile:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "ifEmpty:" is nil
7 December 2024 7:13:00.253342 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #ifEmpty:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

ClyClassIconTableDecorator class(ClyClassTableDecorator class)>>decorateTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(629750016)
		arg2: 	a ClyDataSourceItem(FileLocator)
		tmp1: 	a MorphExtension (336704256)
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(629750016)
		arg2: 	a ClyDataSourceItem(FileLocator)
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class>>decorateMainTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(629750016)
		arg2: 	a ClyDataSourceItem(FileLocator)
		tmp1: 	nil
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:inContext:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(629750016)
		arg2: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyTableDecorationStrategyAnnotation>>decorateMainTableCell:inContext:
	Receiver: a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(629750016)
		arg2: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		annotatedClass: 	ClyClassIconTableDecorator
		declarationSelector: 	#decorationStrategy
		priority: 	0
		activeContext: 	a ClyBrowserItemContext


[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ] in ClyQueryViewMorph>>decorateMainTableCell:of:
	Receiver: a ClyQueryViewMorph(767230208)
	Arguments and temporary variables: 
		arg1: 	a ClyFullBrowserClassContext
		arg2: 	a ClyDataSourceItem(FileLocator)
		tmp1: 	a ClyMainItemCellMorph(629750016)
		arg3: 	a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(273348096)
		submorphs: 	an Array(a FTTableMorph(695270912))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (960495872)
		table: 	a FTTableMorph(695270912)
		browser: 	a ClyFullBrowserMorph(802914816)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


SortedCollection(SequenceableCollection)>>select:thenDo:
	Receiver: a SortedCollection(a ClyTableDecorationStrategyAnnotation(ClyClassCommentTableDecorato[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 isActiveInContext: arg1 ]
		arg2: 	[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ]
		tmp1: 	a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
		tmp2: 	25
		tmp3: 	1
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil[..]
		firstIndex: 	16
		lastIndex: 	40
		sortBlock: 	a PropertySortFunction


ClyTableDecorationStrategyAnnotation class(ClassAnnotation class)>>activeInstancesInContext:do:
	Receiver: ClyTableDecorationStrategyAnnotation
	Arguments and temporary variables: 
		arg1: 	a ClyFullBrowserClassContext
		arg2: 	[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ]
	Receiver's instance variables: 
		superclass: 	ClassAnnotation
		methodDict: 	a MethodDictionary(#annotatedClass:->ClyTableDecorationStrategy[..]
		format: 	65540
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (accessing) - 1 selector(s) Protocol (decorati[..]
		subclasses: 	nil
		name: 	#ClyTableDecorationStrategyAnnotation
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	9121576
		packageTag: 	a PackageTag(Table)
		redefinedInstances: 	nil


ClyQueryViewMorph>>decorateMainTableCell:of:
	Receiver: a ClyQueryViewMorph(767230208)
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(629750016)
		arg2: 	a ClyDataSourceItem(FileLocator)
		tmp1: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(273348096)
		submorphs: 	an Array(a FTTableMorph(695270912))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (960495872)
		table: 	a FTTableMorph(695270912)
		browser: 	a ClyFullBrowserMorph(802914816)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyMainTableColumn>>createCellFor:in:
	Receiver: a ClyMainTableColumn
	Arguments and temporary variables: 
		arg1: 	a ClyDataSourceItem(FileLocator)
		arg2: 	a ClyQueryViewMorph(767230208)
		tmp1: 	a ClyMainItemCellMorph(629750016)
	Receiver's instance variables: 
		id: 	#item
		width: 	nil
		sortingStrategy: 	a FTNullColumnSortingStrategy
		displayBlock: 	tmp2


ClyExpandedDataSource(ClyDataSource)>>cellColumn:row:
	Receiver: a ClyExpandedDataSource
	Arguments and temporary variables: 
		arg1: 	a ClyMainTableColumn
		arg2: 	4
		tmp1: 	a ClyDataSourceItem(FileLocator)
	Receiver's instance variables: 
		table: 	a FTTableMorph(695270912)
		query: 	a ClyUnionQuery(all classes) from hierarchy: FileLocator
		itemCursor: 	a ClyBrowserQueryCursor(a ClyUnionQuery(all classes) from hiera[..]
		depth: 	0
		parentItem: 	nil
		lastFilteredDataSource: 	nil
		queryView: 	a ClyQueryViewMorph(767230208)
		dirty: 	false
		collapsedItems: 	a SortedCollection()


(self exposedColumnsRange: tmp3) in FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(1057834240)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (87@17)
		owner: 	a FTTableMorph(695270912)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()
		startColumnIndex: 	0
		rowColors: 	nil


Interval>>do:
	Receiver: (1 to: 1)
	Arguments and temporary variables: 
		arg1: 	(self exposedColumnsRange: tmp3)
		tmp1: 	1
		tmp2: 	1
		tmp3: 	1
	Receiver's instance variables: 
		start: 	1
		stop: 	1
		step: 	1


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(1057834240)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (87@17)
		owner: 	a FTTableMorph(695270912)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()
		startColumnIndex: 	0
		rowColors: 	nil


FTTableMorph>>resizeAllSubviews
	Receiver: a FTTableMorph(695270912)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(767230208)
		submorphs: 	an Array(a ScrollBarMorph(202842112) a RubTextFieldMorph(3789184[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (120597760) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(1057834240)
		verticalScrollBar: 	a ScrollBarMorph(202842112)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#(4)
		highlightedIndexes: 	#()
		showIndex: 	4
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph>>extent:
	Receiver: a FTTableMorph(695270912)
	Arguments and temporary variables: 
		arg1: 	(100@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(767230208)
		submorphs: 	an Array(a ScrollBarMorph(202842112) a RubTextFieldMorph(3789184[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (120597760) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(1057834240)
		verticalScrollBar: 	a ScrollBarMorph(202842112)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#(4)
		highlightedIndexes: 	#()
		showIndex: 	4
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph(Morph)>>bounds:
	Receiver: a FTTableMorph(695270912)
	Arguments and temporary variables: 
		arg1: 	(0@0) corner: (100@40)
		tmp1: 	(50@40)
		tmp2: 	(100@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(767230208)
		submorphs: 	an Array(a ScrollBarMorph(202842112) a RubTextFieldMorph(3789184[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (120597760) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(1057834240)
		verticalScrollBar: 	a ScrollBarMorph(202842112)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#(4)
		highlightedIndexes: 	#()
		showIndex: 	4
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph(Morph)>>layoutInBounds:
	Receiver: a FTTableMorph(695270912)
	Arguments and temporary variables: 
		arg1: 	(0@0) corner: (100@40)
		tmp1: 	(0@0) corner: (100@40)
		tmp2: 	#center
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(767230208)
		submorphs: 	an Array(a ScrollBarMorph(202842112) a RubTextFieldMorph(3789184[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (120597760) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(1057834240)
		verticalScrollBar: 	a ScrollBarMorph(202842112)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#(4)
		highlightedIndexes: 	#()
		showIndex: 	4
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


TableLayout>>layoutTopToBottom:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		arg1: 	a ClyQueryViewMorph(767230208)
		arg2: 	(0@0) corner: (8@40)
		tmp1: 	0
		tmp2: 	(8@40)
		tmp3: 	[ :arg3 |
	        | tmp25 tmp26 tmp27 tmp29 |
	        tmp29 := arg3[..]
		tmp4: 	0
		tmp5: 	0
		tmp6: 	nil
		tmp7: 	19.0
		tmp8: 	19
		tmp9: 	0
		tmp10: 	0
		tmp11: 	1073741823
		tmp12: 	1073741823
		tmp13: 	an Array(a FTTableMorph(695270912))
		tmp15: 	1
		tmp16: 	40
		tmp17: 	19.0
		tmp18: 	0
		tmp19: 	a LayoutCell
		tmp20: 	(100@21)
		tmp21: 	100
		tmp22: 	1
		tmp23: 	true
		tmp24: 	a LayoutCell
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


TableLayout>>layout:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		arg1: 	a ClyQueryViewMorph(767230208)
		arg2: 	(0@0) corner: (8@40)
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	(0@0) corner: (8@40)
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


ClyQueryViewMorph(Morph)>>doLayoutIn:
	Receiver: a ClyQueryViewMorph(767230208)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(273348096)
		submorphs: 	an Array(a FTTableMorph(695270912))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (960495872)
		table: 	a FTTableMorph(695270912)
		browser: 	a ClyFullBrowserMorph(802914816)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>computeFullBounds
	Receiver: a ClyQueryViewMorph(767230208)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(273348096)
		submorphs: 	an Array(a FTTableMorph(695270912))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (960495872)
		table: 	a FTTableMorph(695270912)
		browser: 	a ClyFullBrowserMorph(802914816)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>fullBounds
	Receiver: a ClyQueryViewMorph(767230208)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(273348096)
		submorphs: 	an Array(a FTTableMorph(695270912))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (960495872)
		table: 	a FTTableMorph(695270912)
		browser: 	a ClyFullBrowserMorph(802914816)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>position:
	Receiver: a ClyQueryViewMorph(767230208)
	Arguments and temporary variables: 
		arg1: 	(13@0)
		tmp1: 	(13.0@0.0)
		tmp2: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(273348096)
		submorphs: 	an Array(a FTTableMorph(695270912))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (960495872)
		table: 	a FTTableMorph(695270912)
		browser: 	a ClyFullBrowserMorph(802914816)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>bounds:
	Receiver: a ClyQueryViewMorph(767230208)
	Arguments and temporary variables: 
		arg1: 	(13@0) corner: (21@40)
		tmp1: 	(50@40)
		tmp2: 	(8@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(273348096)
		submorphs: 	an Array(a FTTableMorph(695270912))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (960495872)
		table: 	a FTTableMorph(695270912)
		browser: 	a ClyFullBrowserMorph(802914816)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>layoutInBounds:
	Receiver: a ClyQueryViewMorph(767230208)
	Arguments and temporary variables: 
		arg1: 	(13@0) corner: (21@40)
		tmp1: 	(13@0) corner: (21@40)
		tmp2: 	#center
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(273348096)
		submorphs: 	an Array(a FTTableMorph(695270912))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (960495872)
		table: 	a FTTableMorph(695270912)
		browser: 	a ClyFullBrowserMorph(802914816)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>layoutProportionallyIn:
	Receiver: a ClyQueryViewMorph(767230208)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(273348096)
		submorphs: 	an Array(a FTTableMorph(695270912))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (960495872)
		table: 	a FTTableMorph(695270912)
		browser: 	a ClyFullBrowserMorph(802914816)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


[ :arg3 | arg3 layoutProportionallyIn: arg2 ] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(273348096)
		arg2: 	(0@0) corner: (50@40)
		arg3: 	a ClyQueryViewMorph(767230208)
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a ProportionalSplitterMorph(417829120) a ProportionalSplitterMorph(183297536)[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 layoutProportionallyIn: arg2 ]
		tmp1: 	7
		tmp2: 	1
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(417829120) a ProportionalSplitterMorph(183297536)[..]

PanelMorph(Morph)>>submorphsDo:
	Receiver: a PanelMorph(273348096)
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 layoutProportionallyIn: arg2 ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(802914816)
		submorphs: 	an Array(a ProportionalSplitterMorph(417829120) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (297667072) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(273348096)
		arg2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
a ProportionalLayout

PanelMorph(Morph)>>doLayoutIn:
	Receiver: a PanelMorph(273348096)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(802914816)
		submorphs: 	an Array(a ProportionalSplitterMorph(417829120) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (297667072) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(273348096)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(802914816)
		submorphs: 	an Array(a ProportionalSplitterMorph(417829120) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (297667072) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>fullBounds
	Receiver: a PanelMorph(273348096)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(802914816)
		submorphs: 	an Array(a ProportionalSplitterMorph(417829120) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (297667072) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBounds.
			tmp2
				ifNil: [ tmp2 := tmp3 copy ]
				ifNotNil: [ tmp2 := tmp2 quickMerge: tmp3 ] ] ] in ClyFullBrowserMorph(Morph)>>submorphBounds
	Receiver: a ClyFullBrowserMorph(802914816)
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(273348096)
		tmp3: 	nil
		tmp2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(371201792) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(349327360) a PanelMorph(999[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (588233472) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(273348096)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(500334848) a ClyQ[..]
		toolPanel: 	a PanelMorph(999732224)
		toolbar: 	a ClyToolbarMorph(656373248)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(500334848)
		classView: 	a ClyQueryViewMorph(767230208)
		methodGroupView: 	a ClyQueryViewMorph(43023872)
		methodView: 	a ClyQueryViewMorph(474775808)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from inst. side: FileLocator


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ProportionalSplitterMorph(349327360) a PanelMorph(999732224) a PanelMorph(2[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBou[..]
		tmp1: 	3
		tmp2: 	1
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(349327360) a PanelMorph(999732224) a PanelMorph(2[..]

ClyFullBrowserMorph(Morph)>>submorphBounds
	Receiver: a ClyFullBrowserMorph(802914816)
	Arguments and temporary variables: 
		tmp2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(371201792) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(349327360) a PanelMorph(999[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (588233472) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(273348096)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(500334848) a ClyQ[..]
		toolPanel: 	a PanelMorph(999732224)
		toolbar: 	a ClyToolbarMorph(656373248)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(500334848)
		classView: 	a ClyQueryViewMorph(767230208)
		methodGroupView: 	a ClyQueryViewMorph(43023872)
		methodView: 	a ClyQueryViewMorph(474775808)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from inst. side: FileLocator


ClyFullBrowserMorph(Morph)>>privateFullBounds
	Receiver: a ClyFullBrowserMorph(802914816)
	Arguments and temporary variables: 
		tmp1: 	(0@0) corner: (915@620)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(371201792) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(349327360) a PanelMorph(999[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (588233472) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(273348096)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(500334848) a ClyQ[..]
		toolPanel: 	a PanelMorph(999732224)
		toolbar: 	a ClyToolbarMorph(656373248)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(500334848)
		classView: 	a ClyQueryViewMorph(767230208)
		methodGroupView: 	a ClyQueryViewMorph(43023872)
		methodView: 	a ClyQueryViewMorph(474775808)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from inst. side: FileLocator



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #ifEmpty:
ClyClassIconTableDecorator class(ClyClassTableDecorator class)>>decorateTableCell:of:
ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:of:
ClyClassIconTableDecorator class>>decorateMainTableCell:of:
ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:inContext:
ClyTableDecorationStrategyAnnotation>>decorateMainTableCell:inContext:
[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ] in ClyQueryViewMorph>>decorateMainTableCell:of:
SortedCollection(SequenceableCollection)>>select:thenDo:
ClyTableDecorationStrategyAnnotation class(ClassAnnotation class)>>activeInstancesInContext:do:
ClyQueryViewMorph>>decorateMainTableCell:of:
ClyMainTableColumn>>createCellFor:in:
ClyExpandedDataSource(ClyDataSource)>>cellColumn:row:
(self exposedColumnsRange: tmp3) in FTTableContainerMorph>>updateExposedRows
Interval>>do:
FTTableContainerMorph>>updateExposedRows
FTTableMorph>>resizeAllSubviews
FTTableMorph>>extent:
FTTableMorph(Morph)>>bounds:
FTTableMorph(Morph)>>layoutInBounds:
TableLayout>>layoutTopToBottom:in:
TableLayout>>layout:in:
ClyQueryViewMorph(Morph)>>doLayoutIn:
ClyQueryViewMorph(Morph)>>computeFullBounds
ClyQueryViewMorph(Morph)>>fullBounds
ClyQueryViewMorph(Morph)>>position:
ClyQueryViewMorph(Morph)>>bounds:
ClyQueryViewMorph(Morph)>>layoutInBounds:
ClyQueryViewMorph(Morph)>>layoutProportionallyIn:
[ :arg3 | arg3 layoutProportionallyIn: arg2 ] in ProportionalLayout>>layout:in:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
ProportionalLayout>>layout:in:
PanelMorph(Morph)>>doLayoutIn:
PanelMorph(Morph)>>computeFullBounds
PanelMorph(Morph)>>fullBounds
[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBounds.
			tmp2
				ifNil: [ tmp2 := tmp3 copy ]
				ifNotNil: [ tmp2 := tmp2 quickMerge: tmp3 ] ] ] in ClyFullBrowserMorph(Morph)>>submorphBounds
Array(SequenceableCollection)>>do:
ClyFullBrowserMorph(Morph)>>submorphBounds
ClyFullBrowserMorph(Morph)>>privateFullBounds
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
ClyFullBrowserMorph(Morph)>>changed
ClyFullBrowserMorph(BorderedMorph)>>borderStyle:
SystemWindow>>addMorph:fullFrame:
SystemWindow>>addMorph:frame:
ClyFullBrowserMorph(Morph)>>wrappedInWindow
ClyFullBrowserMorph(Morph)>>openInWindowLabeled:inWorld:
ClyFullBrowserMorph(Morph)>>openInWindowLabeled:
ClyFullBrowserMorph(Morph)>>openInWindow
ClyFullBrowserMorph(ClyBrowserMorph)>>open
ClyFullBrowserMorph(ClyBrowserMorph)>>openAnotherBrowser:
ClyFullBrowserMorph(ClyBrowserMorph)>>spawnBrowser:withState:
ClyFullBrowserMorph(ClyBrowserMorph)>>spawnHierarchyForClass:selector:
SystemNavigation>>browseHierarchy:selector:
SystemNavigation>>browseHierarchy:
FinderClassNode>>browseHierarchy
FinderClassNode(Object)>>perform:orSendTo:
Cursor normal in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "ifEmpty:" is nil
7 December 2024 7:13:03.991655 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #ifEmpty:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

ClyClassIconTableDecorator class(ClyClassTableDecorator class)>>decorateTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(154460416)
		arg2: 	a ClyDataSourceItem(FileLocator)
		tmp1: 	a MorphExtension (783029760)
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(154460416)
		arg2: 	a ClyDataSourceItem(FileLocator)
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class>>decorateMainTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(154460416)
		arg2: 	a ClyDataSourceItem(FileLocator)
		tmp1: 	nil
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:inContext:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(154460416)
		arg2: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyTableDecorationStrategyAnnotation>>decorateMainTableCell:inContext:
	Receiver: a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(154460416)
		arg2: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		annotatedClass: 	ClyClassIconTableDecorator
		declarationSelector: 	#decorationStrategy
		priority: 	0
		activeContext: 	a ClyBrowserItemContext


[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ] in ClyQueryViewMorph>>decorateMainTableCell:of:
	Receiver: a ClyQueryViewMorph(347813888)
	Arguments and temporary variables: 
		arg1: 	a ClyFullBrowserClassContext
		arg2: 	a ClyDataSourceItem(FileLocator)
		tmp1: 	a ClyMainItemCellMorph(154460416)
		arg3: 	a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(258870272)
		submorphs: 	an Array(a FTTableMorph(31597312))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628906240)
		table: 	a FTTableMorph(31597312)
		browser: 	a ClyFullBrowserMorph(26015232)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


SortedCollection(SequenceableCollection)>>select:thenDo:
	Receiver: a SortedCollection(a ClyTableDecorationStrategyAnnotation(ClyClassCommentTableDecorato[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 isActiveInContext: arg1 ]
		arg2: 	[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ]
		tmp1: 	a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
		tmp2: 	25
		tmp3: 	1
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil[..]
		firstIndex: 	16
		lastIndex: 	40
		sortBlock: 	a PropertySortFunction


ClyTableDecorationStrategyAnnotation class(ClassAnnotation class)>>activeInstancesInContext:do:
	Receiver: ClyTableDecorationStrategyAnnotation
	Arguments and temporary variables: 
		arg1: 	a ClyFullBrowserClassContext
		arg2: 	[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ]
	Receiver's instance variables: 
		superclass: 	ClassAnnotation
		methodDict: 	a MethodDictionary(#annotatedClass:->ClyTableDecorationStrategy[..]
		format: 	65540
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (accessing) - 1 selector(s) Protocol (decorati[..]
		subclasses: 	nil
		name: 	#ClyTableDecorationStrategyAnnotation
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	9121576
		packageTag: 	a PackageTag(Table)
		redefinedInstances: 	nil


ClyQueryViewMorph>>decorateMainTableCell:of:
	Receiver: a ClyQueryViewMorph(347813888)
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(154460416)
		arg2: 	a ClyDataSourceItem(FileLocator)
		tmp1: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(258870272)
		submorphs: 	an Array(a FTTableMorph(31597312))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628906240)
		table: 	a FTTableMorph(31597312)
		browser: 	a ClyFullBrowserMorph(26015232)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyMainTableColumn>>createCellFor:in:
	Receiver: a ClyMainTableColumn
	Arguments and temporary variables: 
		arg1: 	a ClyDataSourceItem(FileLocator)
		arg2: 	a ClyQueryViewMorph(347813888)
		tmp1: 	a ClyMainItemCellMorph(154460416)
	Receiver's instance variables: 
		id: 	#item
		width: 	nil
		sortingStrategy: 	a FTNullColumnSortingStrategy
		displayBlock: 	tmp2


ClyExpandedDataSource(ClyDataSource)>>cellColumn:row:
	Receiver: a ClyExpandedDataSource
	Arguments and temporary variables: 
		arg1: 	a ClyMainTableColumn
		arg2: 	2
		tmp1: 	a ClyDataSourceItem(FileLocator)
	Receiver's instance variables: 
		table: 	a FTTableMorph(31597312)
		query: 	a ClyTaggedClassesQuery(Public) from packages: FileSystem-Core
		itemCursor: 	a ClyBrowserQueryCursor(a ClyTaggedClassesQuery(Public) from pa[..]
		depth: 	0
		parentItem: 	nil
		lastFilteredDataSource: 	nil
		queryView: 	a ClyQueryViewMorph(347813888)
		dirty: 	false
		collapsedItems: 	a SortedCollection()


(self exposedColumnsRange: tmp3) in FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(723334400)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (87@17)
		owner: 	a FTTableMorph(31597312)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()
		startColumnIndex: 	0
		rowColors: 	nil


Interval>>do:
	Receiver: (1 to: 1)
	Arguments and temporary variables: 
		arg1: 	(self exposedColumnsRange: tmp3)
		tmp1: 	1
		tmp2: 	1
		tmp3: 	1
	Receiver's instance variables: 
		start: 	1
		stop: 	1
		step: 	1


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(723334400)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (87@17)
		owner: 	a FTTableMorph(31597312)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()
		startColumnIndex: 	0
		rowColors: 	nil


FTTableMorph>>resizeAllSubviews
	Receiver: a FTTableMorph(31597312)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(347813888)
		submorphs: 	an Array(a ScrollBarMorph(175051008) a RubTextFieldMorph(3103820[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (895183872) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(723334400)
		verticalScrollBar: 	a ScrollBarMorph(175051008)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#(2)
		highlightedIndexes: 	#()
		showIndex: 	2
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph>>extent:
	Receiver: a FTTableMorph(31597312)
	Arguments and temporary variables: 
		arg1: 	(100@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(347813888)
		submorphs: 	an Array(a ScrollBarMorph(175051008) a RubTextFieldMorph(3103820[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (895183872) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(723334400)
		verticalScrollBar: 	a ScrollBarMorph(175051008)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#(2)
		highlightedIndexes: 	#()
		showIndex: 	2
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph(Morph)>>bounds:
	Receiver: a FTTableMorph(31597312)
	Arguments and temporary variables: 
		arg1: 	(0@0) corner: (100@40)
		tmp1: 	(50@40)
		tmp2: 	(100@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(347813888)
		submorphs: 	an Array(a ScrollBarMorph(175051008) a RubTextFieldMorph(3103820[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (895183872) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(723334400)
		verticalScrollBar: 	a ScrollBarMorph(175051008)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#(2)
		highlightedIndexes: 	#()
		showIndex: 	2
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph(Morph)>>layoutInBounds:
	Receiver: a FTTableMorph(31597312)
	Arguments and temporary variables: 
		arg1: 	(0@0) corner: (100@40)
		tmp1: 	(0@0) corner: (100@40)
		tmp2: 	#center
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(347813888)
		submorphs: 	an Array(a ScrollBarMorph(175051008) a RubTextFieldMorph(3103820[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (895183872) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(723334400)
		verticalScrollBar: 	a ScrollBarMorph(175051008)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#(2)
		highlightedIndexes: 	#()
		showIndex: 	2
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


TableLayout>>layoutTopToBottom:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		arg1: 	a ClyQueryViewMorph(347813888)
		arg2: 	(0@0) corner: (8@40)
		tmp1: 	0
		tmp2: 	(8@40)
		tmp3: 	[ :arg3 |
	        | tmp25 tmp26 tmp27 tmp29 |
	        tmp29 := arg3[..]
		tmp4: 	0
		tmp5: 	0
		tmp6: 	nil
		tmp7: 	19.0
		tmp8: 	19
		tmp9: 	0
		tmp10: 	0
		tmp11: 	1073741823
		tmp12: 	1073741823
		tmp13: 	an Array(a FTTableMorph(31597312))
		tmp15: 	1
		tmp16: 	40
		tmp17: 	19.0
		tmp18: 	0
		tmp19: 	a LayoutCell
		tmp20: 	(100@21)
		tmp21: 	100
		tmp22: 	1
		tmp23: 	true
		tmp24: 	a LayoutCell
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


TableLayout>>layout:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		arg1: 	a ClyQueryViewMorph(347813888)
		arg2: 	(0@0) corner: (8@40)
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	(0@0) corner: (8@40)
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


ClyQueryViewMorph(Morph)>>doLayoutIn:
	Receiver: a ClyQueryViewMorph(347813888)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(258870272)
		submorphs: 	an Array(a FTTableMorph(31597312))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628906240)
		table: 	a FTTableMorph(31597312)
		browser: 	a ClyFullBrowserMorph(26015232)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>computeFullBounds
	Receiver: a ClyQueryViewMorph(347813888)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(258870272)
		submorphs: 	an Array(a FTTableMorph(31597312))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628906240)
		table: 	a FTTableMorph(31597312)
		browser: 	a ClyFullBrowserMorph(26015232)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>fullBounds
	Receiver: a ClyQueryViewMorph(347813888)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(258870272)
		submorphs: 	an Array(a FTTableMorph(31597312))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628906240)
		table: 	a FTTableMorph(31597312)
		browser: 	a ClyFullBrowserMorph(26015232)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>position:
	Receiver: a ClyQueryViewMorph(347813888)
	Arguments and temporary variables: 
		arg1: 	(13@0)
		tmp1: 	(13.0@0.0)
		tmp2: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(258870272)
		submorphs: 	an Array(a FTTableMorph(31597312))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628906240)
		table: 	a FTTableMorph(31597312)
		browser: 	a ClyFullBrowserMorph(26015232)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>bounds:
	Receiver: a ClyQueryViewMorph(347813888)
	Arguments and temporary variables: 
		arg1: 	(13@0) corner: (21@40)
		tmp1: 	(50@40)
		tmp2: 	(8@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(258870272)
		submorphs: 	an Array(a FTTableMorph(31597312))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628906240)
		table: 	a FTTableMorph(31597312)
		browser: 	a ClyFullBrowserMorph(26015232)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>layoutInBounds:
	Receiver: a ClyQueryViewMorph(347813888)
	Arguments and temporary variables: 
		arg1: 	(13@0) corner: (21@40)
		tmp1: 	(13@0) corner: (21@40)
		tmp2: 	#center
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(258870272)
		submorphs: 	an Array(a FTTableMorph(31597312))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628906240)
		table: 	a FTTableMorph(31597312)
		browser: 	a ClyFullBrowserMorph(26015232)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>layoutProportionallyIn:
	Receiver: a ClyQueryViewMorph(347813888)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(258870272)
		submorphs: 	an Array(a FTTableMorph(31597312))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628906240)
		table: 	a FTTableMorph(31597312)
		browser: 	a ClyFullBrowserMorph(26015232)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(FileLocator)
		desiredSelection: 	a ClyDesiredSelection(FileLocator)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


[ :arg3 | arg3 layoutProportionallyIn: arg2 ] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(258870272)
		arg2: 	(0@0) corner: (50@40)
		arg3: 	a ClyQueryViewMorph(347813888)
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a ProportionalSplitterMorph(483105792) a ProportionalSplitterMorph(997921536)[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 layoutProportionallyIn: arg2 ]
		tmp1: 	7
		tmp2: 	1
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(483105792) a ProportionalSplitterMorph(997921536)[..]

PanelMorph(Morph)>>submorphsDo:
	Receiver: a PanelMorph(258870272)
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 layoutProportionallyIn: arg2 ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(26015232)
		submorphs: 	an Array(a ProportionalSplitterMorph(483105792) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (680215552) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(258870272)
		arg2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
a ProportionalLayout

PanelMorph(Morph)>>doLayoutIn:
	Receiver: a PanelMorph(258870272)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(26015232)
		submorphs: 	an Array(a ProportionalSplitterMorph(483105792) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (680215552) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(258870272)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(26015232)
		submorphs: 	an Array(a ProportionalSplitterMorph(483105792) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (680215552) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>fullBounds
	Receiver: a PanelMorph(258870272)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(26015232)
		submorphs: 	an Array(a ProportionalSplitterMorph(483105792) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (680215552) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBounds.
			tmp2
				ifNil: [ tmp2 := tmp3 copy ]
				ifNotNil: [ tmp2 := tmp2 quickMerge: tmp3 ] ] ] in ClyFullBrowserMorph(Morph)>>submorphBounds
	Receiver: a ClyFullBrowserMorph(26015232)
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(258870272)
		tmp3: 	nil
		tmp2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(406189824) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(1056403456) a PanelMorph(65[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (960682752) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(258870272)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(340549888) a ClyQ[..]
		toolPanel: 	a PanelMorph(653169664)
		toolbar: 	a ClyToolbarMorph(578852352)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(340549888)
		classView: 	a ClyQueryViewMorph(347813888)
		methodGroupView: 	a ClyQueryViewMorph(671899136)
		methodView: 	a ClyQueryViewMorph(66822400)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from inst. side: FileLocator


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ProportionalSplitterMorph(1056403456) a PanelMorph(653169664) a PanelMorph([..]
	Arguments and temporary variables: 
		arg1: 	[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBou[..]
		tmp1: 	3
		tmp2: 	1
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(1056403456) a PanelMorph(653169664) a PanelMorph([..]

ClyFullBrowserMorph(Morph)>>submorphBounds
	Receiver: a ClyFullBrowserMorph(26015232)
	Arguments and temporary variables: 
		tmp2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(406189824) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(1056403456) a PanelMorph(65[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (960682752) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(258870272)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(340549888) a ClyQ[..]
		toolPanel: 	a PanelMorph(653169664)
		toolbar: 	a ClyToolbarMorph(578852352)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(340549888)
		classView: 	a ClyQueryViewMorph(347813888)
		methodGroupView: 	a ClyQueryViewMorph(671899136)
		methodView: 	a ClyQueryViewMorph(66822400)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from inst. side: FileLocator


ClyFullBrowserMorph(Morph)>>privateFullBounds
	Receiver: a ClyFullBrowserMorph(26015232)
	Arguments and temporary variables: 
		tmp1: 	(0@0) corner: (915@620)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(406189824) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(1056403456) a PanelMorph(65[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (960682752) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(258870272)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(340549888) a ClyQ[..]
		toolPanel: 	a PanelMorph(653169664)
		toolbar: 	a ClyToolbarMorph(578852352)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(340549888)
		classView: 	a ClyQueryViewMorph(347813888)
		methodGroupView: 	a ClyQueryViewMorph(671899136)
		methodView: 	a ClyQueryViewMorph(66822400)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from inst. side: FileLocator



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #ifEmpty:
ClyClassIconTableDecorator class(ClyClassTableDecorator class)>>decorateTableCell:of:
ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:of:
ClyClassIconTableDecorator class>>decorateMainTableCell:of:
ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:inContext:
ClyTableDecorationStrategyAnnotation>>decorateMainTableCell:inContext:
[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ] in ClyQueryViewMorph>>decorateMainTableCell:of:
SortedCollection(SequenceableCollection)>>select:thenDo:
ClyTableDecorationStrategyAnnotation class(ClassAnnotation class)>>activeInstancesInContext:do:
ClyQueryViewMorph>>decorateMainTableCell:of:
ClyMainTableColumn>>createCellFor:in:
ClyExpandedDataSource(ClyDataSource)>>cellColumn:row:
(self exposedColumnsRange: tmp3) in FTTableContainerMorph>>updateExposedRows
Interval>>do:
FTTableContainerMorph>>updateExposedRows
FTTableMorph>>resizeAllSubviews
FTTableMorph>>extent:
FTTableMorph(Morph)>>bounds:
FTTableMorph(Morph)>>layoutInBounds:
TableLayout>>layoutTopToBottom:in:
TableLayout>>layout:in:
ClyQueryViewMorph(Morph)>>doLayoutIn:
ClyQueryViewMorph(Morph)>>computeFullBounds
ClyQueryViewMorph(Morph)>>fullBounds
ClyQueryViewMorph(Morph)>>position:
ClyQueryViewMorph(Morph)>>bounds:
ClyQueryViewMorph(Morph)>>layoutInBounds:
ClyQueryViewMorph(Morph)>>layoutProportionallyIn:
[ :arg3 | arg3 layoutProportionallyIn: arg2 ] in ProportionalLayout>>layout:in:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
ProportionalLayout>>layout:in:
PanelMorph(Morph)>>doLayoutIn:
PanelMorph(Morph)>>computeFullBounds
PanelMorph(Morph)>>fullBounds
[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBounds.
			tmp2
				ifNil: [ tmp2 := tmp3 copy ]
				ifNotNil: [ tmp2 := tmp2 quickMerge: tmp3 ] ] ] in ClyFullBrowserMorph(Morph)>>submorphBounds
Array(SequenceableCollection)>>do:
ClyFullBrowserMorph(Morph)>>submorphBounds
ClyFullBrowserMorph(Morph)>>privateFullBounds
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
ClyFullBrowserMorph(Morph)>>changed
ClyFullBrowserMorph(BorderedMorph)>>borderStyle:
SystemWindow>>addMorph:fullFrame:
SystemWindow>>addMorph:frame:
ClyFullBrowserMorph(Morph)>>wrappedInWindow
ClyFullBrowserMorph(Morph)>>openInWindowLabeled:inWorld:
ClyFullBrowserMorph(Morph)>>openInWindowLabeled:
ClyFullBrowserMorph(Morph)>>openInWindow
ClyFullBrowserMorph(ClyBrowserMorph)>>open
ClyFullBrowserMorph class>>openOn:withState:
ClyFullBrowserMorph class>>openWithState:
ClyFullBrowserMorph class>>openOnClass:
FinderClassNode(FinderNode)>>browseClass
FinderClassNode>>browse
FinderClassNode(Object)>>perform:orSendTo:
Cursor normal in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "resolve:" is nil
7 December 2024 7:15:35.794178 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #resolve:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

FileLocator>>resolve
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		path: 	nil
		origin: 	nil


FileLocator>>doesNotUnderstand: #home
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		arg1: 	home
		tmp1: 	nil
	Receiver's instance variables: 
		path: 	nil
		origin: 	nil


Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	nil
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(386796288))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(386796288)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(2.0@27.0) mouseUp 27532313 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673[..]
		arg3: 	a SpToolbarButtonMorph(386796288)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673635840) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673635840) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(2.0@27.0) mouseUp 27532313 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(2.0@27.0) mouseUp 27532313 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(386796288)
	Receiver's instance variables: 
		timeStamp: 	27532313
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2.0@27.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(2.0@27.0) mouseUp 27532313 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(2.0@27.0) mouseUp 27532313 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(60@240.0) corner: (76@256.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(60@240.0) corner: (76@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(60@240) mouseUp 27532313 nil]
		targetOffset: 	(2.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(60@240.0) corner: (76@256.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(60@240.0) corner: (76@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(60@240) mouseUp 27532313 nil]
		targetOffset: 	(2.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(60@240) mouseUp 27532313 nil]
		arg2: 	a SpToolbarButtonMorph(386796288)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(60@240.0) corner: (76@256.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(60@240.0) corner: (76@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(60@240) mouseUp 27532313 nil]
		targetOffset: 	(2.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(60@240) mouseUp 27532313 nil]
	Receiver's instance variables: 
		bounds: 	(60@240.0) corner: (76@256.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(60@240.0) corner: (76@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(60@240) mouseUp 27532313 nil]
		targetOffset: 	(2.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(60@240) mouseUp 27532313 nil]
		tmp1: 	[(60@240) mouseUp 27532313 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(60@240.0) corner: (76@256.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(60@240.0) corner: (76@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(60@240) mouseUp 27532313 nil]
		targetOffset: 	(2.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(60@240) mouseUp 27532313 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27526767
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(465574144)))
		lastAlarmTime: 	27532304
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27526767
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(465574144)))
		lastAlarmTime: 	27532304
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #resolve:
FileLocator>>resolve
FileLocator>>doesNotUnderstand: #home
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "resolve:" is nil
7 December 2024 7:15:37.617027 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #resolve:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

FileLocator>>resolve
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		path: 	nil
		origin: 	nil


FileLocator>>doesNotUnderstand: #home
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		arg1: 	home
		tmp1: 	nil
	Receiver's instance variables: 
		path: 	nil
		origin: 	nil


Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	nil
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(386796288))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(386796288)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(12.0@25.0) mouseUp 27534137 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673[..]
		arg3: 	a SpToolbarButtonMorph(386796288)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673635840) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673635840) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(12.0@25.0) mouseUp 27534137 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(12.0@25.0) mouseUp 27534137 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(386796288)
	Receiver's instance variables: 
		timeStamp: 	27534137
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(12.0@25.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(12.0@25.0) mouseUp 27534137 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(12.0@25.0) mouseUp 27534137 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(70@238.0) corner: (86@254.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(70@238) mouseUp 27534137 nil]
		targetOffset: 	(12.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(70@238.0) corner: (86@254.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(70@238) mouseUp 27534137 nil]
		targetOffset: 	(12.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(70@238) mouseUp 27534137 nil]
		arg2: 	a SpToolbarButtonMorph(386796288)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(70@238.0) corner: (86@254.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(70@238) mouseUp 27534137 nil]
		targetOffset: 	(12.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(70@238) mouseUp 27534137 nil]
	Receiver's instance variables: 
		bounds: 	(70@238.0) corner: (86@254.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(70@238) mouseUp 27534137 nil]
		targetOffset: 	(12.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(70@238) mouseUp 27534137 nil]
		tmp1: 	[(70@238) mouseUp 27534137 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(70@238.0) corner: (86@254.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(70@238) mouseUp 27534137 nil]
		targetOffset: 	(12.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>processEvents
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		tmp1: 	[(70@238) mouseUp 27534137 nil]
	Receiver's instance variables: 
		bounds: 	(70@238.0) corner: (86@254.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(70@238) mouseUp 27534137 nil]
		targetOffset: 	(12.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27526767
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(465574144)))
		lastAlarmTime: 	27534148
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(566076672))
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
		tmp1: 	1
		tmp2: 	1
	Receiver's instance variables: 
an Array(a HandMorph(566076672))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27526767
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(465574144)))
		lastAlarmTime: 	27534148
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27526767
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(465574144)))
		lastAlarmTime: 	27534148
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #resolve:
FileLocator>>resolve
FileLocator>>doesNotUnderstand: #home
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "resolve:" is nil
7 December 2024 7:15:37.993773 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #resolve:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

FileLocator>>resolve
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		path: 	nil
		origin: 	nil


FileLocator>>doesNotUnderstand: #home
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		arg1: 	home
		tmp1: 	nil
	Receiver's instance variables: 
		path: 	nil
		origin: 	nil


Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	nil
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(386796288))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(386796288)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(12.0@25.0) mouseUp 27534517 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673[..]
		arg3: 	a SpToolbarButtonMorph(386796288)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673635840) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673635840) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(12.0@25.0) mouseUp 27534517 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(386796288) a SpToolbarButtonMorph(673[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(12.0@25.0) mouseUp 27534517 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(386796288)
	Receiver's instance variables: 
		timeStamp: 	27534517
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(12.0@25.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(12.0@25.0) mouseUp 27534517 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(386796288)
	Arguments and temporary variables: 
		arg1: 	[(12.0@25.0) mouseUp 27534517 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(514633728)
		submorphs: 	an Array(an AlignmentMorph(1021405184))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (765243392) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(167465984)'Do it'
		iconMorph: 	an ImageMorph(847193856)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(70@238.0) corner: (86@254.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(70@238) mouseUp 27534517 nil]
		targetOffset: 	(12.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(70@238.0) corner: (86@254.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(70@238) mouseUp 27534517 nil]
		targetOffset: 	(12.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(70@238) mouseUp 27534517 nil]
		arg2: 	a SpToolbarButtonMorph(386796288)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(70@238.0) corner: (86@254.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(70@238) mouseUp 27534517 nil]
		targetOffset: 	(12.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(70@238) mouseUp 27534517 nil]
	Receiver's instance variables: 
		bounds: 	(70@238.0) corner: (86@254.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(70@238) mouseUp 27534517 nil]
		targetOffset: 	(12.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(70@238) mouseUp 27534517 nil]
		tmp1: 	[(70@238) mouseUp 27534517 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(70@238.0) corner: (86@254.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(517974272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(70@238) mouseUp 27534517 nil]
		targetOffset: 	(12.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(70@238) mouseUp 27534517 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27526767
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(465574144)))
		lastAlarmTime: 	27534506
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27526767
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(465574144)))
		lastAlarmTime: 	27534506
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #resolve:
FileLocator>>resolve
FileLocator>>doesNotUnderstand: #home
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: FileLocator >> #input
7 December 2024 7:20:36.866569 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

FileLocator(Object)>>doesNotUnderstand: #input
	Receiver: {home}/Code/aoc/2024/day5
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		path: 	Path * 'Code' / 'aoc' / '2024' / 'day5'
		origin: 	#home


FileLocator>>doesNotUnderstand: #input
	Receiver: {home}/Code/aoc/2024/day5
	Arguments and temporary variables: 
		arg1: 	input
		tmp1: 	File @ /home/gravity/Code/aoc/2024/day5
	Receiver's instance variables: 
		path: 	Path * 'Code' / 'aoc' / '2024' / 'day5'
		origin: 	#home


Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(1020712448))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(1020712448)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(31@19) mouseUp 27833398 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(90[..]
		arg3: 	a SpToolbarButtonMorph(1020712448)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(901472768) a SpTool[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(901472768) a SpTool[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(31@19) mouseUp 27833398 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(90[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(31@19) mouseUp 27833398 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(1020712448)
	Receiver's instance variables: 
		timeStamp: 	27833398
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(31@19)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(31@19) mouseUp 27833398 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(31@19) mouseUp 27833398 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(51@219.0) corner: (67@235.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(51@219.0) corner: (67@235.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(51@219) mouseUp 27833398 nil]
		targetOffset: 	(31.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(51@219.0) corner: (67@235.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(51@219.0) corner: (67@235.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(51@219) mouseUp 27833398 nil]
		targetOffset: 	(31.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(51@219) mouseUp 27833398 nil]
		arg2: 	a SpToolbarButtonMorph(1020712448)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(51@219.0) corner: (67@235.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(51@219.0) corner: (67@235.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(51@219) mouseUp 27833398 nil]
		targetOffset: 	(31.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(51@219) mouseUp 27833398 nil]
	Receiver's instance variables: 
		bounds: 	(51@219.0) corner: (67@235.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(51@219.0) corner: (67@235.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(51@219) mouseUp 27833398 nil]
		targetOffset: 	(31.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(51@219) mouseUp 27833398 nil]
		tmp1: 	[(51@219) mouseUp 27833398 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(51@219.0) corner: (67@235.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(51@219.0) corner: (67@235.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(51@219) mouseUp 27833398 nil]
		targetOffset: 	(31.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(51@219) mouseUp 27833398 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27831888
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(506619648)))
		lastAlarmTime: 	27833376
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27831888
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(506619648)))
		lastAlarmTime: 	27833376
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
FileLocator(Object)>>doesNotUnderstand: #input
FileLocator>>doesNotUnderstand: #input
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: FileLocator >> #input
7 December 2024 7:20:38.059414 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

FileLocator(Object)>>doesNotUnderstand: #input
	Receiver: {home}/Code/aoc/2024/day5
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		path: 	Path * 'Code' / 'aoc' / '2024' / 'day5'
		origin: 	#home


FileLocator>>doesNotUnderstand: #input
	Receiver: {home}/Code/aoc/2024/day5
	Arguments and temporary variables: 
		arg1: 	input
		tmp1: 	File @ /home/gravity/Code/aoc/2024/day5
	Receiver's instance variables: 
		path: 	Path * 'Code' / 'aoc' / '2024' / 'day5'
		origin: 	#home


Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(1020712448))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(1020712448)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(21@22) mouseUp 27834578 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(90[..]
		arg3: 	a SpToolbarButtonMorph(1020712448)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(901472768) a SpTool[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(901472768) a SpTool[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(21@22) mouseUp 27834578 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(90[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(21@22) mouseUp 27834578 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(1020712448)
	Receiver's instance variables: 
		timeStamp: 	27834578
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(21@22)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(21@22) mouseUp 27834578 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(21@22) mouseUp 27834578 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27834578 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27834578 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(41@222) mouseUp 27834578 nil]
		arg2: 	a SpToolbarButtonMorph(1020712448)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27834578 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(41@222) mouseUp 27834578 nil]
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27834578 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(41@222) mouseUp 27834578 nil]
		tmp1: 	[(41@222) mouseUp 27834578 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27834578 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(41@222) mouseUp 27834578 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27831888
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(506619648)))
		lastAlarmTime: 	27834567
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27831888
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(506619648)))
		lastAlarmTime: 	27834567
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
FileLocator(Object)>>doesNotUnderstand: #input
FileLocator>>doesNotUnderstand: #input
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: FileLocator >> #input
7 December 2024 7:20:38.48377 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

FileLocator(Object)>>doesNotUnderstand: #input
	Receiver: {home}/Code/aoc/2024/day5
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		path: 	Path * 'Code' / 'aoc' / '2024' / 'day5'
		origin: 	#home


FileLocator>>doesNotUnderstand: #input
	Receiver: {home}/Code/aoc/2024/day5
	Arguments and temporary variables: 
		arg1: 	input
		tmp1: 	File @ /home/gravity/Code/aoc/2024/day5
	Receiver's instance variables: 
		path: 	Path * 'Code' / 'aoc' / '2024' / 'day5'
		origin: 	#home


Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(1020712448))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(1020712448)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(21@22) mouseUp 27835019 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(90[..]
		arg3: 	a SpToolbarButtonMorph(1020712448)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(901472768) a SpTool[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(901472768) a SpTool[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(21@22) mouseUp 27835019 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(90[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(21@22) mouseUp 27835019 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(1020712448)
	Receiver's instance variables: 
		timeStamp: 	27835019
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(21@22)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(21@22) mouseUp 27835019 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(21@22) mouseUp 27835019 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27835019 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27835019 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(41@222) mouseUp 27835019 nil]
		arg2: 	a SpToolbarButtonMorph(1020712448)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27835019 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(41@222) mouseUp 27835019 nil]
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27835019 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(41@222) mouseUp 27835019 nil]
		tmp1: 	[(41@222) mouseUp 27835019 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27835019 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(41@222) mouseUp 27835019 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27831888
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(506619648)))
		lastAlarmTime: 	27835000
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27831888
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(506619648)))
		lastAlarmTime: 	27835000
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
FileLocator(Object)>>doesNotUnderstand: #input
FileLocator>>doesNotUnderstand: #input
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: FileLocator >> #input
7 December 2024 7:20:38.679112 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

FileLocator(Object)>>doesNotUnderstand: #input
	Receiver: {home}/Code/aoc/2024/day5
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		path: 	Path * 'Code' / 'aoc' / '2024' / 'day5'
		origin: 	#home


FileLocator>>doesNotUnderstand: #input
	Receiver: {home}/Code/aoc/2024/day5
	Arguments and temporary variables: 
		arg1: 	input
		tmp1: 	File @ /home/gravity/Code/aoc/2024/day5
	Receiver's instance variables: 
		path: 	Path * 'Code' / 'aoc' / '2024' / 'day5'
		origin: 	#home


Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(1020712448))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(1020712448)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(21@22) mouseUp 27835211 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(90[..]
		arg3: 	a SpToolbarButtonMorph(1020712448)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(901472768) a SpTool[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(901472768) a SpTool[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(21@22) mouseUp 27835211 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(1020712448) a SpToolbarButtonMorph(90[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(21@22) mouseUp 27835211 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(1020712448)
	Receiver's instance variables: 
		timeStamp: 	27835211
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(21@22)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(21@22) mouseUp 27835211 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(1020712448)
	Arguments and temporary variables: 
		arg1: 	[(21@22) mouseUp 27835211 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(557019648)
		submorphs: 	an Array(an AlignmentMorph(1015539968))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (122829312) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(263111680)'Do it'
		iconMorph: 	an ImageMorph(132473600)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27835211 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27835211 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(41@222) mouseUp 27835211 nil]
		arg2: 	a SpToolbarButtonMorph(1020712448)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27835211 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(41@222) mouseUp 27835211 nil]
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27835211 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(41@222) mouseUp 27835211 nil]
		tmp1: 	[(41@222) mouseUp 27835211 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(41@222.0) corner: (57@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(41@222.0) corner: (57@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(433376000)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(41@222) mouseUp 27835211 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(41@222) mouseUp 27835211 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 16 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27831888
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(506619648)))
		lastAlarmTime: 	27835209
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 16 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	27831888
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(506619648)))
		lastAlarmTime: 	27835209
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 16 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
FileLocator(Object)>>doesNotUnderstand: #input
FileLocator>>doesNotUnderstand: #input
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 7:26:24.725863 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	Transcript


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(158.0@58.0) corner: (456.0@91.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(158@58.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(451@85.0) corner: (467@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(451@85.0) corner: (467@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(451@85) mouseUp 28181251 nil]
		targetOffset: 	(293.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(451@85.0) corner: (467@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(451@85.0) corner: (467@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(451@85) mouseUp 28181251 nil]
		targetOffset: 	(293.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(451@85.0) corner: (467@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(451@85.0) corner: (467@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(451@85) mouseUp 28181251 nil]
		targetOffset: 	(293.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(451@85.0) corner: (467@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(451@85.0) corner: (467@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(451@85) mouseUp 28181251 nil]
		targetOffset: 	(293.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(451@85.0) corner: (467@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(451@85.0) corner: (467@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(451@85) mouseUp 28181251 nil]
		targetOffset: 	(293.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 1 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	28177418
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(525540352)))
		lastAlarmTime: 	28181243
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	28177418
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(525540352)))
		lastAlarmTime: 	28181243
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 7:26:24.883212 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	Transcript


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(158.0@58.0) corner: (456.0@91.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(158@58.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(450@85.0) corner: (466@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(450@85.0) corner: (466@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(450@85) mouseUp 28181423 nil]
		targetOffset: 	(292.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(450@85.0) corner: (466@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(450@85.0) corner: (466@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(450@85) mouseUp 28181423 nil]
		targetOffset: 	(292.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(450@85.0) corner: (466@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(450@85.0) corner: (466@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(450@85) mouseUp 28181423 nil]
		targetOffset: 	(292.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(450@85.0) corner: (466@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(450@85.0) corner: (466@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(450@85) mouseUp 28181423 nil]
		targetOffset: 	(292.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(450@85.0) corner: (466@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(450@85.0) corner: (466@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(450@85) mouseUp 28181423 nil]
		targetOffset: 	(292.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 1 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	28177418
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(525540352)))
		lastAlarmTime: 	28181404
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	28177418
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(525540352)))
		lastAlarmTime: 	28181404
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 7:26:25.061051 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	Transcript


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(158.0@58.0) corner: (456.0@91.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(158@58.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(449@85.0) corner: (465@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(449@85.0) corner: (465@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@85) mouseUp 28181599 nil]
		targetOffset: 	(291.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(449@85.0) corner: (465@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(449@85.0) corner: (465@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@85) mouseUp 28181599 nil]
		targetOffset: 	(291.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(449@85.0) corner: (465@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(449@85.0) corner: (465@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@85) mouseUp 28181599 nil]
		targetOffset: 	(291.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(449@85.0) corner: (465@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(449@85.0) corner: (465@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@85) mouseUp 28181599 nil]
		targetOffset: 	(291.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(449@85.0) corner: (465@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(449@85.0) corner: (465@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@85) mouseUp 28181599 nil]
		targetOffset: 	(291.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	28177418
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(525540352)))
		lastAlarmTime: 	28181588
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	28177418
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(525540352)))
		lastAlarmTime: 	28181588
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 7:26:25.222272 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	Transcript


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(158.0@58.0) corner: (456.0@91.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(158@58.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(449@85.0) corner: (465@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(449@85.0) corner: (465@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@85) mouseUp 28181756 nil]
		targetOffset: 	(291.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(449@85.0) corner: (465@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(449@85.0) corner: (465@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@85) mouseUp 28181756 nil]
		targetOffset: 	(291.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(449@85.0) corner: (465@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(449@85.0) corner: (465@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@85) mouseUp 28181756 nil]
		targetOffset: 	(291.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(449@85.0) corner: (465@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(449@85.0) corner: (465@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@85) mouseUp 28181756 nil]
		targetOffset: 	(291.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(449@85.0) corner: (465@101.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(449@85.0) corner: (465@101.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@85) mouseUp 28181756 nil]
		targetOffset: 	(291.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	28177418
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(525540352)))
		lastAlarmTime: 	28181746
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	28177418
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(525540352)))
		lastAlarmTime: 	28181746
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OupsDebuggerSystem>>suspendDebuggedProcess:
7 December 2024 7:26:25.832347 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

OupsDebuggerSystem>>suspendDebuggedProcess:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebuggerSystem>>openDebuggerOnRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		tmp1: 	an OupsDebuggerSelector
	Receiver's instance variables: 
an OupsDebuggerSystem

MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
		arg2: 	an OupsDebuggerSystem
	Receiver's instance variables: 
		activeTranscript: 	Transcript


[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ self signalDebuggerError: arg1 ]
	Receiver's instance variables: 
		outerContext: 	OupsDebuggerSystem>>handleDebugRequest:
		compiledBlock: 	a CompiledBlock: [
	self defaultUIManager
		handleDebugReque[..]
		numArgs: 	0
		receiver: 	an OupsDebuggerSystem


OupsDebuggerSystem>>handleDebugRequest:
	Receiver: an OupsDebuggerSystem
	Arguments and temporary variables: 
		arg1: 	an OupsDebugRequest
	Receiver's instance variables: 
an OupsDebuggerSystem

OupsDebugRequest>>submit
	Receiver: an OupsDebugRequest
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		exception: 	I am an Oups NULL debugging exception
		context: 	Process>>debugWithTitle:
		label: 	'Debug'
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		compiledMethod: 	nil
		preDebugActions: 	an OrderedCollection()
		debugSession: 	a DebugSession


Process>>debugWithTitle:
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Process>>debug
	Receiver: a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	OupsDebuggerSystem>>suspendDebuggedProcess:
		priority: 	40
		myList: 	nil
		name: 	'Morphic UI Process'
		env: 	a WeakArray(nil a Job nil nil nil nil nil nil nil nil nil nil nil nil nil)
		effectiveProcess: 	nil
		terminating: 	false
		level: 	nil
		errorHandler: 	nil


Job>>debug
	Receiver: a Job
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		block: 	[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg[..]
		currentValue: 	3951
		min: 	0
		max: 	137926
		title: 	'Running critics on: SpTableColumn class'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in OupsDebuggerSystem>>suspendDebuggedProcess:
		owner: 	a Set(RSBoxPlot class>>#exampleBoxPlotChangeBoxWidth AbstractResizer[..]
		announcer: 	nil


JobProgressMorph>>debug
	Receiver: a JobProgressMorph(427770368)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(158.0@58.0) corner: (456.0@91.0)
		owner: 	a SystemProgressMorph(110145280)
		submorphs: 	an Array(a StringMorph(708980992)'Running critics on: SpTableCol[..]
		fullBounds: 	(158@58.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (531856128) [other:  (announcer -> an Announcer)]
		bar: 	a JobProgressBarMorph(49665280)
		endValue: 	nil
		hasResult: 	false
		job: 	a Job
		labelMorph: 	a StringMorph(708980992)'Running critics on: SpTableColumn class'
		lastRefresh: 	0
		lock: 	a Semaphore()
		result: 	nil
		startValue: 	nil


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		tmp1: 	0
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#debug
		recipient: 	a JobProgressMorph(427770368)
		valueParameter: 	nil


[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
		arg2: 	#mouseUp
		arg3: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	false
		arg4: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		tmp2: 	false
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	#mouseUp
		arg3: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#mouseUp->a Set(a MorphEventSubscription) )


JobProgressBarMorph(Morph)>>handleMouseUp:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


MouseButtonEvent>>sentTo:
	Receiver: [(362@50) mouseUp 25850459 nil]
	Arguments and temporary variables: 
		arg1: 	a JobProgressBarMorph(49665280)
	Receiver's instance variables: 
		timeStamp: 	25850459
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(362@50)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


JobProgressBarMorph(Morph)>>handleEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


JobProgressBarMorph(Morph)>>handleFocusEvent:
	Receiver: a JobProgressBarMorph(49665280)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(158.0@75.0) corner: (456.0@91.0)
		owner: 	a JobProgressMorph(427770368)
		submorphs: 	an Array(a ProgressBarMorph(350955264) an ImageMorph(661931776))
		fullBounds: 	(158@75.0) corner: (456@91.0)
		color: 	Color transparent
		extension: 	a MorphExtension (442089472) [eventHandler = a MorphicEventHandler] 
		progressBar: 	a ProgressBarMorph(350955264)


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(148@90.0) corner: (164@106.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(148@90.0) corner: (164@106.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(148@90) mouseUp 28182371 nil]
		targetOffset: 	(284.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(148@90.0) corner: (164@106.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(148@90.0) corner: (164@106.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(148@90) mouseUp 28182371 nil]
		targetOffset: 	(284.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		arg2: 	a JobProgressBarMorph(49665280)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(148@90.0) corner: (164@106.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(148@90.0) corner: (164@106.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(148@90) mouseUp 28182371 nil]
		targetOffset: 	(284.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		bounds: 	(148@90.0) corner: (164@106.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(148@90.0) corner: (164@106.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(148@90) mouseUp 28182371 nil]
		targetOffset: 	(284.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
		tmp1: 	[(362@50) mouseUp 25850459 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(148@90.0) corner: (164@106.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(148@90.0) corner: (164@106.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1066708736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(148@90) mouseUp 28182371 nil]
		targetOffset: 	(284.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(362@50) mouseUp 25850459 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 24 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	28177418
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(525540352)))
		lastAlarmTime: 	28182351
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 24 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	28177418
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(525540352)))
		lastAlarmTime: 	28182351
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 24 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


SystemProgressMorph>>refresh
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


SystemProgressMorph>>update:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	#width
		tmp1: 	60
		tmp2: 	true
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


MorphChanged>>deliverTo:
	Receiver: a MorphChanged
	Arguments and temporary variables: 
		arg1: 	a SystemProgressMorph(110145280)
	Receiver's instance variables: 
		morph: 	a JobProgressMorph(427770368)
		selector: 	#width


SystemProgressMorph(Morph)>>handleUpdate:
	Receiver: a SystemProgressMorph(110145280)
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		bounds: 	(146.0@50.0) corner: (468.0@99.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	an Array(a JobProgressMorph(427770368))
		fullBounds: 	(146@50.0) corner: (468@99.0)
		color: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940371456[..]
		extension: 	a MorphExtension (700203776) [other:  (morphicLayerNumber -> 12)[..]
		borderWidth: 	2
		borderColor: 	(Color r: 0.6735092864125122 g: 0.6735092864125122 b: 0.673509[..]
		lock: 	a Semaphore()
		lastRefresh: 	28164032


MessageSend>>value:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)


MessageSend>>cull:cull:
	Receiver: MessageSend(#handleUpdate: -> a SystemProgressMorph(110145280))
	Arguments and temporary variables: 
		arg1: 	a MorphChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		selector: 	#handleUpdate:
		arguments: 	#()
		lookupClass: 	nil
		receiver: 	a SystemProgressMorph(110145280)



--- The full stack ---
OupsDebuggerSystem>>suspendDebuggedProcess:
OupsDebuggerSystem>>openDebuggerOnRequest:
MorphicUIManager>>handleDebugRequest:fromDebuggerSystem:
[
	self defaultUIManager
		handleDebugRequest: arg1
		fromDebuggerSystem: self ] in OupsDebuggerSystem>>handleDebugRequest:
FullBlockClosure(BlockClosure)>>on:do:
OupsDebuggerSystem>>handleDebugRequest:
OupsDebugRequest>>submit
Process>>debugWithTitle:
Process>>debug
Job>>debug
JobProgressMorph>>debug
MorphEventSubscription>>notify:from:
[ :arg4 |
		tmp2 := tmp2 | ((arg4 notify: arg1 from: arg3) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>mouseUp:fromMorph:
JobProgressBarMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
JobProgressBarMorph(Morph)>>handleEvent:
JobProgressBarMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
SystemProgressMorph>>refresh
SystemProgressMorph>>update:
MorphChanged>>deliverTo:
SystemProgressMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
JobProgressMorph(Morph)>>doAnnounce:
JobProgressMorph(Morph)>>changed:
JobProgressMorph>>label:
SystemProgressMorph class>>updateJob:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
FullBlockClosure(BlockClosure)>>on:do:
FullBlockClosure(BlockClosure)>>on:fork:
AnnouncementSubscription(AbstractAnnouncementSubscription)>>deliver:
arg2 at: tmp3 in SubscriptionRegistry>>deliver:to:startingAt:
FullBlockClosure(BlockClosure)>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
Job>>announce:
Job>>announceChange
Job>>currentValue:
[ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] in [ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
[ :arg2 | arg1 value: arg2 value: (tmp2 := tmp2 + 1) ] in Set(Collection)>>withIndexDo:
Set>>do:
Set(Collection)>>withIndexDo:
Set(Collection)>>doWithIndex:
[ :arg4 |
	| tmp7 |
	arg4 max: tmp1.
	self doWithIndex: [ :arg5 :arg6 |
		tmp3 := arg2 isString
			        ifTrue: [
				        arg4 title: arg2.
				        [ :arg7 | arg2 ] ]
			        ifFalse: [ arg2 ].
		(arg6 = 1 or: [
			 arg6 + 1 = tmp1 or: [ (Time millisecondsSince: tmp5) >= arg3 ] ])
			ifTrue: [
				| tmp9 |
				arg4 currentValue: arg6.
				tmp9 := tmp3 cull: arg5.
				tmp4 = (tmp7 := tmp9 ifNil: [ tmp4 ] ifNotNil: [ tmp9 ]) ifFalse: [
					arg4 title: tmp7.
					tmp4 := tmp7 ].
				tmp5 := Time millisecondClockValue ].
		arg1 value: arg5 ] ] in Set(Collection)>>do:displayingProgress:every:
FullBlockClosure(BlockClosure)>>cull:
[ ^ block cull: self ] in [
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in CurrentJob(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[
	self prepareForRunning.
	CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
FullBlockClosure(BlockClosure)>>ensure:
Job>>run
Set(Collection)>>do:displayingProgress:every:
Set(Collection)>>do:displayingProgress:
StRewriterRenrakuApplier class>>obtainCritiquesOf:forRules:
StRewriterRenrakuApplier class>>obtainCritiquesOfAllMethodsForRules:
StRewriterExpressionFinderPresenter>>searchExpression
[ self searchExpression ] in StRewriterExpressionFinderPresenter>>connectPresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
SpPluggableButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpPluggableButtonMorph(PluggableButtonMorph)>>mouseUp:
SpPluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpPluggableButtonMorph(Morph)>>handleEvent:
SpPluggableButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SpLabelPresenter >> #text:
7 December 2024 7:26:49.514351 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

SpLabelPresenter(Object)>>doesNotUnderstand: #text:
	Receiver: a SpLabelPresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	a DebugPointSelectDialogPresenter
		adapter: 	nil
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Label presenter' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ nil ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		label: 	an ObservableValueHolder[ '' ]
		colorAction: 	nil
		backgroundColorAction: 	nil
		italicAction: 	nil
		boldAction: 	nil
		underlineAction: 	nil
		contextMenu: 	an ObservableValueHolder[ nil ]


DebugPointSelectDialogPresenter(SpAbstractMessageDialog)>>label:
	Receiver: a DebugPointSelectDialogPresenter
	Arguments and temporary variables: 
		arg1: 	'The scope of the selected debug point will be set to the inspected o[..]
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ nil ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		parentWindow: 	a WeakArray(nil)
		acceptAction: 	nil
		cancelAction: 	nil
		image: 	nil
		label: 	a SpLabelPresenter
		title: 	'Request'
		initialExtent: 	nil
		acceptLabel: 	nil
		cancelLabel: 	nil
		list: 	a DebugPointTablePresenter
		code: 	a DebugPointCodePresenter
		scope: 	Character
		variableTargetPresenter: 	a DebugPointVariableTargetPresenter


StInspectorSetScopeCommand>>execute
	Receiver: a StInspectorSetScopeCommand
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		context: 	a StObjectInspectorPresenter
		basicName: 	'Set Scope'
		basicDescription: 	'Set Scope: Change the scope of a debug point to this object'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Set Scope)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StInspectorSetScopeCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallDebug
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Set Scope)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StInspectorSetScopeCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallDebug
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Set Scope)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(380260096))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(380260096)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(380260096)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(356.0@13.0) corner: (386.0@33.0)
		owner: 	a Morph(735451136)
		submorphs: 	an Array(an AlignmentMorph(964031488))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (807274752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	nil
		icon: 	Form(16x16x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(65875456)nil
		iconMorph: 	an ImageMorph(787643136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(380260096)
	Arguments and temporary variables: 
		arg1: 	[(378.0@27.0) mouseUp 28206041 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(102517760) a SpToolbarButtonMorph(380[..]
		arg3: 	a SpToolbarButtonMorph(380260096)
	Receiver's instance variables: 
		bounds: 	(356.0@13.0) corner: (386.0@33.0)
		owner: 	a Morph(735451136)
		submorphs: 	an Array(an AlignmentMorph(964031488))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (807274752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	nil
		icon: 	Form(16x16x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(65875456)nil
		iconMorph: 	an ImageMorph(787643136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(102517760) a SpToolbarButtonMorph(380260096) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(102517760) a SpToolbarButtonMorph(380260096) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(380260096)
	Arguments and temporary variables: 
		arg1: 	[(378.0@27.0) mouseUp 28206041 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(102517760) a SpToolbarButtonMorph(380[..]
	Receiver's instance variables: 
		bounds: 	(356.0@13.0) corner: (386.0@33.0)
		owner: 	a Morph(735451136)
		submorphs: 	an Array(an AlignmentMorph(964031488))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (807274752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	nil
		icon: 	Form(16x16x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(65875456)nil
		iconMorph: 	an ImageMorph(787643136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(380260096)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(356.0@13.0) corner: (386.0@33.0)
		owner: 	a Morph(735451136)
		submorphs: 	an Array(an AlignmentMorph(964031488))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (807274752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	nil
		icon: 	Form(16x16x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(65875456)nil
		iconMorph: 	an ImageMorph(787643136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(378.0@27.0) mouseUp 28206041 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(380260096)
	Receiver's instance variables: 
		timeStamp: 	28206041
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(378.0@27.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(380260096)
	Arguments and temporary variables: 
		arg1: 	[(378.0@27.0) mouseUp 28206041 nil]
	Receiver's instance variables: 
		bounds: 	(356.0@13.0) corner: (386.0@33.0)
		owner: 	a Morph(735451136)
		submorphs: 	an Array(an AlignmentMorph(964031488))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (807274752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	nil
		icon: 	Form(16x16x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(65875456)nil
		iconMorph: 	an ImageMorph(787643136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(380260096)
	Arguments and temporary variables: 
		arg1: 	[(378.0@27.0) mouseUp 28206041 nil]
	Receiver's instance variables: 
		bounds: 	(356.0@13.0) corner: (386.0@33.0)
		owner: 	a Morph(735451136)
		submorphs: 	an Array(an AlignmentMorph(964031488))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (807274752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	nil
		icon: 	Form(16x16x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(65875456)nil
		iconMorph: 	an ImageMorph(787643136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(179@233.0) corner: (195@249.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(179@233.0) corner: (195@249.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(672406784)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(179@233) mouseUp 28206041 nil]
		targetOffset: 	(22.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(179@233.0) corner: (195@249.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(179@233.0) corner: (195@249.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(672406784)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(179@233) mouseUp 28206041 nil]
		targetOffset: 	(22.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(179@233) mouseUp 28206041 nil]
		arg2: 	a SpToolbarButtonMorph(380260096)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(179@233.0) corner: (195@249.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(179@233.0) corner: (195@249.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(672406784)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(179@233) mouseUp 28206041 nil]
		targetOffset: 	(22.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(179@233) mouseUp 28206041 nil]
	Receiver's instance variables: 
		bounds: 	(179@233.0) corner: (195@249.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(179@233.0) corner: (195@249.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(672406784)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(179@233) mouseUp 28206041 nil]
		targetOffset: 	(22.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(179@233) mouseUp 28206041 nil]
		tmp1: 	[(179@233) mouseUp 28206041 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(179@233.0) corner: (195@249.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(179@233.0) corner: (195@249.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(672406784)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(179@233) mouseUp 28206041 nil]
		targetOffset: 	(22.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(179@233) mouseUp 28206041 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 6 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	28199071
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	28206016
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 6 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	28199071
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	28206016
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 6 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


MorphicRenderLoop>>doOneCycle
	Receiver: a MorphicRenderLoop
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
a MorphicRenderLoop

MorphicRenderLoop>>doOneCycleWhile:
	Receiver: a MorphicRenderLoop
	Arguments and temporary variables: 
		arg1: 	[ true ]
	Receiver's instance variables: 
a MorphicRenderLoop

[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		activeTranscript: 	nil


[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
	Receiver: [ MorphicRenderLoop new doOneCycleWhile: [ true ] ]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		compiledBlock: 	a CompiledBlock: [ MorphicRenderLoop new doOneCycleWhile: [ [..]
		numArgs: 	0
		receiver: 	a MorphicUIManager



--- The full stack ---
SpLabelPresenter(Object)>>doesNotUnderstand: #text:
DebugPointSelectDialogPresenter(SpAbstractMessageDialog)>>label:
StInspectorSetScopeCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: StObjectInspectorPresenter >> #enableSlotMenuEntries
7 December 2024 7:26:49.917369 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

StObjectInspectorPresenter(Object)>>doesNotUnderstand: #enableSlotMenuEntries
	Receiver: a StObjectInspectorPresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		views: 	a SpNotebookPresenter
		evaluator: 	nil
		model: 	a StInspectorModel($4)
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		header: 	a StHeaderBar
		alivePresentersByPage: 	a WeakSet(a StObjectContextPresenter)
		activateOnSingleClick: 	true


StBreakOnAccessCommand(StDebugPointSlotTargetCommand)>>canBeExecuted
	Receiver: a StBreakOnAccessCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StObjectInspectorPresenter
		basicName: 	'Break on state access'
		basicDescription: 	'Breaks when the selected or any variable is read or written'


SpCommand(CmCommandDecorator)>>canBeExecuted
	Receiver: a SpCommand(Break on state access)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StBreakOnAccessCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallObjects
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Break on state access)
	Arguments and temporary variables: 
		arg1: 	SpToolbarButtonPresenter
		arg2: 	a SpCommand(Break on state access)
		tmp2: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		decoratedCommand: 	a StBreakOnAccessCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallObjects
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


SpCommand>>buildPresenter
	Receiver: a SpCommand(Break on state access)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StBreakOnAccessCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallObjects
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


SpToolbarPresenterBuilder>>visitCommand:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommand(Break on state access)
		tmp2: 	a CmUILeftPositionStrategy
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


SpCommand(CmAbstractCommand)>>acceptVisitor:
	Receiver: a SpCommand(Break on state access)
	Arguments and temporary variables: 
		arg1: 	a SpToolbarPresenterBuilder
	Receiver's instance variables: 
		decoratedCommand: 	a StBreakOnAccessCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallObjects
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ :arg2 | arg2 acceptVisitor: self ] in SpToolbarPresenterBuilder(CmVisitor)>>visitCommandGroup:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommandGroup
		arg2: 	a SpCommand(Break on state access)
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


OrderedCollection>>collect:
	Receiver: an OrderedCollection(a SpCommand(Break on state access) a SpCommand(Break on read) a S[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | arg2 acceptVisitor: self ]
		tmp1: 	an OrderedCollection()
		tmp2: 	6
		tmp3: 	1
	Receiver's instance variables: 
		array: 	an Array(a SpCommand(Break on state access) a SpCommand(Break on rea[..]
		firstIndex: 	1
		lastIndex: 	6


SpToolbarPresenterBuilder(CmVisitor)>>visitCommandGroup:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommandGroup
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


SpToolbarPresenterBuilder>>visitCommandGroup:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


SpCommandGroup(CmAbstractCommandsGroup)>>acceptVisitor:
	Receiver: a SpCommandGroup
	Arguments and temporary variables: 
		arg1: 	a SpToolbarPresenterBuilder
	Receiver's instance variables: 
		decoratedGroup: 	a CmCommandGroup
		displayStrategy: 	a CmUIDisplayAsSubMenu
		isRoot: 	false
		icon: 	Form(13x13x32)
		iconName: 	nil
		toolbarPopoverButton: 	false
		iconProvider: 	a StPharoApplication


SpToolbarPresenterBuilder(CmVisitor)>>visit:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommandGroup
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


[
			| tmp5 |
			tmp5 := self class new.
			tmp5
				toolbarPresenter: self toolbarPresenter newToolbar;
				visit: arg1 copy beToolbarGroup;
				toolbarPresenter ] in SpToolbarPresenterBuilder>>addPopoverButtonFrom:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommandGroup
		tmp1: 	nil
		tmp3: 	nil
		tmp5: 	a SpToolbarPresenterBuilder
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


SpMorphicToolbarPopoverButtonAdapter>>execute
	Receiver: a SpMorphicToolbarPopoverButtonAdapter
	Arguments and temporary variables: 
		tmp2: 	a SpPopoverPresenter
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(102517760))
		announcer: 	nil
		model: 	a SpToolbarPopoverButtonPresenter
		widget: 	a SpToolbarButtonMorph(102517760)
		selector: 	nil
		owner: 	a SpToolbarPopoverButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(102517760)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(326.0@13.0) corner: (356.0@33.0)
		owner: 	a Morph(735451136)
		submorphs: 	an Array(an AlignmentMorph(363281664))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1048273408) [other:  (presenter -> a SpToolbar[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(376664576)nil
		iconMorph: 	an ImageMorph(1015263488)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(102517760)
	Arguments and temporary variables: 
		arg1: 	[(333.0@25.0) mouseUp 28206441 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(102517760) a SpToolbarButtonMorph(380[..]
		arg3: 	a SpToolbarButtonMorph(102517760)
	Receiver's instance variables: 
		bounds: 	(326.0@13.0) corner: (356.0@33.0)
		owner: 	a Morph(735451136)
		submorphs: 	an Array(an AlignmentMorph(363281664))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1048273408) [other:  (presenter -> a SpToolbar[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(376664576)nil
		iconMorph: 	an ImageMorph(1015263488)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(102517760) a SpToolbarButtonMorph(380260096) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(102517760) a SpToolbarButtonMorph(380260096) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(102517760)
	Arguments and temporary variables: 
		arg1: 	[(333.0@25.0) mouseUp 28206441 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(102517760) a SpToolbarButtonMorph(380[..]
	Receiver's instance variables: 
		bounds: 	(326.0@13.0) corner: (356.0@33.0)
		owner: 	a Morph(735451136)
		submorphs: 	an Array(an AlignmentMorph(363281664))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1048273408) [other:  (presenter -> a SpToolbar[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(376664576)nil
		iconMorph: 	an ImageMorph(1015263488)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(102517760)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(326.0@13.0) corner: (356.0@33.0)
		owner: 	a Morph(735451136)
		submorphs: 	an Array(an AlignmentMorph(363281664))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1048273408) [other:  (presenter -> a SpToolbar[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(376664576)nil
		iconMorph: 	an ImageMorph(1015263488)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(333.0@25.0) mouseUp 28206441 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(102517760)
	Receiver's instance variables: 
		timeStamp: 	28206441
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(333.0@25.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(102517760)
	Arguments and temporary variables: 
		arg1: 	[(333.0@25.0) mouseUp 28206441 nil]
	Receiver's instance variables: 
		bounds: 	(326.0@13.0) corner: (356.0@33.0)
		owner: 	a Morph(735451136)
		submorphs: 	an Array(an AlignmentMorph(363281664))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1048273408) [other:  (presenter -> a SpToolbar[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(376664576)nil
		iconMorph: 	an ImageMorph(1015263488)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(102517760)
	Arguments and temporary variables: 
		arg1: 	[(333.0@25.0) mouseUp 28206441 nil]
	Receiver's instance variables: 
		bounds: 	(326.0@13.0) corner: (356.0@33.0)
		owner: 	a Morph(735451136)
		submorphs: 	an Array(an AlignmentMorph(363281664))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1048273408) [other:  (presenter -> a SpToolbar[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(376664576)nil
		iconMorph: 	an ImageMorph(1015263488)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(134@231.0) corner: (150@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(134@231.0) corner: (150@247.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(672406784)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(134@231) mouseUp 28206441 nil]
		targetOffset: 	(7.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(134@231.0) corner: (150@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(134@231.0) corner: (150@247.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(672406784)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(134@231) mouseUp 28206441 nil]
		targetOffset: 	(7.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(134@231) mouseUp 28206441 nil]
		arg2: 	a SpToolbarButtonMorph(102517760)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(134@231.0) corner: (150@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(134@231.0) corner: (150@247.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(672406784)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(134@231) mouseUp 28206441 nil]
		targetOffset: 	(7.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(134@231) mouseUp 28206441 nil]
	Receiver's instance variables: 
		bounds: 	(134@231.0) corner: (150@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(134@231.0) corner: (150@247.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(672406784)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(134@231) mouseUp 28206441 nil]
		targetOffset: 	(7.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(134@231) mouseUp 28206441 nil]
		tmp1: 	[(134@231) mouseUp 28206441 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(134@231.0) corner: (150@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(134@231.0) corner: (150@247.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(672406784)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(134@231) mouseUp 28206441 nil]
		targetOffset: 	(7.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(134@231) mouseUp 28206441 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	28199071
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	28206433
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	28199071
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	28206433
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)



--- The full stack ---
StObjectInspectorPresenter(Object)>>doesNotUnderstand: #enableSlotMenuEntries
StBreakOnAccessCommand(StDebugPointSlotTargetCommand)>>canBeExecuted
SpCommand(CmCommandDecorator)>>canBeExecuted
[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
SpCommand>>buildPresenter
SpToolbarPresenterBuilder>>visitCommand:
SpCommand(CmAbstractCommand)>>acceptVisitor:
[ :arg2 | arg2 acceptVisitor: self ] in SpToolbarPresenterBuilder(CmVisitor)>>visitCommandGroup:
OrderedCollection>>collect:
SpToolbarPresenterBuilder(CmVisitor)>>visitCommandGroup:
SpToolbarPresenterBuilder>>visitCommandGroup:
SpCommandGroup(CmAbstractCommandsGroup)>>acceptVisitor:
SpToolbarPresenterBuilder(CmVisitor)>>visit:
[
			| tmp5 |
			tmp5 := self class new.
			tmp5
				toolbarPresenter: self toolbarPresenter newToolbar;
				visit: arg1 copy beToolbarGroup;
				toolbarPresenter ] in SpToolbarPresenterBuilder>>addPopoverButtonFrom:
SpMorphicToolbarPopoverButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "add:" is nil
7 December 2024 7:44:08.19453 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #add:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(208228352))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(208228352)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
		arg1: 	[(34@29) mouseUp 29244723 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(208228352) a SpToolbarButtonMorph(422[..]
		arg3: 	a SpToolbarButtonMorph(208228352)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(208228352) a SpToolbarButtonMorph(422079488) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(208228352) a SpToolbarButtonMorph(422079488) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
		arg1: 	[(34@29) mouseUp 29244723 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(208228352) a SpToolbarButtonMorph(422[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(34@29) mouseUp 29244723 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(208228352)
	Receiver's instance variables: 
		timeStamp: 	29244723
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(34@29)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
		arg1: 	[(34@29) mouseUp 29244723 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
		arg1: 	[(34@29) mouseUp 29244723 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(61@281.0) corner: (77@297.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(61@281.0) corner: (77@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(61@281) mouseUp 29244723 nil]
		targetOffset: 	(34.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(61@281.0) corner: (77@297.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(61@281.0) corner: (77@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(61@281) mouseUp 29244723 nil]
		targetOffset: 	(34.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(61@281) mouseUp 29244723 nil]
		arg2: 	a SpToolbarButtonMorph(208228352)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(61@281.0) corner: (77@297.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(61@281.0) corner: (77@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(61@281) mouseUp 29244723 nil]
		targetOffset: 	(34.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(61@281) mouseUp 29244723 nil]
	Receiver's instance variables: 
		bounds: 	(61@281.0) corner: (77@297.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(61@281.0) corner: (77@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(61@281) mouseUp 29244723 nil]
		targetOffset: 	(34.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(61@281) mouseUp 29244723 nil]
		tmp1: 	[(61@281) mouseUp 29244723 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(61@281.0) corner: (77@297.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(61@281.0) corner: (77@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(61@281) mouseUp 29244723 nil]
		targetOffset: 	(34.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(61@281) mouseUp 29244723 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29243403
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(474394624)))
		lastAlarmTime: 	29244702
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29243403
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(474394624)))
		lastAlarmTime: 	29244702
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #add:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "add:" is nil
7 December 2024 7:44:10.932613 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #add:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(208228352))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(208228352)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
		arg1: 	[(7@19) mouseUp 29247451 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(208228352) a SpToolbarButtonMorph(422[..]
		arg3: 	a SpToolbarButtonMorph(208228352)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(208228352) a SpToolbarButtonMorph(422079488) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(208228352) a SpToolbarButtonMorph(422079488) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
		arg1: 	[(7@19) mouseUp 29247451 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(208228352) a SpToolbarButtonMorph(422[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(7@19) mouseUp 29247451 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(208228352)
	Receiver's instance variables: 
		timeStamp: 	29247451
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(7@19)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
		arg1: 	[(7@19) mouseUp 29247451 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
		arg1: 	[(7@19) mouseUp 29247451 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(34@271.0) corner: (50@287.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@271.0) corner: (50@287.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@271) mouseUp 29247451 nil]
		targetOffset: 	(7.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(34@271.0) corner: (50@287.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@271.0) corner: (50@287.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@271) mouseUp 29247451 nil]
		targetOffset: 	(7.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@271) mouseUp 29247451 nil]
		arg2: 	a SpToolbarButtonMorph(208228352)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(34@271.0) corner: (50@287.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@271.0) corner: (50@287.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@271) mouseUp 29247451 nil]
		targetOffset: 	(7.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@271) mouseUp 29247451 nil]
	Receiver's instance variables: 
		bounds: 	(34@271.0) corner: (50@287.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@271.0) corner: (50@287.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@271) mouseUp 29247451 nil]
		targetOffset: 	(7.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@271) mouseUp 29247451 nil]
		tmp1: 	[(34@271) mouseUp 29247451 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(34@271.0) corner: (50@287.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@271.0) corner: (50@287.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@271) mouseUp 29247451 nil]
		targetOffset: 	(7.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(34@271) mouseUp 29247451 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29243403
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(474394624)))
		lastAlarmTime: 	29247440
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29243403
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(474394624)))
		lastAlarmTime: 	29247440
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #add:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "add:" is nil
7 December 2024 7:44:11.087464 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #add:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(208228352))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(208228352)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
		arg1: 	[(7@19) mouseUp 29247632 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(208228352) a SpToolbarButtonMorph(422[..]
		arg3: 	a SpToolbarButtonMorph(208228352)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(208228352) a SpToolbarButtonMorph(422079488) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(208228352) a SpToolbarButtonMorph(422079488) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
		arg1: 	[(7@19) mouseUp 29247632 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(208228352) a SpToolbarButtonMorph(422[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(7@19) mouseUp 29247632 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(208228352)
	Receiver's instance variables: 
		timeStamp: 	29247632
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(7@19)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
		arg1: 	[(7@19) mouseUp 29247632 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(208228352)
	Arguments and temporary variables: 
		arg1: 	[(7@19) mouseUp 29247632 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(370114304)
		submorphs: 	an Array(an AlignmentMorph(688656640))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (131932160) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(872574976)'Do it'
		iconMorph: 	an ImageMorph(390372096)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(34@271.0) corner: (50@287.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@271.0) corner: (50@287.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@271) mouseUp 29247632 nil]
		targetOffset: 	(7.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(34@271.0) corner: (50@287.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@271.0) corner: (50@287.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@271) mouseUp 29247632 nil]
		targetOffset: 	(7.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@271) mouseUp 29247632 nil]
		arg2: 	a SpToolbarButtonMorph(208228352)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(34@271.0) corner: (50@287.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@271.0) corner: (50@287.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@271) mouseUp 29247632 nil]
		targetOffset: 	(7.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@271) mouseUp 29247632 nil]
	Receiver's instance variables: 
		bounds: 	(34@271.0) corner: (50@287.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@271.0) corner: (50@287.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@271) mouseUp 29247632 nil]
		targetOffset: 	(7.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@271) mouseUp 29247632 nil]
		tmp1: 	[(34@271) mouseUp 29247632 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(34@271.0) corner: (50@287.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@271.0) corner: (50@287.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(773485056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@271) mouseUp 29247632 nil]
		targetOffset: 	(7.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(34@271) mouseUp 29247632 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 5 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29243403
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(474394624)))
		lastAlarmTime: 	29247612
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 5 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29243403
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(474394624)))
		lastAlarmTime: 	29247612
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 5 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #add:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:53:21.828972 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(490944000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(490944000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(36@32) mouseUp 29798359 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
		arg3: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(36@32) mouseUp 29798359 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(36@32) mouseUp 29798359 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		timeStamp: 	29798359
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(36@32)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(36@32) mouseUp 29798359 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(36@32) mouseUp 29798359 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(48@247.0) corner: (64@263.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(48@247.0) corner: (64@263.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(48@247) mouseOver 29798359 nil]
		targetOffset: 	(37.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(48@247.0) corner: (64@263.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(48@247.0) corner: (64@263.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(48@247) mouseOver 29798359 nil]
		targetOffset: 	(37.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(48@247) mouseUp 29798359 nil]
		arg2: 	a SpToolbarButtonMorph(490944000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(48@247.0) corner: (64@263.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(48@247.0) corner: (64@263.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(48@247) mouseOver 29798359 nil]
		targetOffset: 	(37.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(48@247) mouseUp 29798359 nil]
	Receiver's instance variables: 
		bounds: 	(48@247.0) corner: (64@263.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(48@247.0) corner: (64@263.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(48@247) mouseOver 29798359 nil]
		targetOffset: 	(37.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(48@247) mouseUp 29798359 nil]
		tmp1: 	[(48@247) mouseUp 29798359 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(48@247.0) corner: (64@263.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(48@247.0) corner: (64@263.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(48@247) mouseOver 29798359 nil]
		targetOffset: 	(37.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>processEvents
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		tmp1: 	[(48@247) mouseUp 29798359 nil]
	Receiver's instance variables: 
		bounds: 	(48@247.0) corner: (64@263.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(48@247.0) corner: (64@263.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(48@247) mouseOver 29798359 nil]
		targetOffset: 	(37.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29797163
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	29798359
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 2 items


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(566076672))
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
		tmp1: 	1
		tmp2: 	1
	Receiver's instance variables: 
an Array(a HandMorph(566076672))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29797163
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	29798359
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 3 items


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29797163
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	29798359
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 3 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:53:22.454701 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(490944000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(490944000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(24@28) mouseUp 29798974 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
		arg3: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(24@28) mouseUp 29798974 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(24@28) mouseUp 29798974 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		timeStamp: 	29798974
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(24@28)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(24@28) mouseUp 29798974 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(24@28) mouseUp 29798974 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(36@243.0) corner: (52@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(36@243.0) corner: (52@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(36@243) mouseUp 29798974 nil]
		targetOffset: 	(24.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(36@243.0) corner: (52@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(36@243.0) corner: (52@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(36@243) mouseUp 29798974 nil]
		targetOffset: 	(24.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(36@243) mouseUp 29798974 nil]
		arg2: 	a SpToolbarButtonMorph(490944000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(36@243.0) corner: (52@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(36@243.0) corner: (52@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(36@243) mouseUp 29798974 nil]
		targetOffset: 	(24.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(36@243) mouseUp 29798974 nil]
	Receiver's instance variables: 
		bounds: 	(36@243.0) corner: (52@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(36@243.0) corner: (52@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(36@243) mouseUp 29798974 nil]
		targetOffset: 	(24.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(36@243) mouseUp 29798974 nil]
		tmp1: 	[(36@243) mouseUp 29798974 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(36@243.0) corner: (52@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(36@243.0) corner: (52@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(36@243) mouseUp 29798974 nil]
		targetOffset: 	(24.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(36@243) mouseUp 29798974 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29797163
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	29798963
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29797163
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	29798963
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:53:29.366641 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(490944000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(490944000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(17@16) mouseUp 29805884 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
		arg3: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(17@16) mouseUp 29805884 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(17@16) mouseUp 29805884 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		timeStamp: 	29805884
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(17@16)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(17@16) mouseUp 29805884 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(17@16) mouseUp 29805884 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(29@231.0) corner: (45@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@231) mouseUp 29805884 nil]
		targetOffset: 	(17.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(29@231.0) corner: (45@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@231) mouseUp 29805884 nil]
		targetOffset: 	(17.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(29@231) mouseUp 29805884 nil]
		arg2: 	a SpToolbarButtonMorph(490944000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(29@231.0) corner: (45@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@231) mouseUp 29805884 nil]
		targetOffset: 	(17.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(29@231) mouseUp 29805884 nil]
	Receiver's instance variables: 
		bounds: 	(29@231.0) corner: (45@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@231) mouseUp 29805884 nil]
		targetOffset: 	(17.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(29@231) mouseUp 29805884 nil]
		tmp1: 	[(29@231) mouseUp 29805884 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(29@231.0) corner: (45@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@231) mouseUp 29805884 nil]
		targetOffset: 	(17.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>processEvents
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		tmp1: 	[(29@231) mouseUp 29805884 nil]
	Receiver's instance variables: 
		bounds: 	(29@231.0) corner: (45@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@231) mouseUp 29805884 nil]
		targetOffset: 	(17.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29805108
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	29805895
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(566076672))
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
		tmp1: 	1
		tmp2: 	1
	Receiver's instance variables: 
an Array(a HandMorph(566076672))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29805108
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	29805895
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29805108
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	29805895
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:53:29.877726 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(490944000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(490944000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(21@16) mouseUp 29806407 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
		arg3: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(21@16) mouseUp 29806407 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(21@16) mouseUp 29806407 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		timeStamp: 	29806407
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(21@16)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(21@16) mouseUp 29806407 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(21@16) mouseUp 29806407 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(33@231.0) corner: (49@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@231.0) corner: (49@247.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@231) mouseUp 29806407 nil]
		targetOffset: 	(21.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(33@231.0) corner: (49@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@231.0) corner: (49@247.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@231) mouseUp 29806407 nil]
		targetOffset: 	(21.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(33@231) mouseUp 29806407 nil]
		arg2: 	a SpToolbarButtonMorph(490944000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(33@231.0) corner: (49@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@231.0) corner: (49@247.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@231) mouseUp 29806407 nil]
		targetOffset: 	(21.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(33@231) mouseUp 29806407 nil]
	Receiver's instance variables: 
		bounds: 	(33@231.0) corner: (49@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@231.0) corner: (49@247.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@231) mouseUp 29806407 nil]
		targetOffset: 	(21.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(33@231) mouseUp 29806407 nil]
		tmp1: 	[(33@231) mouseUp 29806407 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(33@231.0) corner: (49@247.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@231.0) corner: (49@247.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@231) mouseUp 29806407 nil]
		targetOffset: 	(21.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(33@231) mouseUp 29806407 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29805108
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	29806388
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29805108
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	29806388
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:53:30.328777 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(490944000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(490944000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(22@17) mouseUp 29806866 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
		arg3: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(22@17) mouseUp 29806866 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(22@17) mouseUp 29806866 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		timeStamp: 	29806866
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(22@17)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(22@17) mouseUp 29806866 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(22@17) mouseUp 29806866 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(34@232.0) corner: (50@248.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@232.0) corner: (50@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@232) mouseUp 29806866 nil]
		targetOffset: 	(22.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(34@232.0) corner: (50@248.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@232.0) corner: (50@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@232) mouseUp 29806866 nil]
		targetOffset: 	(22.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@232) mouseUp 29806866 nil]
		arg2: 	a SpToolbarButtonMorph(490944000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(34@232.0) corner: (50@248.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@232.0) corner: (50@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@232) mouseUp 29806866 nil]
		targetOffset: 	(22.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@232) mouseUp 29806866 nil]
	Receiver's instance variables: 
		bounds: 	(34@232.0) corner: (50@248.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@232.0) corner: (50@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@232) mouseUp 29806866 nil]
		targetOffset: 	(22.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@232) mouseUp 29806866 nil]
		tmp1: 	[(34@232) mouseUp 29806866 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(34@232.0) corner: (50@248.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@232.0) corner: (50@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@232) mouseUp 29806866 nil]
		targetOffset: 	(22.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(34@232) mouseUp 29806866 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29805108
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	29806845
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29805108
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	29806845
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:53:30.591384 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(490944000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(490944000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(22@17) mouseUp 29807110 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
		arg3: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(22@17) mouseUp 29807110 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(22@17) mouseUp 29807110 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		timeStamp: 	29807110
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(22@17)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(22@17) mouseUp 29807110 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(22@17) mouseUp 29807110 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(34@232.0) corner: (50@248.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@232.0) corner: (50@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@232) mouseUp 29807110 nil]
		targetOffset: 	(22.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(34@232.0) corner: (50@248.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@232.0) corner: (50@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@232) mouseUp 29807110 nil]
		targetOffset: 	(22.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@232) mouseUp 29807110 nil]
		arg2: 	a SpToolbarButtonMorph(490944000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(34@232.0) corner: (50@248.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@232.0) corner: (50@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@232) mouseUp 29807110 nil]
		targetOffset: 	(22.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@232) mouseUp 29807110 nil]
	Receiver's instance variables: 
		bounds: 	(34@232.0) corner: (50@248.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@232.0) corner: (50@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@232) mouseUp 29807110 nil]
		targetOffset: 	(22.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@232) mouseUp 29807110 nil]
		tmp1: 	[(34@232) mouseUp 29807110 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(34@232.0) corner: (50@248.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@232.0) corner: (50@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(598260736)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@232) mouseUp 29807110 nil]
		targetOffset: 	(22.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(34@232) mouseUp 29807110 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29805108
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	29807099
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29805108
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	29807099
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:53:52.522264 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(490944000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(490944000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(26@26) mouseUp 29829040 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
		arg3: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(26@26) mouseUp 29829040 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(26@26) mouseUp 29829040 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		timeStamp: 	29829040
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(26@26)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(26@26) mouseUp 29829040 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(26@26) mouseUp 29829040 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(38@241.0) corner: (54@257.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@241.0) corner: (54@257.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@241) mouseUp 29829040 nil]
		targetOffset: 	(27.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(38@241.0) corner: (54@257.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@241.0) corner: (54@257.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@241) mouseUp 29829040 nil]
		targetOffset: 	(27.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@241) mouseUp 29829040 nil]
		arg2: 	a SpToolbarButtonMorph(490944000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(38@241.0) corner: (54@257.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@241.0) corner: (54@257.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@241) mouseUp 29829040 nil]
		targetOffset: 	(27.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@241) mouseUp 29829040 nil]
	Receiver's instance variables: 
		bounds: 	(38@241.0) corner: (54@257.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@241.0) corner: (54@257.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@241) mouseUp 29829040 nil]
		targetOffset: 	(27.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@241) mouseUp 29829040 nil]
		tmp1: 	[(38@241) mouseUp 29829040 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(38@241.0) corner: (54@257.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@241.0) corner: (54@257.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@241) mouseUp 29829040 nil]
		targetOffset: 	(27.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(38@241) mouseUp 29829040 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29827575
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(166632448)))
		lastAlarmTime: 	29829029
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29827575
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(166632448)))
		lastAlarmTime: 	29829029
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:54:02.497737 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(490944000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(490944000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(2@28) mouseUp 29839025 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
		arg3: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(2@28) mouseUp 29839025 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(2@28) mouseUp 29839025 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		timeStamp: 	29839025
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(2@28)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(2@28) mouseUp 29839025 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(2@28) mouseUp 29839025 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(14@243.0) corner: (30@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(14@243) mouseUp 29839025 nil]
		targetOffset: 	(2.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(14@243.0) corner: (30@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(14@243) mouseUp 29839025 nil]
		targetOffset: 	(2.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(14@243) mouseUp 29839025 nil]
		arg2: 	a SpToolbarButtonMorph(490944000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(14@243.0) corner: (30@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(14@243) mouseUp 29839025 nil]
		targetOffset: 	(2.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(14@243) mouseUp 29839025 nil]
	Receiver's instance variables: 
		bounds: 	(14@243.0) corner: (30@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(14@243) mouseUp 29839025 nil]
		targetOffset: 	(2.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(14@243) mouseUp 29839025 nil]
		tmp1: 	[(14@243) mouseUp 29839025 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(14@243.0) corner: (30@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(14@243) mouseUp 29839025 nil]
		targetOffset: 	(2.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>processEvents
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		tmp1: 	[(14@243) mouseUp 29839025 nil]
	Receiver's instance variables: 
		bounds: 	(14@243.0) corner: (30@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(14@243) mouseUp 29839025 nil]
		targetOffset: 	(2.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29837995
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(166632448)))
		lastAlarmTime: 	29839025
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 5 items


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(566076672))
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
		tmp1: 	1
		tmp2: 	1
	Receiver's instance variables: 
an Array(a HandMorph(566076672))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29837995
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(166632448)))
		lastAlarmTime: 	29839025
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 5 items


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29837995
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(166632448)))
		lastAlarmTime: 	29839025
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 5 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:54:02.90232 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(490944000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(490944000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(17@29) mouseUp 29839420 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
		arg3: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(17@29) mouseUp 29839420 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(17@29) mouseUp 29839420 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		timeStamp: 	29839420
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(17@29)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(17@29) mouseUp 29839420 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(17@29) mouseUp 29839420 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(29@244.0) corner: (45@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(29@244.0) corner: (45@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@244) mouseUp 29839420 nil]
		targetOffset: 	(17.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(29@244.0) corner: (45@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(29@244.0) corner: (45@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@244) mouseUp 29839420 nil]
		targetOffset: 	(17.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(29@244) mouseUp 29839420 nil]
		arg2: 	a SpToolbarButtonMorph(490944000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(29@244.0) corner: (45@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(29@244.0) corner: (45@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@244) mouseUp 29839420 nil]
		targetOffset: 	(17.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(29@244) mouseUp 29839420 nil]
	Receiver's instance variables: 
		bounds: 	(29@244.0) corner: (45@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(29@244.0) corner: (45@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@244) mouseUp 29839420 nil]
		targetOffset: 	(17.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(29@244) mouseUp 29839420 nil]
		tmp1: 	[(29@244) mouseUp 29839420 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(29@244.0) corner: (45@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(29@244.0) corner: (45@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@244) mouseUp 29839420 nil]
		targetOffset: 	(17.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(29@244) mouseUp 29839420 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 1 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29837995
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(166632448)))
		lastAlarmTime: 	29839412
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29837995
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(166632448)))
		lastAlarmTime: 	29839412
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:54:15.029532 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(490944000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(490944000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(28@29) mouseUp 29851546 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
		arg3: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(28@29) mouseUp 29851546 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(28@29) mouseUp 29851546 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		timeStamp: 	29851546
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(28@29)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(28@29) mouseUp 29851546 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(28@29) mouseUp 29851546 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(40@244.0) corner: (56@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@244.0) corner: (56@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@244) mouseUp 29851546 nil]
		targetOffset: 	(28.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(40@244.0) corner: (56@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@244.0) corner: (56@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@244) mouseUp 29851546 nil]
		targetOffset: 	(28.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(40@244) mouseUp 29851546 nil]
		arg2: 	a SpToolbarButtonMorph(490944000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(40@244.0) corner: (56@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@244.0) corner: (56@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@244) mouseUp 29851546 nil]
		targetOffset: 	(28.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(40@244) mouseUp 29851546 nil]
	Receiver's instance variables: 
		bounds: 	(40@244.0) corner: (56@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@244.0) corner: (56@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@244) mouseUp 29851546 nil]
		targetOffset: 	(28.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(40@244) mouseUp 29851546 nil]
		tmp1: 	[(40@244) mouseUp 29851546 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(40@244.0) corner: (56@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@244.0) corner: (56@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@244) mouseUp 29851546 nil]
		targetOffset: 	(28.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(40@244) mouseUp 29851546 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29837995
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(166632448)))
		lastAlarmTime: 	29851538
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29837995
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(166632448)))
		lastAlarmTime: 	29851538
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:55:00.060654 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(490944000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(490944000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(27@29) mouseUp 29896580 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
		arg3: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(27@29) mouseUp 29896580 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(27@29) mouseUp 29896580 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		timeStamp: 	29896580
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(27@29)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(27@29) mouseUp 29896580 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(27@29) mouseUp 29896580 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(39@244.0) corner: (55@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(39@244.0) corner: (55@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(39@244) mouseOver 29896580 nil]
		targetOffset: 	(24.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(39@244.0) corner: (55@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(39@244.0) corner: (55@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(39@244) mouseOver 29896580 nil]
		targetOffset: 	(24.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(39@244) mouseUp 29896580 nil]
		arg2: 	a SpToolbarButtonMorph(490944000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(39@244.0) corner: (55@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(39@244.0) corner: (55@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(39@244) mouseOver 29896580 nil]
		targetOffset: 	(24.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(39@244) mouseUp 29896580 nil]
	Receiver's instance variables: 
		bounds: 	(39@244.0) corner: (55@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(39@244.0) corner: (55@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(39@244) mouseOver 29896580 nil]
		targetOffset: 	(24.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(39@244) mouseUp 29896580 nil]
		tmp1: 	[(39@244) mouseUp 29896580 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(39@244.0) corner: (55@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(39@244.0) corner: (55@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(39@244) mouseOver 29896580 nil]
		targetOffset: 	(24.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>processEvents
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		tmp1: 	[(39@244) mouseUp 29896580 nil]
	Receiver's instance variables: 
		bounds: 	(39@244.0) corner: (55@260.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(39@244.0) corner: (55@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(39@244) mouseOver 29896580 nil]
		targetOffset: 	(24.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29895734
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(166632448)))
		lastAlarmTime: 	29896591
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 5 items


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(566076672))
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
		tmp1: 	1
		tmp2: 	1
	Receiver's instance variables: 
an Array(a HandMorph(566076672))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29895734
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(166632448)))
		lastAlarmTime: 	29896591
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 5 items


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29895734
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(166632448)))
		lastAlarmTime: 	29896591
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 5 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:55:00.550307 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(490944000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(490944000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(24@28) mouseUp 29897068 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
		arg3: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286513920) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(24@28) mouseUp 29897068 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(490944000) a SpToolbarButtonMorph(286[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(24@28) mouseUp 29897068 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(490944000)
	Receiver's instance variables: 
		timeStamp: 	29897068
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(24@28)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(24@28) mouseUp 29897068 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(490944000)
	Arguments and temporary variables: 
		arg1: 	[(24@28) mouseUp 29897068 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(782459136)
		submorphs: 	an Array(an AlignmentMorph(922615296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (941829376) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(518916608)'Do it'
		iconMorph: 	an ImageMorph(343368704)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(36@243.0) corner: (52@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(36@243.0) corner: (52@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(36@243) mouseUp 29897068 nil]
		targetOffset: 	(23.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(36@243.0) corner: (52@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(36@243.0) corner: (52@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(36@243) mouseUp 29897068 nil]
		targetOffset: 	(23.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(36@243) mouseUp 29897068 nil]
		arg2: 	a SpToolbarButtonMorph(490944000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(36@243.0) corner: (52@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(36@243.0) corner: (52@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(36@243) mouseUp 29897068 nil]
		targetOffset: 	(23.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(36@243) mouseUp 29897068 nil]
	Receiver's instance variables: 
		bounds: 	(36@243.0) corner: (52@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(36@243.0) corner: (52@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(36@243) mouseUp 29897068 nil]
		targetOffset: 	(23.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(36@243) mouseUp 29897068 nil]
		tmp1: 	[(36@243) mouseUp 29897068 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(36@243.0) corner: (52@259.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(36@243.0) corner: (52@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(972896256)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(36@243) mouseUp 29897068 nil]
		targetOffset: 	(23.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(36@243) mouseUp 29897068 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29895734
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(166632448)))
		lastAlarmTime: 	29897058
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29895734
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(166632448)))
		lastAlarmTime: 	29897058
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:55:24.198304 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(118081024))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(118081024)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(21.0@32.0) mouseUp 29920727 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815[..]
		arg3: 	a SpToolbarButtonMorph(118081024)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815276288) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815276288) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(21.0@32.0) mouseUp 29920727 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(21.0@32.0) mouseUp 29920727 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(118081024)
	Receiver's instance variables: 
		timeStamp: 	29920727
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(21.0@32.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(21.0@32.0) mouseUp 29920727 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(21.0@32.0) mouseUp 29920727 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(33@269.0) corner: (49@285.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@269.0) corner: (49@285.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@269) mouseUp 29920727 nil]
		targetOffset: 	(20.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(33@269.0) corner: (49@285.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@269.0) corner: (49@285.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@269) mouseUp 29920727 nil]
		targetOffset: 	(20.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(33@269) mouseUp 29920727 nil]
		arg2: 	a SpToolbarButtonMorph(118081024)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(33@269.0) corner: (49@285.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@269.0) corner: (49@285.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@269) mouseUp 29920727 nil]
		targetOffset: 	(20.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(33@269) mouseUp 29920727 nil]
	Receiver's instance variables: 
		bounds: 	(33@269.0) corner: (49@285.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@269.0) corner: (49@285.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@269) mouseUp 29920727 nil]
		targetOffset: 	(20.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(33@269) mouseUp 29920727 nil]
		tmp1: 	[(33@269) mouseUp 29920727 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(33@269.0) corner: (49@285.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@269.0) corner: (49@285.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@269) mouseUp 29920727 nil]
		targetOffset: 	(20.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(33@269) mouseUp 29920727 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29895734
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(846615552)))
		lastAlarmTime: 	29920706
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29895734
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(846615552)))
		lastAlarmTime: 	29920706
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:55:24.777345 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(118081024))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(118081024)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(21.0@33.0) mouseUp 29921308 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815[..]
		arg3: 	a SpToolbarButtonMorph(118081024)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815276288) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815276288) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(21.0@33.0) mouseUp 29921308 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(21.0@33.0) mouseUp 29921308 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(118081024)
	Receiver's instance variables: 
		timeStamp: 	29921308
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(21.0@33.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(21.0@33.0) mouseUp 29921308 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(21.0@33.0) mouseUp 29921308 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(33@270.0) corner: (49@286.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@270.0) corner: (49@286.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@270) mouseUp 29921308 nil]
		targetOffset: 	(21.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(33@270.0) corner: (49@286.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@270.0) corner: (49@286.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@270) mouseUp 29921308 nil]
		targetOffset: 	(21.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(33@270) mouseUp 29921308 nil]
		arg2: 	a SpToolbarButtonMorph(118081024)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(33@270.0) corner: (49@286.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@270.0) corner: (49@286.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@270) mouseUp 29921308 nil]
		targetOffset: 	(21.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(33@270) mouseUp 29921308 nil]
	Receiver's instance variables: 
		bounds: 	(33@270.0) corner: (49@286.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@270.0) corner: (49@286.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@270) mouseUp 29921308 nil]
		targetOffset: 	(21.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(33@270) mouseUp 29921308 nil]
		tmp1: 	[(33@270) mouseUp 29921308 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(33@270.0) corner: (49@286.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@270.0) corner: (49@286.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@270) mouseUp 29921308 nil]
		targetOffset: 	(21.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(33@270) mouseUp 29921308 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29895734
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(846615552)))
		lastAlarmTime: 	29921286
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29895734
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(846615552)))
		lastAlarmTime: 	29921286
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:55:25.386941 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(118081024))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(118081024)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(21.0@33.0) mouseUp 29921922 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815[..]
		arg3: 	a SpToolbarButtonMorph(118081024)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815276288) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815276288) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(21.0@33.0) mouseUp 29921922 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(21.0@33.0) mouseUp 29921922 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(118081024)
	Receiver's instance variables: 
		timeStamp: 	29921922
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(21.0@33.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(21.0@33.0) mouseUp 29921922 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(21.0@33.0) mouseUp 29921922 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(33@270.0) corner: (49@286.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@270.0) corner: (49@286.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@270) mouseUp 29921922 nil]
		targetOffset: 	(21.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(33@270.0) corner: (49@286.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@270.0) corner: (49@286.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@270) mouseUp 29921922 nil]
		targetOffset: 	(21.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(33@270) mouseUp 29921922 nil]
		arg2: 	a SpToolbarButtonMorph(118081024)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(33@270.0) corner: (49@286.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@270.0) corner: (49@286.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@270) mouseUp 29921922 nil]
		targetOffset: 	(21.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(33@270) mouseUp 29921922 nil]
	Receiver's instance variables: 
		bounds: 	(33@270.0) corner: (49@286.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@270.0) corner: (49@286.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@270) mouseUp 29921922 nil]
		targetOffset: 	(21.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(33@270) mouseUp 29921922 nil]
		tmp1: 	[(33@270) mouseUp 29921922 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(33@270.0) corner: (49@286.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(33@270.0) corner: (49@286.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@270) mouseUp 29921922 nil]
		targetOffset: 	(21.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(33@270) mouseUp 29921922 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29895734
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(846615552)))
		lastAlarmTime: 	29921901
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29895734
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(846615552)))
		lastAlarmTime: 	29921901
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #parts:
7 December 2024 7:55:33.279097 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #parts:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
		parts: 	#('47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53[..]
		rolers: 	nil
		bolers: 	nil
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(118081024))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(118081024)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(5.0@21.0) mouseUp 29929798 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815[..]
		arg3: 	a SpToolbarButtonMorph(118081024)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815276288) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815276288) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(5.0@21.0) mouseUp 29929798 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(5.0@21.0) mouseUp 29929798 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(118081024)
	Receiver's instance variables: 
		timeStamp: 	29929798
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(5.0@21.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(5.0@21.0) mouseUp 29929798 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(5.0@21.0) mouseUp 29929798 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(17@258.0) corner: (33@274.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(17@258.0) corner: (33@274.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(17@258) mouseOver 29929798 nil]
		targetOffset: 	(6.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(17@258.0) corner: (33@274.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(17@258.0) corner: (33@274.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(17@258) mouseOver 29929798 nil]
		targetOffset: 	(6.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(17@258) mouseUp 29929798 nil]
		arg2: 	a SpToolbarButtonMorph(118081024)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(17@258.0) corner: (33@274.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(17@258.0) corner: (33@274.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(17@258) mouseOver 29929798 nil]
		targetOffset: 	(6.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(17@258) mouseUp 29929798 nil]
	Receiver's instance variables: 
		bounds: 	(17@258.0) corner: (33@274.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(17@258.0) corner: (33@274.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(17@258) mouseOver 29929798 nil]
		targetOffset: 	(6.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(17@258) mouseUp 29929798 nil]
		tmp1: 	[(17@258) mouseUp 29929798 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(17@258.0) corner: (33@274.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(17@258.0) corner: (33@274.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(17@258) mouseOver 29929798 nil]
		targetOffset: 	(6.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>processEvents
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		tmp1: 	[(17@258) mouseUp 29929798 nil]
	Receiver's instance variables: 
		bounds: 	(17@258.0) corner: (33@274.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(17@258.0) corner: (33@274.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(17@258) mouseOver 29929798 nil]
		targetOffset: 	(6.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29924658
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(846615552)))
		lastAlarmTime: 	29929809
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(566076672))
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
		tmp1: 	1
		tmp2: 	1
	Receiver's instance variables: 
an Array(a HandMorph(566076672))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29924658
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(846615552)))
		lastAlarmTime: 	29929809
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29924658
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(846615552)))
		lastAlarmTime: 	29929809
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #parts:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #substring:
7 December 2024 7:56:02.151278 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #substring:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(118081024))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(118081024)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(19@11) mouseUp 29958679 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815[..]
		arg3: 	a SpToolbarButtonMorph(118081024)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815276288) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815276288) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(19@11) mouseUp 29958679 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(19@11) mouseUp 29958679 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(118081024)
	Receiver's instance variables: 
		timeStamp: 	29958679
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(19@11)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(19@11) mouseUp 29958679 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(19@11) mouseUp 29958679 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(31@248.0) corner: (47@264.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(31@248.0) corner: (47@264.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(31@248) mouseOver 29958679 nil]
		targetOffset: 	(19.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(31@248.0) corner: (47@264.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(31@248.0) corner: (47@264.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(31@248) mouseOver 29958679 nil]
		targetOffset: 	(19.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(31@248) mouseUp 29958679 nil]
		arg2: 	a SpToolbarButtonMorph(118081024)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(31@248.0) corner: (47@264.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(31@248.0) corner: (47@264.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(31@248) mouseOver 29958679 nil]
		targetOffset: 	(19.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(31@248) mouseUp 29958679 nil]
	Receiver's instance variables: 
		bounds: 	(31@248.0) corner: (47@264.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(31@248.0) corner: (47@264.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(31@248) mouseOver 29958679 nil]
		targetOffset: 	(19.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(31@248) mouseUp 29958679 nil]
		tmp1: 	[(31@248) mouseUp 29958679 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(31@248.0) corner: (47@264.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(31@248.0) corner: (47@264.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(31@248) mouseOver 29958679 nil]
		targetOffset: 	(19.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>processEvents
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		tmp1: 	[(31@248) mouseUp 29958679 nil]
	Receiver's instance variables: 
		bounds: 	(31@248.0) corner: (47@264.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(31@248.0) corner: (47@264.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(31@248) mouseOver 29958679 nil]
		targetOffset: 	(19.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29957584
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(846615552)))
		lastAlarmTime: 	29958679
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(566076672))
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
		tmp1: 	1
		tmp2: 	1
	Receiver's instance variables: 
an Array(a HandMorph(566076672))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29957584
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(846615552)))
		lastAlarmTime: 	29958679
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29957584
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(846615552)))
		lastAlarmTime: 	29958679
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #substring:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #substring:
7 December 2024 7:56:02.706369 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #substring:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(118081024))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(118081024)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(20@31) mouseUp 29959239 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815[..]
		arg3: 	a SpToolbarButtonMorph(118081024)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815276288) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815276288) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(20@31) mouseUp 29959239 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(118081024) a SpToolbarButtonMorph(815[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(20@31) mouseUp 29959239 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(118081024)
	Receiver's instance variables: 
		timeStamp: 	29959239
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(20@31)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(20@31) mouseUp 29959239 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(118081024)
	Arguments and temporary variables: 
		arg1: 	[(20@31) mouseUp 29959239 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(329963008)
		submorphs: 	an Array(an AlignmentMorph(1017853952))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1001634304) [balloonText]  [other:  (presenter[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(217437952)'Do it'
		iconMorph: 	an ImageMorph(344775168)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(32@268.0) corner: (48@284.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(32@268.0) corner: (48@284.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(32@268) mouseUp 29959239 nil]
		targetOffset: 	(20.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(32@268.0) corner: (48@284.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(32@268.0) corner: (48@284.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(32@268) mouseUp 29959239 nil]
		targetOffset: 	(20.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(32@268) mouseUp 29959239 nil]
		arg2: 	a SpToolbarButtonMorph(118081024)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(32@268.0) corner: (48@284.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(32@268.0) corner: (48@284.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(32@268) mouseUp 29959239 nil]
		targetOffset: 	(20.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(32@268) mouseUp 29959239 nil]
	Receiver's instance variables: 
		bounds: 	(32@268.0) corner: (48@284.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(32@268.0) corner: (48@284.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(32@268) mouseUp 29959239 nil]
		targetOffset: 	(20.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(32@268) mouseUp 29959239 nil]
		tmp1: 	[(32@268) mouseUp 29959239 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(32@268.0) corner: (48@284.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(32@268.0) corner: (48@284.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(200905984)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(32@268) mouseUp 29959239 nil]
		targetOffset: 	(20.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(32@268) mouseUp 29959239 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29957584
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(846615552)))
		lastAlarmTime: 	29959214
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29957584
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(846615552)))
		lastAlarmTime: 	29959214
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #substring:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: ByteString >> #substring:
7 December 2024 7:56:36.478544 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #substring:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(746920448))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(746920448)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(22.0@9.0) mouseUp 29993006 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(867[..]
		arg3: 	a SpToolbarButtonMorph(746920448)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(86744832) a SpToolba[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(86744832) a SpToolba[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(22.0@9.0) mouseUp 29993006 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(867[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(22.0@9.0) mouseUp 29993006 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(746920448)
	Receiver's instance variables: 
		timeStamp: 	29993006
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(22.0@9.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(22.0@9.0) mouseUp 29993006 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(22.0@9.0) mouseUp 29993006 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(42@196.0) corner: (58@212.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(42@196.0) corner: (58@212.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(42@196) mouseUp 29993006 nil]
		targetOffset: 	(23.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(42@196.0) corner: (58@212.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(42@196.0) corner: (58@212.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(42@196) mouseUp 29993006 nil]
		targetOffset: 	(23.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(42@196) mouseUp 29993006 nil]
		arg2: 	a SpToolbarButtonMorph(746920448)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(42@196.0) corner: (58@212.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(42@196.0) corner: (58@212.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(42@196) mouseUp 29993006 nil]
		targetOffset: 	(23.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(42@196) mouseUp 29993006 nil]
	Receiver's instance variables: 
		bounds: 	(42@196.0) corner: (58@212.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(42@196.0) corner: (58@212.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(42@196) mouseUp 29993006 nil]
		targetOffset: 	(23.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(42@196) mouseUp 29993006 nil]
		tmp1: 	[(42@196) mouseUp 29993006 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(42@196.0) corner: (58@212.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(42@196.0) corner: (58@212.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(42@196) mouseUp 29993006 nil]
		targetOffset: 	(23.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(42@196) mouseUp 29993006 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29972461
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(737924864)))
		lastAlarmTime: 	29992984
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	29972461
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(737924864)))
		lastAlarmTime: 	29992984
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #substring:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #includes:
7 December 2024 7:56:54.160448 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #includes:
	Receiver: $|
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
$|

ByteString(String)>>substrings:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
		arg1: 	$|
		tmp1: 	a WriteStream
		tmp2: 	nil
		tmp3: 	205
		tmp4: 	$4
		tmp5: 	1
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(746920448))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(746920448)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(19.0@19.0) mouseUp 30010690 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(867[..]
		arg3: 	a SpToolbarButtonMorph(746920448)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(86744832) a SpToolba[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(86744832) a SpToolba[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(19.0@19.0) mouseUp 30010690 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(867[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(19.0@19.0) mouseUp 30010690 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(746920448)
	Receiver's instance variables: 
		timeStamp: 	30010690
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(19.0@19.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(19.0@19.0) mouseUp 30010690 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(19.0@19.0) mouseUp 30010690 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(39@206.0) corner: (55@222.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(39@206.0) corner: (55@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(39@206) mouseUp 30010690 nil]
		targetOffset: 	(19.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(39@206.0) corner: (55@222.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(39@206.0) corner: (55@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(39@206) mouseUp 30010690 nil]
		targetOffset: 	(19.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(39@206) mouseUp 30010690 nil]
		arg2: 	a SpToolbarButtonMorph(746920448)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(39@206.0) corner: (55@222.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(39@206.0) corner: (55@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(39@206) mouseUp 30010690 nil]
		targetOffset: 	(19.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(39@206) mouseUp 30010690 nil]
	Receiver's instance variables: 
		bounds: 	(39@206.0) corner: (55@222.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(39@206.0) corner: (55@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(39@206) mouseUp 30010690 nil]
		targetOffset: 	(19.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(39@206) mouseUp 30010690 nil]
		tmp1: 	[(39@206) mouseUp 30010690 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(39@206.0) corner: (55@222.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(39@206.0) corner: (55@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(39@206) mouseUp 30010690 nil]
		targetOffset: 	(19.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(39@206) mouseUp 30010690 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 2 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30008286
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(737924864)))
		lastAlarmTime: 	30010679
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 2 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30008286
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(737924864)))
		lastAlarmTime: 	30010679
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 2 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
Character(Object)>>doesNotUnderstand: #includes:
ByteString(String)>>substrings:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #includes:
7 December 2024 7:56:54.736486 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #includes:
	Receiver: $|
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
$|

ByteString(String)>>substrings:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
		arg1: 	$|
		tmp1: 	a WriteStream
		tmp2: 	nil
		tmp3: 	205
		tmp4: 	$4
		tmp5: 	1
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(746920448))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(746920448)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(20.0@19.0) mouseUp 30011272 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(867[..]
		arg3: 	a SpToolbarButtonMorph(746920448)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(86744832) a SpToolba[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(86744832) a SpToolba[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(20.0@19.0) mouseUp 30011272 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(867[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(20.0@19.0) mouseUp 30011272 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(746920448)
	Receiver's instance variables: 
		timeStamp: 	30011272
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(20.0@19.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(20.0@19.0) mouseUp 30011272 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(20.0@19.0) mouseUp 30011272 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(40@206.0) corner: (56@222.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@206.0) corner: (56@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@206) mouseUp 30011272 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(40@206.0) corner: (56@222.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@206.0) corner: (56@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@206) mouseUp 30011272 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(40@206) mouseUp 30011272 nil]
		arg2: 	a SpToolbarButtonMorph(746920448)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(40@206.0) corner: (56@222.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@206.0) corner: (56@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@206) mouseUp 30011272 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(40@206) mouseUp 30011272 nil]
	Receiver's instance variables: 
		bounds: 	(40@206.0) corner: (56@222.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@206.0) corner: (56@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@206) mouseUp 30011272 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(40@206) mouseUp 30011272 nil]
		tmp1: 	[(40@206) mouseUp 30011272 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(40@206.0) corner: (56@222.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@206.0) corner: (56@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@206) mouseUp 30011272 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(40@206) mouseUp 30011272 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30008286
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(737924864)))
		lastAlarmTime: 	30011251
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30008286
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(737924864)))
		lastAlarmTime: 	30011251
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
Character(Object)>>doesNotUnderstand: #includes:
ByteString(String)>>substrings:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #includes:
7 December 2024 7:56:54.906445 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #includes:
	Receiver: $|
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
$|

ByteString(String)>>substrings:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
		arg1: 	$|
		tmp1: 	a WriteStream
		tmp2: 	nil
		tmp3: 	205
		tmp4: 	$4
		tmp5: 	1
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(746920448))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(746920448)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(20.0@20.0) mouseUp 30011452 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(867[..]
		arg3: 	a SpToolbarButtonMorph(746920448)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(86744832) a SpToolba[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(86744832) a SpToolba[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(20.0@20.0) mouseUp 30011452 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(746920448) a SpToolbarButtonMorph(867[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(20.0@20.0) mouseUp 30011452 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(746920448)
	Receiver's instance variables: 
		timeStamp: 	30011452
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(20.0@20.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(20.0@20.0) mouseUp 30011452 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(746920448)
	Arguments and temporary variables: 
		arg1: 	[(20.0@20.0) mouseUp 30011452 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(377649664)
		submorphs: 	an Array(an AlignmentMorph(306297856))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (317898752) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1060094976)'Do it'
		iconMorph: 	an ImageMorph(430568192)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(40@207.0) corner: (56@223.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@207.0) corner: (56@223.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@207) mouseUp 30011452 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(40@207.0) corner: (56@223.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@207.0) corner: (56@223.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@207) mouseUp 30011452 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(40@207) mouseUp 30011452 nil]
		arg2: 	a SpToolbarButtonMorph(746920448)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(40@207.0) corner: (56@223.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@207.0) corner: (56@223.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@207) mouseUp 30011452 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(40@207) mouseUp 30011452 nil]
	Receiver's instance variables: 
		bounds: 	(40@207.0) corner: (56@223.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@207.0) corner: (56@223.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@207) mouseUp 30011452 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(40@207) mouseUp 30011452 nil]
		tmp1: 	[(40@207) mouseUp 30011452 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(40@207.0) corner: (56@223.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(40@207.0) corner: (56@223.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(911585792)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(40@207) mouseUp 30011452 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(40@207) mouseUp 30011452 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 51 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30008286
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(737924864)))
		lastAlarmTime: 	30011438
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 51 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30008286
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(737924864)))
		lastAlarmTime: 	30011438
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 51 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
Character(Object)>>doesNotUnderstand: #includes:
ByteString(String)>>substrings:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #+
7 December 2024 8:00:14.35771 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #+
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(15.0@15.0) mouseUp 30210876 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(15.0@15.0) mouseUp 30210876 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(15.0@15.0) mouseUp 30210876 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30210876
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(15.0@15.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(15.0@15.0) mouseUp 30210876 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(15.0@15.0) mouseUp 30210876 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30210876 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30210876 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(113@125) mouseUp 30210876 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30210876 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(113@125) mouseUp 30210876 nil]
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30210876 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(113@125) mouseUp 30210876 nil]
		tmp1: 	[(113@125) mouseUp 30210876 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30210876 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(113@125) mouseUp 30210876 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30208677
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30210868
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30208677
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30210868
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #+
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #+
7 December 2024 8:00:14.908795 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #+
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(15.0@15.0) mouseUp 30211428 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(15.0@15.0) mouseUp 30211428 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(15.0@15.0) mouseUp 30211428 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30211428
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(15.0@15.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(15.0@15.0) mouseUp 30211428 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(15.0@15.0) mouseUp 30211428 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30211428 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30211428 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(113@125) mouseUp 30211428 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30211428 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(113@125) mouseUp 30211428 nil]
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30211428 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(113@125) mouseUp 30211428 nil]
		tmp1: 	[(113@125) mouseUp 30211428 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30211428 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(113@125) mouseUp 30211428 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30208677
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30211421
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30208677
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30211421
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #+
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #+
7 December 2024 8:00:15.150855 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #+
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(15.0@15.0) mouseUp 30211683 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(15.0@15.0) mouseUp 30211683 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(15.0@15.0) mouseUp 30211683 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30211683
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(15.0@15.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(15.0@15.0) mouseUp 30211683 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(15.0@15.0) mouseUp 30211683 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30211683 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30211683 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(113@125) mouseUp 30211683 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30211683 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(113@125) mouseUp 30211683 nil]
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30211683 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(113@125) mouseUp 30211683 nil]
		tmp1: 	[(113@125) mouseUp 30211683 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(113@125.0) corner: (129@141.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(113@125.0) corner: (129@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(113@125) mouseUp 30211683 nil]
		targetOffset: 	(15.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(113@125) mouseUp 30211683 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 13 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30208677
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30211668
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 13 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30208677
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30211668
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 13 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #+
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #,
7 December 2024 8:00:45.105831 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #,
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(17.0@5.0) mouseUp 30241625 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(17.0@5.0) mouseUp 30241625 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(17.0@5.0) mouseUp 30241625 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30241625
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(17.0@5.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(17.0@5.0) mouseUp 30241625 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(17.0@5.0) mouseUp 30241625 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(32@98.0) corner: (48@114.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(32@98.0) corner: (48@114.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(32@98) mouseUp 30241625 nil]
		targetOffset: 	(17.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(32@98.0) corner: (48@114.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(32@98.0) corner: (48@114.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(32@98) mouseUp 30241625 nil]
		targetOffset: 	(17.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(32@98) mouseUp 30241625 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(32@98.0) corner: (48@114.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(32@98.0) corner: (48@114.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(32@98) mouseUp 30241625 nil]
		targetOffset: 	(17.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(32@98) mouseUp 30241625 nil]
	Receiver's instance variables: 
		bounds: 	(32@98.0) corner: (48@114.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(32@98.0) corner: (48@114.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(32@98) mouseUp 30241625 nil]
		targetOffset: 	(17.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(32@98) mouseUp 30241625 nil]
		tmp1: 	[(32@98) mouseUp 30241625 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(32@98.0) corner: (48@114.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(32@98.0) corner: (48@114.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(32@98) mouseUp 30241625 nil]
		targetOffset: 	(17.0@0.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(32@98) mouseUp 30241625 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30239512
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30241614
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30239512
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30241614
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #,
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #,
7 December 2024 8:00:45.919036 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #,
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(12.0@24.0) mouseUp 30242447 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(12.0@24.0) mouseUp 30242447 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(12.0@24.0) mouseUp 30242447 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30242447
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(12.0@24.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(12.0@24.0) mouseUp 30242447 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(12.0@24.0) mouseUp 30242447 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(27@117.0) corner: (43@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(27@117.0) corner: (43@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(27@117) mouseUp 30242447 nil]
		targetOffset: 	(11.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(27@117.0) corner: (43@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(27@117.0) corner: (43@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(27@117) mouseUp 30242447 nil]
		targetOffset: 	(11.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(27@117) mouseUp 30242447 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(27@117.0) corner: (43@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(27@117.0) corner: (43@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(27@117) mouseUp 30242447 nil]
		targetOffset: 	(11.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(27@117) mouseUp 30242447 nil]
	Receiver's instance variables: 
		bounds: 	(27@117.0) corner: (43@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(27@117.0) corner: (43@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(27@117) mouseUp 30242447 nil]
		targetOffset: 	(11.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(27@117) mouseUp 30242447 nil]
		tmp1: 	[(27@117) mouseUp 30242447 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(27@117.0) corner: (43@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(27@117.0) corner: (43@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(27@117) mouseUp 30242447 nil]
		targetOffset: 	(11.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(27@117) mouseUp 30242447 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 4 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30239512
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30242431
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 4 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30239512
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30242431
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 4 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #,
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #,
7 December 2024 8:01:21.394534 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #,
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(19.0@30.0) mouseUp 30277924 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(19.0@30.0) mouseUp 30277924 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(19.0@30.0) mouseUp 30277924 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30277924
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(19.0@30.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(19.0@30.0) mouseUp 30277924 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(19.0@30.0) mouseUp 30277924 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(34@123.0) corner: (50@139.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@123.0) corner: (50@139.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(1061924864)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@123) mouseUp 30277924 nil]
		targetOffset: 	(20.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(34@123.0) corner: (50@139.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@123.0) corner: (50@139.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(1061924864)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@123) mouseUp 30277924 nil]
		targetOffset: 	(20.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@123) mouseUp 30277924 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(34@123.0) corner: (50@139.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@123.0) corner: (50@139.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(1061924864)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@123) mouseUp 30277924 nil]
		targetOffset: 	(20.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@123) mouseUp 30277924 nil]
	Receiver's instance variables: 
		bounds: 	(34@123.0) corner: (50@139.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@123.0) corner: (50@139.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(1061924864)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@123) mouseUp 30277924 nil]
		targetOffset: 	(20.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@123) mouseUp 30277924 nil]
		tmp1: 	[(34@123) mouseUp 30277924 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(34@123.0) corner: (50@139.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@123.0) corner: (50@139.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(1061924864)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@123) mouseUp 30277924 nil]
		targetOffset: 	(20.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(34@123) mouseUp 30277924 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 3 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30275697
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	30277903
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 3 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30275697
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	30277903
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 3 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #,
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #lf
7 December 2024 8:01:28.897199 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #lf
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@23.0) mouseUp 30285431 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@23.0) mouseUp 30285431 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(23.0@23.0) mouseUp 30285431 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30285431
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(23.0@23.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@23.0) mouseUp 30285431 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@23.0) mouseUp 30285431 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30285431 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30285431 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@116) mouseUp 30285431 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30285431 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@116) mouseUp 30285431 nil]
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30285431 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@116) mouseUp 30285431 nil]
		tmp1: 	[(38@116) mouseUp 30285431 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30285431 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(38@116) mouseUp 30285431 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30283557
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30285405
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30283557
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30285405
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #lf
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #lf
7 December 2024 8:01:29.394194 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #lf
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@23.0) mouseUp 30285923 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@23.0) mouseUp 30285923 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(23.0@23.0) mouseUp 30285923 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30285923
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(23.0@23.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@23.0) mouseUp 30285923 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@23.0) mouseUp 30285923 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30285923 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30285923 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@116) mouseUp 30285923 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30285923 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@116) mouseUp 30285923 nil]
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30285923 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@116) mouseUp 30285923 nil]
		tmp1: 	[(38@116) mouseUp 30285923 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30285923 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(38@116) mouseUp 30285923 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30283557
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30285912
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30283557
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30285912
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #lf
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #lf
7 December 2024 8:01:29.578126 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #lf
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@23.0) mouseUp 30286102 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@23.0) mouseUp 30286102 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(23.0@23.0) mouseUp 30286102 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30286102
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(23.0@23.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@23.0) mouseUp 30286102 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@23.0) mouseUp 30286102 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30286102 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30286102 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@116) mouseUp 30286102 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30286102 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@116) mouseUp 30286102 nil]
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30286102 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@116) mouseUp 30286102 nil]
		tmp1: 	[(38@116) mouseUp 30286102 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(38@116.0) corner: (54@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@116.0) corner: (54@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@116) mouseUp 30286102 nil]
		targetOffset: 	(23.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(38@116) mouseUp 30286102 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 54 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30283557
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30286094
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 54 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30283557
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30286094
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 54 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #lf
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #,
7 December 2024 8:01:57.63564 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #,
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(9.0@16.0) mouseUp 30314158 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(9.0@16.0) mouseUp 30314158 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(9.0@16.0) mouseUp 30314158 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30314158
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(9.0@16.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(9.0@16.0) mouseUp 30314158 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(9.0@16.0) mouseUp 30314158 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(24@109.0) corner: (40@125.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(24@109) mouseUp 30314158 nil]
		targetOffset: 	(9.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(24@109.0) corner: (40@125.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(24@109) mouseUp 30314158 nil]
		targetOffset: 	(9.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(24@109) mouseUp 30314158 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(24@109.0) corner: (40@125.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(24@109) mouseUp 30314158 nil]
		targetOffset: 	(9.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(24@109) mouseUp 30314158 nil]
	Receiver's instance variables: 
		bounds: 	(24@109.0) corner: (40@125.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(24@109) mouseUp 30314158 nil]
		targetOffset: 	(9.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(24@109) mouseUp 30314158 nil]
		tmp1: 	[(24@109) mouseUp 30314158 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(24@109.0) corner: (40@125.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(24@109) mouseUp 30314158 nil]
		targetOffset: 	(9.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>processEvents
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		tmp1: 	[(24@109) mouseUp 30314158 nil]
	Receiver's instance variables: 
		bounds: 	(24@109.0) corner: (40@125.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(24@109) mouseUp 30314158 nil]
		targetOffset: 	(9.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30313056
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30314169
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(566076672))
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
		tmp1: 	1
		tmp2: 	1
	Receiver's instance variables: 
an Array(a HandMorph(566076672))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30313056
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30314169
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30313056
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30314169
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
Character(Object)>>doesNotUnderstand: #,
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #,
7 December 2024 8:01:58.113842 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #,
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(12.0@24.0) mouseUp 30314636 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(12.0@24.0) mouseUp 30314636 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(12.0@24.0) mouseUp 30314636 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30314636
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(12.0@24.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(12.0@24.0) mouseUp 30314636 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(12.0@24.0) mouseUp 30314636 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(27@117.0) corner: (43@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(27@117.0) corner: (43@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(27@117) mouseUp 30314636 nil]
		targetOffset: 	(12.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(27@117.0) corner: (43@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(27@117.0) corner: (43@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(27@117) mouseUp 30314636 nil]
		targetOffset: 	(12.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(27@117) mouseUp 30314636 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(27@117.0) corner: (43@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(27@117.0) corner: (43@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(27@117) mouseUp 30314636 nil]
		targetOffset: 	(12.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(27@117) mouseUp 30314636 nil]
	Receiver's instance variables: 
		bounds: 	(27@117.0) corner: (43@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(27@117.0) corner: (43@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(27@117) mouseUp 30314636 nil]
		targetOffset: 	(12.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(27@117) mouseUp 30314636 nil]
		tmp1: 	[(27@117) mouseUp 30314636 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(27@117.0) corner: (43@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(27@117.0) corner: (43@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(27@117) mouseUp 30314636 nil]
		targetOffset: 	(12.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(27@117) mouseUp 30314636 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 1 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30313056
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30314626
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30313056
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30314626
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #,
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #,
7 December 2024 8:01:58.384651 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #,
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(13.0@23.0) mouseUp 30314909 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(13.0@23.0) mouseUp 30314909 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(13.0@23.0) mouseUp 30314909 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30314909
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(13.0@23.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(13.0@23.0) mouseUp 30314909 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(13.0@23.0) mouseUp 30314909 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(28@116.0) corner: (44@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(28@116.0) corner: (44@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(28@116) mouseUp 30314909 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(28@116.0) corner: (44@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(28@116.0) corner: (44@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(28@116) mouseUp 30314909 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(28@116) mouseUp 30314909 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(28@116.0) corner: (44@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(28@116.0) corner: (44@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(28@116) mouseUp 30314909 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(28@116) mouseUp 30314909 nil]
	Receiver's instance variables: 
		bounds: 	(28@116.0) corner: (44@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(28@116.0) corner: (44@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(28@116) mouseUp 30314909 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(28@116) mouseUp 30314909 nil]
		tmp1: 	[(28@116) mouseUp 30314909 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(28@116.0) corner: (44@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(28@116.0) corner: (44@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(28@116) mouseUp 30314909 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(28@116) mouseUp 30314909 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 1 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30313056
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30314898
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30313056
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30314898
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #,
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #,
7 December 2024 8:01:58.531287 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #,
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(13.0@23.0) mouseUp 30315066 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(13.0@23.0) mouseUp 30315066 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(13.0@23.0) mouseUp 30315066 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30315066
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(13.0@23.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(13.0@23.0) mouseUp 30315066 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(13.0@23.0) mouseUp 30315066 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(28@116.0) corner: (44@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(28@116.0) corner: (44@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(28@116) mouseUp 30315066 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(28@116.0) corner: (44@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(28@116.0) corner: (44@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(28@116) mouseUp 30315066 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(28@116) mouseUp 30315066 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(28@116.0) corner: (44@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(28@116.0) corner: (44@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(28@116) mouseUp 30315066 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(28@116) mouseUp 30315066 nil]
	Receiver's instance variables: 
		bounds: 	(28@116.0) corner: (44@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(28@116.0) corner: (44@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(28@116) mouseUp 30315066 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(28@116) mouseUp 30315066 nil]
		tmp1: 	[(28@116) mouseUp 30315066 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(28@116.0) corner: (44@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(28@116.0) corner: (44@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(28@116) mouseUp 30315066 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(28@116) mouseUp 30315066 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 1 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30313056
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30315040
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30313056
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30315040
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #,
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #,
7 December 2024 8:01:58.693284 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #,
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(14.0@23.0) mouseUp 30315213 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(14.0@23.0) mouseUp 30315213 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(14.0@23.0) mouseUp 30315213 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30315213
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(14.0@23.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(14.0@23.0) mouseUp 30315213 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(14.0@23.0) mouseUp 30315213 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(29@116.0) corner: (45@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(29@116.0) corner: (45@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@116) mouseUp 30315213 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(29@116.0) corner: (45@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(29@116.0) corner: (45@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@116) mouseUp 30315213 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(29@116) mouseUp 30315213 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(29@116.0) corner: (45@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(29@116.0) corner: (45@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@116) mouseUp 30315213 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(29@116) mouseUp 30315213 nil]
	Receiver's instance variables: 
		bounds: 	(29@116.0) corner: (45@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(29@116.0) corner: (45@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@116) mouseUp 30315213 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(29@116) mouseUp 30315213 nil]
		tmp1: 	[(29@116) mouseUp 30315213 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(29@116.0) corner: (45@132.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(29@116.0) corner: (45@132.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(29@116) mouseUp 30315213 nil]
		targetOffset: 	(13.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(29@116) mouseUp 30315213 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 80 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30313056
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30315203
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 80 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30313056
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30315203
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 86 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #,
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #includes:
7 December 2024 8:02:03.963769 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #includes:
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

ByteString(String)>>substrings:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
		arg1: 	Character lf
		tmp1: 	a WriteStream
		tmp2: 	nil
		tmp3: 	205
		tmp4: 	$4
		tmp5: 	1
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(16.0@20.0) mouseUp 30320496 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(16.0@20.0) mouseUp 30320496 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(16.0@20.0) mouseUp 30320496 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30320496
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(16.0@20.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(16.0@20.0) mouseUp 30320496 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(16.0@20.0) mouseUp 30320496 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(31@113.0) corner: (47@129.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(31@113.0) corner: (47@129.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(31@113) mouseUp 30320496 nil]
		targetOffset: 	(16.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(31@113.0) corner: (47@129.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(31@113.0) corner: (47@129.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(31@113) mouseUp 30320496 nil]
		targetOffset: 	(16.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(31@113) mouseUp 30320496 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(31@113.0) corner: (47@129.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(31@113.0) corner: (47@129.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(31@113) mouseUp 30320496 nil]
		targetOffset: 	(16.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(31@113) mouseUp 30320496 nil]
	Receiver's instance variables: 
		bounds: 	(31@113.0) corner: (47@129.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(31@113.0) corner: (47@129.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(31@113) mouseUp 30320496 nil]
		targetOffset: 	(16.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(31@113) mouseUp 30320496 nil]
		tmp1: 	[(31@113) mouseUp 30320496 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(31@113.0) corner: (47@129.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(31@113.0) corner: (47@129.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(31@113) mouseUp 30320496 nil]
		targetOffset: 	(16.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(31@113) mouseUp 30320496 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30319039
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30320475
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30319039
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30320475
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
Character(Object)>>doesNotUnderstand: #includes:
ByteString(String)>>substrings:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #includes:
7 December 2024 8:02:04.856019 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #includes:
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

ByteString(String)>>substrings:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
		arg1: 	Character lf
		tmp1: 	a WriteStream
		tmp2: 	nil
		tmp3: 	205
		tmp4: 	$4
		tmp5: 	1
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(236106496))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(236106496)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@24.0) mouseUp 30321389 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
		arg3: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276737536) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@24.0) mouseUp 30321389 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(236106496) a SpToolbarButtonMorph(276[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(23.0@24.0) mouseUp 30321389 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(236106496)
	Receiver's instance variables: 
		timeStamp: 	30321389
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(23.0@24.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@24.0) mouseUp 30321389 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(236106496)
	Arguments and temporary variables: 
		arg1: 	[(23.0@24.0) mouseUp 30321389 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(38038784)
		submorphs: 	an Array(an AlignmentMorph(766645248))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (940831488) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(106139648)'Do it'
		iconMorph: 	an ImageMorph(13330944)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(38@117.0) corner: (54@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@117.0) corner: (54@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@117) mouseUp 30321389 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(38@117.0) corner: (54@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@117.0) corner: (54@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@117) mouseUp 30321389 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@117) mouseUp 30321389 nil]
		arg2: 	a SpToolbarButtonMorph(236106496)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(38@117.0) corner: (54@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@117.0) corner: (54@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@117) mouseUp 30321389 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@117) mouseUp 30321389 nil]
	Receiver's instance variables: 
		bounds: 	(38@117.0) corner: (54@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@117.0) corner: (54@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@117) mouseUp 30321389 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@117) mouseUp 30321389 nil]
		tmp1: 	[(38@117) mouseUp 30321389 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(38@117.0) corner: (54@133.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@117.0) corner: (54@133.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(511780608)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@117) mouseUp 30321389 nil]
		targetOffset: 	(21.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(38@117) mouseUp 30321389 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30319039
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30321368
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30319039
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(522796800)))
		lastAlarmTime: 	30321368
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
Character(Object)>>doesNotUnderstand: #includes:
ByteString(String)>>substrings:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #includes:
7 December 2024 8:03:17.402632 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #includes:
	Receiver: Character lf
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
Character lf

ByteString(String)>>substrings:
	Receiver: '47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]
	Arguments and temporary variables: 
		arg1: 	Character lf
		tmp1: 	a WriteStream
		tmp2: 	nil
		tmp3: 	205
		tmp4: 	$4
		tmp5: 	1
	Receiver's instance variables: 
'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
7[..]

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(994686464))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(994686464)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(994686464)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(610287104)
		submorphs: 	an Array(an AlignmentMorph(600795392))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (502878208) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(100847104)'Do it'
		iconMorph: 	an ImageMorph(452951808)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(994686464)
	Arguments and temporary variables: 
		arg1: 	[(10.0@27.0) mouseUp 30393920 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(994686464) a SpToolbarButtonMorph(574[..]
		arg3: 	a SpToolbarButtonMorph(994686464)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(610287104)
		submorphs: 	an Array(an AlignmentMorph(600795392))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (502878208) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(100847104)'Do it'
		iconMorph: 	an ImageMorph(452951808)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(994686464) a SpToolbarButtonMorph(574023168) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(994686464) a SpToolbarButtonMorph(574023168) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(994686464)
	Arguments and temporary variables: 
		arg1: 	[(10.0@27.0) mouseUp 30393920 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(994686464) a SpToolbarButtonMorph(574[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(610287104)
		submorphs: 	an Array(an AlignmentMorph(600795392))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (502878208) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(100847104)'Do it'
		iconMorph: 	an ImageMorph(452951808)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(994686464)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(610287104)
		submorphs: 	an Array(an AlignmentMorph(600795392))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (502878208) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(100847104)'Do it'
		iconMorph: 	an ImageMorph(452951808)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(10.0@27.0) mouseUp 30393920 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(994686464)
	Receiver's instance variables: 
		timeStamp: 	30393920
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(10.0@27.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(994686464)
	Arguments and temporary variables: 
		arg1: 	[(10.0@27.0) mouseUp 30393920 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(610287104)
		submorphs: 	an Array(an AlignmentMorph(600795392))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (502878208) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(100847104)'Do it'
		iconMorph: 	an ImageMorph(452951808)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(994686464)
	Arguments and temporary variables: 
		arg1: 	[(10.0@27.0) mouseUp 30393920 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(610287104)
		submorphs: 	an Array(an AlignmentMorph(600795392))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (502878208) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(100847104)'Do it'
		iconMorph: 	an ImageMorph(452951808)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(35@218.0) corner: (51@234.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(35@218.0) corner: (51@234.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(94295552)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(35@218) mouseUp 30393920 nil]
		targetOffset: 	(10.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(35@218.0) corner: (51@234.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(35@218.0) corner: (51@234.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(94295552)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(35@218) mouseUp 30393920 nil]
		targetOffset: 	(10.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(35@218) mouseUp 30393920 nil]
		arg2: 	a SpToolbarButtonMorph(994686464)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(35@218.0) corner: (51@234.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(35@218.0) corner: (51@234.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(94295552)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(35@218) mouseUp 30393920 nil]
		targetOffset: 	(10.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(35@218) mouseUp 30393920 nil]
	Receiver's instance variables: 
		bounds: 	(35@218.0) corner: (51@234.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(35@218.0) corner: (51@234.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(94295552)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(35@218) mouseUp 30393920 nil]
		targetOffset: 	(10.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(35@218) mouseUp 30393920 nil]
		tmp1: 	[(35@218) mouseUp 30393920 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(35@218.0) corner: (51@234.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(35@218.0) corner: (51@234.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(94295552)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(35@218) mouseUp 30393920 nil]
		targetOffset: 	(10.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(35@218) mouseUp 30393920 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 1 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30319039
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(352057088)))
		lastAlarmTime: 	30393909
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30319039
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(352057088)))
		lastAlarmTime: 	30393909
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 1 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
Character(Object)>>doesNotUnderstand: #includes:
ByteString(String)>>substrings:
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: SpLabelPresenter >> #text:
7 December 2024 8:05:41.633342 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

SpLabelPresenter(Object)>>doesNotUnderstand: #text:
	Receiver: a SpLabelPresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	a DebugPointSelectDialogPresenter
		adapter: 	nil
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Label presenter' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ nil ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		label: 	an ObservableValueHolder[ '' ]
		colorAction: 	nil
		backgroundColorAction: 	nil
		italicAction: 	nil
		boldAction: 	nil
		underlineAction: 	nil
		contextMenu: 	an ObservableValueHolder[ nil ]


DebugPointSelectDialogPresenter(SpAbstractMessageDialog)>>label:
	Receiver: a DebugPointSelectDialogPresenter
	Arguments and temporary variables: 
		arg1: 	'The scope of the selected debug point will be set to the inspected o[..]
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ nil ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		parentWindow: 	a WeakArray(nil)
		acceptAction: 	nil
		cancelAction: 	nil
		image: 	nil
		label: 	a SpLabelPresenter
		title: 	'Request'
		initialExtent: 	nil
		acceptLabel: 	nil
		cancelLabel: 	nil
		list: 	a DebugPointTablePresenter
		code: 	a DebugPointCodePresenter
		scope: 	ByteString
		variableTargetPresenter: 	a DebugPointVariableTargetPresenter


StInspectorSetScopeCommand>>execute
	Receiver: a StInspectorSetScopeCommand
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		context: 	a StObjectInspectorPresenter
		basicName: 	'Set Scope'
		basicDescription: 	'Set Scope: Change the scope of a debug point to this object'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Set Scope)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StInspectorSetScopeCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallDebug
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Set Scope)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StInspectorSetScopeCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallDebug
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Set Scope)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(185194752))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(185194752)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(185194752)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(917.0@13.0) corner: (947.0@33.0)
		owner: 	a Morph(904925952)
		submorphs: 	an Array(an AlignmentMorph(865735424))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (570576640) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	nil
		icon: 	Form(16x16x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(94164992)nil
		iconMorph: 	an ImageMorph(28630784)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(185194752)
	Arguments and temporary variables: 
		arg1: 	[(937.0@27.0) mouseUp 30538160 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(726572032) a SpToolbarButtonMorph(185[..]
		arg3: 	a SpToolbarButtonMorph(185194752)
	Receiver's instance variables: 
		bounds: 	(917.0@13.0) corner: (947.0@33.0)
		owner: 	a Morph(904925952)
		submorphs: 	an Array(an AlignmentMorph(865735424))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (570576640) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	nil
		icon: 	Form(16x16x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(94164992)nil
		iconMorph: 	an ImageMorph(28630784)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(726572032) a SpToolbarButtonMorph(185194752) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(726572032) a SpToolbarButtonMorph(185194752) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(185194752)
	Arguments and temporary variables: 
		arg1: 	[(937.0@27.0) mouseUp 30538160 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(726572032) a SpToolbarButtonMorph(185[..]
	Receiver's instance variables: 
		bounds: 	(917.0@13.0) corner: (947.0@33.0)
		owner: 	a Morph(904925952)
		submorphs: 	an Array(an AlignmentMorph(865735424))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (570576640) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	nil
		icon: 	Form(16x16x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(94164992)nil
		iconMorph: 	an ImageMorph(28630784)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(185194752)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(917.0@13.0) corner: (947.0@33.0)
		owner: 	a Morph(904925952)
		submorphs: 	an Array(an AlignmentMorph(865735424))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (570576640) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	nil
		icon: 	Form(16x16x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(94164992)nil
		iconMorph: 	an ImageMorph(28630784)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(937.0@27.0) mouseUp 30538160 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(185194752)
	Receiver's instance variables: 
		timeStamp: 	30538160
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(937.0@27.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(185194752)
	Arguments and temporary variables: 
		arg1: 	[(937.0@27.0) mouseUp 30538160 nil]
	Receiver's instance variables: 
		bounds: 	(917.0@13.0) corner: (947.0@33.0)
		owner: 	a Morph(904925952)
		submorphs: 	an Array(an AlignmentMorph(865735424))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (570576640) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	nil
		icon: 	Form(16x16x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(94164992)nil
		iconMorph: 	an ImageMorph(28630784)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(185194752)
	Arguments and temporary variables: 
		arg1: 	[(937.0@27.0) mouseUp 30538160 nil]
	Receiver's instance variables: 
		bounds: 	(917.0@13.0) corner: (947.0@33.0)
		owner: 	a Morph(904925952)
		submorphs: 	an Array(an AlignmentMorph(865735424))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (570576640) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	nil
		icon: 	Form(16x16x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(94164992)nil
		iconMorph: 	an ImageMorph(28630784)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(367@199.0) corner: (383@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(367@199.0) corner: (383@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(367@199) mouseUp 30538160 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(367@199.0) corner: (383@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(367@199.0) corner: (383@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(367@199) mouseUp 30538160 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(367@199) mouseUp 30538160 nil]
		arg2: 	a SpToolbarButtonMorph(185194752)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(367@199.0) corner: (383@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(367@199.0) corner: (383@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(367@199) mouseUp 30538160 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(367@199) mouseUp 30538160 nil]
	Receiver's instance variables: 
		bounds: 	(367@199.0) corner: (383@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(367@199.0) corner: (383@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(367@199) mouseUp 30538160 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(367@199) mouseUp 30538160 nil]
		tmp1: 	[(367@199) mouseUp 30538160 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(367@199.0) corner: (383@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(367@199.0) corner: (383@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(367@199) mouseUp 30538160 nil]
		targetOffset: 	(20.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(367@199) mouseUp 30538160 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 2 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30530668
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	30538139
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 2 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30530668
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	30538139
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 2 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


MorphicRenderLoop>>doOneCycle
	Receiver: a MorphicRenderLoop
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
a MorphicRenderLoop

MorphicRenderLoop>>doOneCycleWhile:
	Receiver: a MorphicRenderLoop
	Arguments and temporary variables: 
		arg1: 	[ true ]
	Receiver's instance variables: 
a MorphicRenderLoop

[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		activeTranscript: 	nil


[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
	Receiver: [ MorphicRenderLoop new doOneCycleWhile: [ true ] ]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		compiledBlock: 	a CompiledBlock: [ MorphicRenderLoop new doOneCycleWhile: [ [..]
		numArgs: 	0
		receiver: 	a MorphicUIManager



--- The full stack ---
SpLabelPresenter(Object)>>doesNotUnderstand: #text:
DebugPointSelectDialogPresenter(SpAbstractMessageDialog)>>label:
StInspectorSetScopeCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: StObjectInspectorPresenter >> #enableSlotMenuEntries
7 December 2024 8:05:42.32483 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

StObjectInspectorPresenter(Object)>>doesNotUnderstand: #enableSlotMenuEntries
	Receiver: a StObjectInspectorPresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		views: 	a SpNotebookPresenter
		evaluator: 	nil
		model: 	a StInspectorModel('')
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		header: 	a StHeaderBar
		alivePresentersByPage: 	a WeakSet(a StObjectContextPresenter a StObjectConte[..]
		activateOnSingleClick: 	true


StBreakOnAccessCommand(StDebugPointSlotTargetCommand)>>canBeExecuted
	Receiver: a StBreakOnAccessCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StObjectInspectorPresenter
		basicName: 	'Break on state access'
		basicDescription: 	'Breaks when the selected or any variable is read or written'


SpCommand(CmCommandDecorator)>>canBeExecuted
	Receiver: a SpCommand(Break on state access)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StBreakOnAccessCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallObjects
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Break on state access)
	Arguments and temporary variables: 
		arg1: 	SpToolbarButtonPresenter
		arg2: 	a SpCommand(Break on state access)
		tmp2: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		decoratedCommand: 	a StBreakOnAccessCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallObjects
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


SpCommand>>buildPresenter
	Receiver: a SpCommand(Break on state access)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StBreakOnAccessCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallObjects
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


SpToolbarPresenterBuilder>>visitCommand:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommand(Break on state access)
		tmp2: 	a CmUILeftPositionStrategy
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


SpCommand(CmAbstractCommand)>>acceptVisitor:
	Receiver: a SpCommand(Break on state access)
	Arguments and temporary variables: 
		arg1: 	a SpToolbarPresenterBuilder
	Receiver's instance variables: 
		decoratedCommand: 	a StBreakOnAccessCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallObjects
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ :arg2 | arg2 acceptVisitor: self ] in SpToolbarPresenterBuilder(CmVisitor)>>visitCommandGroup:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommandGroup
		arg2: 	a SpCommand(Break on state access)
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


OrderedCollection>>collect:
	Receiver: an OrderedCollection(a SpCommand(Break on state access) a SpCommand(Break on read) a S[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | arg2 acceptVisitor: self ]
		tmp1: 	an OrderedCollection()
		tmp2: 	6
		tmp3: 	1
	Receiver's instance variables: 
		array: 	an Array(a SpCommand(Break on state access) a SpCommand(Break on rea[..]
		firstIndex: 	1
		lastIndex: 	6


SpToolbarPresenterBuilder(CmVisitor)>>visitCommandGroup:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommandGroup
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


SpToolbarPresenterBuilder>>visitCommandGroup:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


SpCommandGroup(CmAbstractCommandsGroup)>>acceptVisitor:
	Receiver: a SpCommandGroup
	Arguments and temporary variables: 
		arg1: 	a SpToolbarPresenterBuilder
	Receiver's instance variables: 
		decoratedGroup: 	a CmCommandGroup
		displayStrategy: 	a CmUIDisplayAsSubMenu
		isRoot: 	false
		icon: 	Form(13x13x32)
		iconName: 	nil
		toolbarPopoverButton: 	false
		iconProvider: 	a StPharoApplication


SpToolbarPresenterBuilder(CmVisitor)>>visit:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommandGroup
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


[
			| tmp5 |
			tmp5 := self class new.
			tmp5
				toolbarPresenter: self toolbarPresenter newToolbar;
				visit: arg1 copy beToolbarGroup;
				toolbarPresenter ] in SpToolbarPresenterBuilder>>addPopoverButtonFrom:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommandGroup
		tmp1: 	nil
		tmp3: 	nil
		tmp5: 	a SpToolbarPresenterBuilder
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


SpMorphicToolbarPopoverButtonAdapter>>execute
	Receiver: a SpMorphicToolbarPopoverButtonAdapter
	Arguments and temporary variables: 
		tmp2: 	a SpPopoverPresenter
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(726572032))
		announcer: 	nil
		model: 	a SpToolbarPopoverButtonPresenter
		widget: 	a SpToolbarButtonMorph(726572032)
		selector: 	nil
		owner: 	a SpToolbarPopoverButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(726572032)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(887.0@13.0) corner: (917.0@33.0)
		owner: 	a Morph(904925952)
		submorphs: 	an Array(an AlignmentMorph(824403456))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (813253888) [other:  (presenter -> a SpToolbarP[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(699762432)nil
		iconMorph: 	an ImageMorph(173655296)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(726572032)
	Arguments and temporary variables: 
		arg1: 	[(904.0@25.0) mouseUp 30538857 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(726572032) a SpToolbarButtonMorph(185[..]
		arg3: 	a SpToolbarButtonMorph(726572032)
	Receiver's instance variables: 
		bounds: 	(887.0@13.0) corner: (917.0@33.0)
		owner: 	a Morph(904925952)
		submorphs: 	an Array(an AlignmentMorph(824403456))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (813253888) [other:  (presenter -> a SpToolbarP[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(699762432)nil
		iconMorph: 	an ImageMorph(173655296)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(726572032) a SpToolbarButtonMorph(185194752) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(726572032) a SpToolbarButtonMorph(185194752) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(726572032)
	Arguments and temporary variables: 
		arg1: 	[(904.0@25.0) mouseUp 30538857 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(726572032) a SpToolbarButtonMorph(185[..]
	Receiver's instance variables: 
		bounds: 	(887.0@13.0) corner: (917.0@33.0)
		owner: 	a Morph(904925952)
		submorphs: 	an Array(an AlignmentMorph(824403456))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (813253888) [other:  (presenter -> a SpToolbarP[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(699762432)nil
		iconMorph: 	an ImageMorph(173655296)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(726572032)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(887.0@13.0) corner: (917.0@33.0)
		owner: 	a Morph(904925952)
		submorphs: 	an Array(an AlignmentMorph(824403456))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (813253888) [other:  (presenter -> a SpToolbarP[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(699762432)nil
		iconMorph: 	an ImageMorph(173655296)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(904.0@25.0) mouseUp 30538857 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(726572032)
	Receiver's instance variables: 
		timeStamp: 	30538857
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(904.0@25.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(726572032)
	Arguments and temporary variables: 
		arg1: 	[(904.0@25.0) mouseUp 30538857 nil]
	Receiver's instance variables: 
		bounds: 	(887.0@13.0) corner: (917.0@33.0)
		owner: 	a Morph(904925952)
		submorphs: 	an Array(an AlignmentMorph(824403456))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (813253888) [other:  (presenter -> a SpToolbarP[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(699762432)nil
		iconMorph: 	an ImageMorph(173655296)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(726572032)
	Arguments and temporary variables: 
		arg1: 	[(904.0@25.0) mouseUp 30538857 nil]
	Receiver's instance variables: 
		bounds: 	(887.0@13.0) corner: (917.0@33.0)
		owner: 	a Morph(904925952)
		submorphs: 	an Array(an AlignmentMorph(824403456))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (813253888) [other:  (presenter -> a SpToolbarP[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(699762432)nil
		iconMorph: 	an ImageMorph(173655296)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(334@197.0) corner: (350@213.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(334@197.0) corner: (350@213.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(334@197) mouseUp 30538857 nil]
		targetOffset: 	(17.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(334@197.0) corner: (350@213.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(334@197.0) corner: (350@213.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(334@197) mouseUp 30538857 nil]
		targetOffset: 	(17.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(334@197) mouseUp 30538857 nil]
		arg2: 	a SpToolbarButtonMorph(726572032)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(334@197.0) corner: (350@213.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(334@197.0) corner: (350@213.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(334@197) mouseUp 30538857 nil]
		targetOffset: 	(17.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(334@197) mouseUp 30538857 nil]
	Receiver's instance variables: 
		bounds: 	(334@197.0) corner: (350@213.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(334@197.0) corner: (350@213.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(334@197) mouseUp 30538857 nil]
		targetOffset: 	(17.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(334@197) mouseUp 30538857 nil]
		tmp1: 	[(334@197) mouseUp 30538857 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(334@197.0) corner: (350@213.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(334@197.0) corner: (350@213.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(334@197) mouseUp 30538857 nil]
		targetOffset: 	(17.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(334@197) mouseUp 30538857 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30530668
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	30538838
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30530668
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	30538838
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)



--- The full stack ---
StObjectInspectorPresenter(Object)>>doesNotUnderstand: #enableSlotMenuEntries
StBreakOnAccessCommand(StDebugPointSlotTargetCommand)>>canBeExecuted
SpCommand(CmCommandDecorator)>>canBeExecuted
[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
SpCommand>>buildPresenter
SpToolbarPresenterBuilder>>visitCommand:
SpCommand(CmAbstractCommand)>>acceptVisitor:
[ :arg2 | arg2 acceptVisitor: self ] in SpToolbarPresenterBuilder(CmVisitor)>>visitCommandGroup:
OrderedCollection>>collect:
SpToolbarPresenterBuilder(CmVisitor)>>visitCommandGroup:
SpToolbarPresenterBuilder>>visitCommandGroup:
SpCommandGroup(CmAbstractCommandsGroup)>>acceptVisitor:
SpToolbarPresenterBuilder(CmVisitor)>>visit:
[
			| tmp5 |
			tmp5 := self class new.
			tmp5
				toolbarPresenter: self toolbarPresenter newToolbar;
				visit: arg1 copy beToolbarGroup;
				toolbarPresenter ] in SpToolbarPresenterBuilder>>addPopoverButtonFrom:
SpMorphicToolbarPopoverButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: StObjectInspectorPresenter >> #enableSlotMenuEntries
7 December 2024 8:05:43.273363 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

StObjectInspectorPresenter(Object)>>doesNotUnderstand: #enableSlotMenuEntries
	Receiver: a StObjectInspectorPresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		views: 	a SpNotebookPresenter
		evaluator: 	nil
		model: 	a StInspectorModel(an OrderedCollection('47|53' '97|13' '97|61' '97|[..]
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		header: 	a StHeaderBar
		alivePresentersByPage: 	a WeakSet(a StObjectContextPresenter)
		activateOnSingleClick: 	true


StBreakOnAccessCommand(StDebugPointSlotTargetCommand)>>canBeExecuted
	Receiver: a StBreakOnAccessCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StObjectInspectorPresenter
		basicName: 	'Break on state access'
		basicDescription: 	'Breaks when the selected or any variable is read or written'


SpCommand(CmCommandDecorator)>>canBeExecuted
	Receiver: a SpCommand(Break on state access)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StBreakOnAccessCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallObjects
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Break on state access)
	Arguments and temporary variables: 
		arg1: 	SpToolbarButtonPresenter
		arg2: 	a SpCommand(Break on state access)
		tmp2: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		decoratedCommand: 	a StBreakOnAccessCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallObjects
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


SpCommand>>buildPresenter
	Receiver: a SpCommand(Break on state access)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StBreakOnAccessCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallObjects
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


SpToolbarPresenterBuilder>>visitCommand:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommand(Break on state access)
		tmp2: 	a CmUILeftPositionStrategy
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


SpCommand(CmAbstractCommand)>>acceptVisitor:
	Receiver: a SpCommand(Break on state access)
	Arguments and temporary variables: 
		arg1: 	a SpToolbarPresenterBuilder
	Receiver's instance variables: 
		decoratedCommand: 	a StBreakOnAccessCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallObjects
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ :arg2 | arg2 acceptVisitor: self ] in SpToolbarPresenterBuilder(CmVisitor)>>visitCommandGroup:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommandGroup
		arg2: 	a SpCommand(Break on state access)
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


OrderedCollection>>collect:
	Receiver: an OrderedCollection(a SpCommand(Break on state access) a SpCommand(Break on read) a S[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | arg2 acceptVisitor: self ]
		tmp1: 	an OrderedCollection()
		tmp2: 	6
		tmp3: 	1
	Receiver's instance variables: 
		array: 	an Array(a SpCommand(Break on state access) a SpCommand(Break on rea[..]
		firstIndex: 	1
		lastIndex: 	6


SpToolbarPresenterBuilder(CmVisitor)>>visitCommandGroup:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommandGroup
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


SpToolbarPresenterBuilder>>visitCommandGroup:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


SpCommandGroup(CmAbstractCommandsGroup)>>acceptVisitor:
	Receiver: a SpCommandGroup
	Arguments and temporary variables: 
		arg1: 	a SpToolbarPresenterBuilder
	Receiver's instance variables: 
		decoratedGroup: 	a CmCommandGroup
		displayStrategy: 	a CmUIDisplayAsSubMenu
		isRoot: 	false
		icon: 	Form(13x13x32)
		iconName: 	nil
		toolbarPopoverButton: 	false
		iconProvider: 	a StPharoApplication


SpToolbarPresenterBuilder(CmVisitor)>>visit:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommandGroup
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


[
			| tmp5 |
			tmp5 := self class new.
			tmp5
				toolbarPresenter: self toolbarPresenter newToolbar;
				visit: arg1 copy beToolbarGroup;
				toolbarPresenter ] in SpToolbarPresenterBuilder>>addPopoverButtonFrom:
	Receiver: a SpToolbarPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpCommandGroup
		tmp1: 	nil
		tmp3: 	nil
		tmp5: 	a SpToolbarPresenterBuilder
	Receiver's instance variables: 
		toolbarPresenter: 	a SpToolbarPresenter


SpMorphicToolbarPopoverButtonAdapter>>execute
	Receiver: a SpMorphicToolbarPopoverButtonAdapter
	Arguments and temporary variables: 
		tmp2: 	a SpPopoverPresenter
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(15238656))
		announcer: 	nil
		model: 	a SpToolbarPopoverButtonPresenter
		widget: 	a SpToolbarButtonMorph(15238656)
		selector: 	nil
		owner: 	a SpToolbarPopoverButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(15238656)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(766.0@13.0) corner: (796.0@33.0)
		owner: 	a Morph(551159808)
		submorphs: 	an Array(an AlignmentMorph(566343936))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (219283712) [other:  (presenter -> a SpToolbarP[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(420752128)nil
		iconMorph: 	an ImageMorph(896348928)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(15238656)
	Arguments and temporary variables: 
		arg1: 	[(784.0@27.0) mouseUp 30539806 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(15238656) a SpToolbarButtonMorph(8214[..]
		arg3: 	a SpToolbarButtonMorph(15238656)
	Receiver's instance variables: 
		bounds: 	(766.0@13.0) corner: (796.0@33.0)
		owner: 	a Morph(551159808)
		submorphs: 	an Array(an AlignmentMorph(566343936))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (219283712) [other:  (presenter -> a SpToolbarP[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(420752128)nil
		iconMorph: 	an ImageMorph(896348928)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(15238656) a SpToolbarButtonMorph(821404672) a SpToolba[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(15238656) a SpToolbarButtonMorph(821404672) a SpToolba[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(15238656)
	Arguments and temporary variables: 
		arg1: 	[(784.0@27.0) mouseUp 30539806 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(15238656) a SpToolbarButtonMorph(8214[..]
	Receiver's instance variables: 
		bounds: 	(766.0@13.0) corner: (796.0@33.0)
		owner: 	a Morph(551159808)
		submorphs: 	an Array(an AlignmentMorph(566343936))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (219283712) [other:  (presenter -> a SpToolbarP[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(420752128)nil
		iconMorph: 	an ImageMorph(896348928)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(15238656)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(766.0@13.0) corner: (796.0@33.0)
		owner: 	a Morph(551159808)
		submorphs: 	an Array(an AlignmentMorph(566343936))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (219283712) [other:  (presenter -> a SpToolbarP[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(420752128)nil
		iconMorph: 	an ImageMorph(896348928)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(784.0@27.0) mouseUp 30539806 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(15238656)
	Receiver's instance variables: 
		timeStamp: 	30539806
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(784.0@27.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(15238656)
	Arguments and temporary variables: 
		arg1: 	[(784.0@27.0) mouseUp 30539806 nil]
	Receiver's instance variables: 
		bounds: 	(766.0@13.0) corner: (796.0@33.0)
		owner: 	a Morph(551159808)
		submorphs: 	an Array(an AlignmentMorph(566343936))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (219283712) [other:  (presenter -> a SpToolbarP[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(420752128)nil
		iconMorph: 	an ImageMorph(896348928)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(15238656)
	Arguments and temporary variables: 
		arg1: 	[(784.0@27.0) mouseUp 30539806 nil]
	Receiver's instance variables: 
		bounds: 	(766.0@13.0) corner: (796.0@33.0)
		owner: 	a Morph(551159808)
		submorphs: 	an Array(an AlignmentMorph(566343936))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (219283712) [other:  (presenter -> a SpToolbarP[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarPopoverButtonAdapter
		label: 	nil
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(420752128)nil
		iconMorph: 	an ImageMorph(896348928)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(214@199.0) corner: (230@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(214@199.0) corner: (230@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(214@199) mouseUp 30539806 nil]
		targetOffset: 	(16.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(214@199.0) corner: (230@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(214@199.0) corner: (230@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(214@199) mouseUp 30539806 nil]
		targetOffset: 	(16.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(214@199) mouseUp 30539806 nil]
		arg2: 	a SpToolbarButtonMorph(15238656)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(214@199.0) corner: (230@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(214@199.0) corner: (230@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(214@199) mouseUp 30539806 nil]
		targetOffset: 	(16.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(214@199) mouseUp 30539806 nil]
	Receiver's instance variables: 
		bounds: 	(214@199.0) corner: (230@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(214@199.0) corner: (230@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(214@199) mouseUp 30539806 nil]
		targetOffset: 	(16.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(214@199) mouseUp 30539806 nil]
		tmp1: 	[(214@199) mouseUp 30539806 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(214@199.0) corner: (230@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(214@199.0) corner: (230@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a SpFTTableMorph(961073920)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(214@199) mouseUp 30539806 nil]
		targetOffset: 	(16.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(214@199) mouseUp 30539806 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30530668
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	30539795
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30530668
		lastStepMessage: 	nil
		alarms: 	a Heap()
		lastAlarmTime: 	30539795
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)



--- The full stack ---
StObjectInspectorPresenter(Object)>>doesNotUnderstand: #enableSlotMenuEntries
StBreakOnAccessCommand(StDebugPointSlotTargetCommand)>>canBeExecuted
SpCommand(CmCommandDecorator)>>canBeExecuted
[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
SpCommand>>buildPresenter
SpToolbarPresenterBuilder>>visitCommand:
SpCommand(CmAbstractCommand)>>acceptVisitor:
[ :arg2 | arg2 acceptVisitor: self ] in SpToolbarPresenterBuilder(CmVisitor)>>visitCommandGroup:
OrderedCollection>>collect:
SpToolbarPresenterBuilder(CmVisitor)>>visitCommandGroup:
SpToolbarPresenterBuilder>>visitCommandGroup:
SpCommandGroup(CmAbstractCommandsGroup)>>acceptVisitor:
SpToolbarPresenterBuilder(CmVisitor)>>visit:
[
			| tmp5 |
			tmp5 := self class new.
			tmp5
				toolbarPresenter: self toolbarPresenter newToolbar;
				visit: arg1 copy beToolbarGroup;
				toolbarPresenter ] in SpToolbarPresenterBuilder>>addPopoverButtonFrom:
SpMorphicToolbarPopoverButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #asByteString
7 December 2024 8:10:19.909584 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #asByteString
	Receiver: $,
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
$,

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(499712000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(499712000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(26@19) mouseUp 30816438 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401[..]
		arg3: 	a SpToolbarButtonMorph(499712000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401466624) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401466624) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(26@19) mouseUp 30816438 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(26@19) mouseUp 30816438 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(499712000)
	Receiver's instance variables: 
		timeStamp: 	30816438
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(26@19)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(26@19) mouseUp 30816438 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(26@19) mouseUp 30816438 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(134@204.0) corner: (150@220.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(134@204.0) corner: (150@220.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(134@204) mouseUp 30816438 nil]
		targetOffset: 	(27.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(134@204.0) corner: (150@220.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(134@204.0) corner: (150@220.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(134@204) mouseUp 30816438 nil]
		targetOffset: 	(27.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(134@204) mouseUp 30816438 nil]
		arg2: 	a SpToolbarButtonMorph(499712000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(134@204.0) corner: (150@220.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(134@204.0) corner: (150@220.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(134@204) mouseUp 30816438 nil]
		targetOffset: 	(27.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(134@204) mouseUp 30816438 nil]
	Receiver's instance variables: 
		bounds: 	(134@204.0) corner: (150@220.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(134@204.0) corner: (150@220.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(134@204) mouseUp 30816438 nil]
		targetOffset: 	(27.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(134@204) mouseUp 30816438 nil]
		tmp1: 	[(134@204) mouseUp 30816438 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(134@204.0) corner: (150@220.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(134@204.0) corner: (150@220.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(134@204) mouseUp 30816438 nil]
		targetOffset: 	(27.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(134@204) mouseUp 30816438 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 15 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30803051
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(481928192)))
		lastAlarmTime: 	30816417
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 18 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30803051
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(481928192)))
		lastAlarmTime: 	30816417
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 18 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #asByteString
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #asByteString
7 December 2024 8:10:29.613108 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #asByteString
	Receiver: $,
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
$,

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(499712000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(499712000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(21.0@18.0) mouseUp 30826140 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401[..]
		arg3: 	a SpToolbarButtonMorph(499712000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401466624) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401466624) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(21.0@18.0) mouseUp 30826140 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(21.0@18.0) mouseUp 30826140 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(499712000)
	Receiver's instance variables: 
		timeStamp: 	30826140
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(21.0@18.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(21.0@18.0) mouseUp 30826140 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(21.0@18.0) mouseUp 30826140 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(34@199.0) corner: (50@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@199.0) corner: (50@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@199) mouseUp 30826140 nil]
		targetOffset: 	(23.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(34@199.0) corner: (50@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@199.0) corner: (50@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@199) mouseUp 30826140 nil]
		targetOffset: 	(23.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@199) mouseUp 30826140 nil]
		arg2: 	a SpToolbarButtonMorph(499712000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(34@199.0) corner: (50@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@199.0) corner: (50@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@199) mouseUp 30826140 nil]
		targetOffset: 	(23.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@199) mouseUp 30826140 nil]
	Receiver's instance variables: 
		bounds: 	(34@199.0) corner: (50@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@199.0) corner: (50@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@199) mouseUp 30826140 nil]
		targetOffset: 	(23.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(34@199) mouseUp 30826140 nil]
		tmp1: 	[(34@199) mouseUp 30826140 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(34@199.0) corner: (50@215.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(34@199.0) corner: (50@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(34@199) mouseUp 30826140 nil]
		targetOffset: 	(23.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(34@199) mouseUp 30826140 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 39 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30825172
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(481928192)))
		lastAlarmTime: 	30826121
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 39 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30825172
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(481928192)))
		lastAlarmTime: 	30826121
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 39 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #asByteString
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #asByteString
7 December 2024 8:10:33.260151 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #asByteString
	Receiver: $,
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
$,

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(499712000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(499712000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(25.0@19.0) mouseUp 30829779 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401[..]
		arg3: 	a SpToolbarButtonMorph(499712000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401466624) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401466624) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(25.0@19.0) mouseUp 30829779 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(25.0@19.0) mouseUp 30829779 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(499712000)
	Receiver's instance variables: 
		timeStamp: 	30829779
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(25.0@19.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(25.0@19.0) mouseUp 30829779 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(25.0@19.0) mouseUp 30829779 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(38@200.0) corner: (54@216.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@200.0) corner: (54@216.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@200) mouseOver 30829779 nil]
		targetOffset: 	(26.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(38@200.0) corner: (54@216.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@200.0) corner: (54@216.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@200) mouseOver 30829779 nil]
		targetOffset: 	(26.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@200) mouseUp 30829779 nil]
		arg2: 	a SpToolbarButtonMorph(499712000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(38@200.0) corner: (54@216.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@200.0) corner: (54@216.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@200) mouseOver 30829779 nil]
		targetOffset: 	(26.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@200) mouseUp 30829779 nil]
	Receiver's instance variables: 
		bounds: 	(38@200.0) corner: (54@216.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@200.0) corner: (54@216.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@200) mouseOver 30829779 nil]
		targetOffset: 	(26.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@200) mouseUp 30829779 nil]
		tmp1: 	[(38@200) mouseUp 30829779 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(38@200.0) corner: (54@216.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@200.0) corner: (54@216.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@200) mouseOver 30829779 nil]
		targetOffset: 	(26.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>processEvents
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		tmp1: 	[(38@200) mouseUp 30829779 nil]
	Receiver's instance variables: 
		bounds: 	(38@200.0) corner: (54@216.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@200.0) corner: (54@216.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@200) mouseOver 30829779 nil]
		targetOffset: 	(26.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30828806
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(481928192)))
		lastAlarmTime: 	30829790
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(566076672))
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
		tmp1: 	1
		tmp2: 	1
	Receiver's instance variables: 
an Array(a HandMorph(566076672))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEv[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30828806
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(481928192)))
		lastAlarmTime: 	30829790
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30828806
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(481928192)))
		lastAlarmTime: 	30829790
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
Character(Object)>>doesNotUnderstand: #asByteString
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
self
		handsDo: [ :arg2 |
			self activeHand: arg2.
			arg2 processEvents.
			self activeHand: nil ];
		activeHand: self hands first in WorldState>>doOneCycleFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: Character >> #asByteString
7 December 2024 8:10:33.817726 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

Character(Object)>>doesNotUnderstand: #asByteString
	Receiver: $,
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
$,

Part1>>populateRules:
	Receiver: a Part1
	Arguments and temporary variables: 
		stream: 	a ZnCharacterReadStream
		string: 	'47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
[..]
	Receiver's instance variables: 
a Part1

Part1>>main
	Receiver: a Part1
	Arguments and temporary variables: 
		home: 	{home}/Code/aoc/2024/day5
		input: 	File @ example.txt
		stream: 	a ZnCharacterReadStream
	Receiver's instance variables: 
a Part1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	Part1 new main
		source: 	'Part1 new main.'
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'Part1 new main.'
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 15) ]
		text: 	an ObservableValueHolder[ 'Part1 new main.' ]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(499712000))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(499712000)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(25.0@19.0) mouseUp 30830354 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401[..]
		arg3: 	a SpToolbarButtonMorph(499712000)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401466624) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401466624) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(25.0@19.0) mouseUp 30830354 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(499712000) a SpToolbarButtonMorph(401[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(25.0@19.0) mouseUp 30830354 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(499712000)
	Receiver's instance variables: 
		timeStamp: 	30830354
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(25.0@19.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(25.0@19.0) mouseUp 30830354 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(499712000)
	Arguments and temporary variables: 
		arg1: 	[(25.0@19.0) mouseUp 30830354 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(589438464)
		submorphs: 	an Array(an AlignmentMorph(388721408))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (79947776) [balloonText]  [other:  (presenter -[..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(432593920)'Do it'
		iconMorph: 	an ImageMorph(454043136)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(38@200.0) corner: (54@216.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@200.0) corner: (54@216.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@200) mouseUp 30830354 nil]
		targetOffset: 	(25.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(38@200.0) corner: (54@216.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@200.0) corner: (54@216.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@200) mouseUp 30830354 nil]
		targetOffset: 	(25.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@200) mouseUp 30830354 nil]
		arg2: 	a SpToolbarButtonMorph(499712000)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(38@200.0) corner: (54@216.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@200.0) corner: (54@216.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@200) mouseUp 30830354 nil]
		targetOffset: 	(25.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@200) mouseUp 30830354 nil]
	Receiver's instance variables: 
		bounds: 	(38@200.0) corner: (54@216.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@200.0) corner: (54@216.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@200) mouseUp 30830354 nil]
		targetOffset: 	(25.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(38@200) mouseUp 30830354 nil]
		tmp1: 	[(38@200) mouseUp 30830354 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(38@200.0) corner: (54@216.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(38@200.0) corner: (54@216.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(930894848)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(38@200) mouseUp 30830354 nil]
		targetOffset: 	(25.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(38@200) mouseUp 30830354 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30828806
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(481928192)))
		lastAlarmTime: 	30830329
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	30828806
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(481928192)))
		lastAlarmTime: 	30830329
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	nil
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph



--- The full stack ---
Character(Object)>>doesNotUnderstand: #asByteString
Part1>>populateRules:
Part1>>main
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "ifEmpty:" is nil
7 December 2024 5:53:20.042168 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #ifEmpty:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

ClyClassIconTableDecorator class(ClyClassTableDecorator class)>>decorateTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(641949696)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	a MorphExtension (291499776)
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(641949696)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class>>decorateMainTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(641949696)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	nil
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:inContext:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(641949696)
		arg2: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyTableDecorationStrategyAnnotation>>decorateMainTableCell:inContext:
	Receiver: a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(641949696)
		arg2: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		annotatedClass: 	ClyClassIconTableDecorator
		declarationSelector: 	#decorationStrategy
		priority: 	0
		activeContext: 	a ClyBrowserItemContext


[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ] in ClyQueryViewMorph>>decorateMainTableCell:of:
	Receiver: a ClyQueryViewMorph(945139968)
	Arguments and temporary variables: 
		arg1: 	a ClyFullBrowserClassContext
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	a ClyMainItemCellMorph(641949696)
		arg3: 	a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(32242432)
		submorphs: 	an Array(a FTTableMorph(733481984))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3168256)
		table: 	a FTTableMorph(733481984)
		browser: 	a ClyFullBrowserMorph(666539520)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


SortedCollection(SequenceableCollection)>>select:thenDo:
	Receiver: a SortedCollection(a ClyTableDecorationStrategyAnnotation(ClyClassCommentTableDecorato[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 isActiveInContext: arg1 ]
		arg2: 	[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ]
		tmp1: 	a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
		tmp2: 	25
		tmp3: 	1
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil[..]
		firstIndex: 	16
		lastIndex: 	40
		sortBlock: 	a PropertySortFunction


ClyTableDecorationStrategyAnnotation class(ClassAnnotation class)>>activeInstancesInContext:do:
	Receiver: ClyTableDecorationStrategyAnnotation
	Arguments and temporary variables: 
		arg1: 	a ClyFullBrowserClassContext
		arg2: 	[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ]
	Receiver's instance variables: 
		superclass: 	ClassAnnotation
		methodDict: 	a MethodDictionary(#annotatedClass:->ClyTableDecorationStrategy[..]
		format: 	65540
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (accessing) - 1 selector(s) Protocol (decorati[..]
		subclasses: 	nil
		name: 	#ClyTableDecorationStrategyAnnotation
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	9121576
		packageTag: 	a PackageTag(Table)
		redefinedInstances: 	nil


ClyQueryViewMorph>>decorateMainTableCell:of:
	Receiver: a ClyQueryViewMorph(945139968)
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(641949696)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(32242432)
		submorphs: 	an Array(a FTTableMorph(733481984))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3168256)
		table: 	a FTTableMorph(733481984)
		browser: 	a ClyFullBrowserMorph(666539520)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyMainTableColumn>>createCellFor:in:
	Receiver: a ClyMainTableColumn
	Arguments and temporary variables: 
		arg1: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		arg2: 	a ClyQueryViewMorph(945139968)
		tmp1: 	a ClyMainItemCellMorph(641949696)
	Receiver's instance variables: 
		id: 	#item
		width: 	nil
		sortingStrategy: 	a FTNullColumnSortingStrategy
		displayBlock: 	tmp2


ClyExpandedDataSource(ClyDataSource)>>cellColumn:row:
	Receiver: a ClyExpandedDataSource
	Arguments and temporary variables: 
		arg1: 	a ClyMainTableColumn
		arg2: 	1
		tmp1: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
	Receiver's instance variables: 
		table: 	a FTTableMorph(733481984)
		query: 	a ClyUnionQuery(all classes) from packages: Announcements-Core, ClyP[..]
		itemCursor: 	a ClyBrowserQueryCursor(a ClyUnionQuery(all classes) from packa[..]
		depth: 	0
		parentItem: 	nil
		lastFilteredDataSource: 	nil
		queryView: 	a ClyQueryViewMorph(945139968)
		dirty: 	false
		collapsedItems: 	a SortedCollection()


(self exposedColumnsRange: tmp3) in FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(231297024)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (87@17)
		owner: 	a FTTableMorph(733481984)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()
		startColumnIndex: 	0
		rowColors: 	nil


Interval>>do:
	Receiver: (1 to: 1)
	Arguments and temporary variables: 
		arg1: 	(self exposedColumnsRange: tmp3)
		tmp1: 	1
		tmp2: 	1
		tmp3: 	1
	Receiver's instance variables: 
		start: 	1
		stop: 	1
		step: 	1


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(231297024)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (87@17)
		owner: 	a FTTableMorph(733481984)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()
		startColumnIndex: 	0
		rowColors: 	nil


FTTableMorph>>resizeAllSubviews
	Receiver: a FTTableMorph(733481984)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(945139968)
		submorphs: 	an Array(a ScrollBarMorph(396959232) a RubTextFieldMorph(5372042[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (770943232) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(231297024)
		verticalScrollBar: 	a ScrollBarMorph(396959232)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph>>extent:
	Receiver: a FTTableMorph(733481984)
	Arguments and temporary variables: 
		arg1: 	(100@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(945139968)
		submorphs: 	an Array(a ScrollBarMorph(396959232) a RubTextFieldMorph(5372042[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (770943232) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(231297024)
		verticalScrollBar: 	a ScrollBarMorph(396959232)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph(Morph)>>bounds:
	Receiver: a FTTableMorph(733481984)
	Arguments and temporary variables: 
		arg1: 	(0@0) corner: (100@40)
		tmp1: 	(50@40)
		tmp2: 	(100@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(945139968)
		submorphs: 	an Array(a ScrollBarMorph(396959232) a RubTextFieldMorph(5372042[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (770943232) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(231297024)
		verticalScrollBar: 	a ScrollBarMorph(396959232)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph(Morph)>>layoutInBounds:
	Receiver: a FTTableMorph(733481984)
	Arguments and temporary variables: 
		arg1: 	(0@0) corner: (100@40)
		tmp1: 	(0@0) corner: (100@40)
		tmp2: 	#center
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(945139968)
		submorphs: 	an Array(a ScrollBarMorph(396959232) a RubTextFieldMorph(5372042[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (770943232) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(231297024)
		verticalScrollBar: 	a ScrollBarMorph(396959232)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


TableLayout>>layoutTopToBottom:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		arg1: 	a ClyQueryViewMorph(945139968)
		arg2: 	(0@0) corner: (8@40)
		tmp1: 	0
		tmp2: 	(8@40)
		tmp3: 	[ :arg3 |
	        | tmp25 tmp26 tmp27 tmp29 |
	        tmp29 := arg3[..]
		tmp4: 	0
		tmp5: 	0
		tmp6: 	nil
		tmp7: 	19.0
		tmp8: 	19
		tmp9: 	0
		tmp10: 	0
		tmp11: 	1073741823
		tmp12: 	1073741823
		tmp13: 	an Array(a FTTableMorph(733481984))
		tmp15: 	1
		tmp16: 	40
		tmp17: 	19.0
		tmp18: 	0
		tmp19: 	a LayoutCell
		tmp20: 	(100@21)
		tmp21: 	100
		tmp22: 	1
		tmp23: 	true
		tmp24: 	a LayoutCell
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


TableLayout>>layout:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		arg1: 	a ClyQueryViewMorph(945139968)
		arg2: 	(0@0) corner: (8@40)
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	(0@0) corner: (8@40)
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


ClyQueryViewMorph(Morph)>>doLayoutIn:
	Receiver: a ClyQueryViewMorph(945139968)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(32242432)
		submorphs: 	an Array(a FTTableMorph(733481984))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3168256)
		table: 	a FTTableMorph(733481984)
		browser: 	a ClyFullBrowserMorph(666539520)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>computeFullBounds
	Receiver: a ClyQueryViewMorph(945139968)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(32242432)
		submorphs: 	an Array(a FTTableMorph(733481984))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3168256)
		table: 	a FTTableMorph(733481984)
		browser: 	a ClyFullBrowserMorph(666539520)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>fullBounds
	Receiver: a ClyQueryViewMorph(945139968)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(32242432)
		submorphs: 	an Array(a FTTableMorph(733481984))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3168256)
		table: 	a FTTableMorph(733481984)
		browser: 	a ClyFullBrowserMorph(666539520)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>position:
	Receiver: a ClyQueryViewMorph(945139968)
	Arguments and temporary variables: 
		arg1: 	(13@0)
		tmp1: 	(13.0@0.0)
		tmp2: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(32242432)
		submorphs: 	an Array(a FTTableMorph(733481984))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3168256)
		table: 	a FTTableMorph(733481984)
		browser: 	a ClyFullBrowserMorph(666539520)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>bounds:
	Receiver: a ClyQueryViewMorph(945139968)
	Arguments and temporary variables: 
		arg1: 	(13@0) corner: (21@40)
		tmp1: 	(50@40)
		tmp2: 	(8@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(32242432)
		submorphs: 	an Array(a FTTableMorph(733481984))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3168256)
		table: 	a FTTableMorph(733481984)
		browser: 	a ClyFullBrowserMorph(666539520)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>layoutInBounds:
	Receiver: a ClyQueryViewMorph(945139968)
	Arguments and temporary variables: 
		arg1: 	(13@0) corner: (21@40)
		tmp1: 	(13@0) corner: (21@40)
		tmp2: 	#center
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(32242432)
		submorphs: 	an Array(a FTTableMorph(733481984))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3168256)
		table: 	a FTTableMorph(733481984)
		browser: 	a ClyFullBrowserMorph(666539520)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>layoutProportionallyIn:
	Receiver: a ClyQueryViewMorph(945139968)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(32242432)
		submorphs: 	an Array(a FTTableMorph(733481984))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (3168256)
		table: 	a FTTableMorph(733481984)
		browser: 	a ClyFullBrowserMorph(666539520)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


[ :arg3 | arg3 layoutProportionallyIn: arg2 ] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(32242432)
		arg2: 	(0@0) corner: (50@40)
		arg3: 	a ClyQueryViewMorph(945139968)
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a ProportionalSplitterMorph(476464128) a ProportionalSplitterMorph(1040624384[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 layoutProportionallyIn: arg2 ]
		tmp1: 	7
		tmp2: 	1
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(476464128) a ProportionalSplitterMorph(1040624384[..]

PanelMorph(Morph)>>submorphsDo:
	Receiver: a PanelMorph(32242432)
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 layoutProportionallyIn: arg2 ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(666539520)
		submorphs: 	an Array(a ProportionalSplitterMorph(476464128) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (720497664) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(32242432)
		arg2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
a ProportionalLayout

PanelMorph(Morph)>>doLayoutIn:
	Receiver: a PanelMorph(32242432)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(666539520)
		submorphs: 	an Array(a ProportionalSplitterMorph(476464128) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (720497664) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(32242432)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(666539520)
		submorphs: 	an Array(a ProportionalSplitterMorph(476464128) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (720497664) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>fullBounds
	Receiver: a PanelMorph(32242432)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(666539520)
		submorphs: 	an Array(a ProportionalSplitterMorph(476464128) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (720497664) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBounds.
			tmp2
				ifNil: [ tmp2 := tmp3 copy ]
				ifNotNil: [ tmp2 := tmp2 quickMerge: tmp3 ] ] ] in ClyFullBrowserMorph(Morph)>>submorphBounds
	Receiver: a ClyFullBrowserMorph(666539520)
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(32242432)
		tmp3: 	nil
		tmp2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(692016640) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(1026779392) a PanelMorph(97[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (203572224) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(32242432)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(498262016) a ClyQ[..]
		toolPanel: 	a PanelMorph(977732352)
		toolbar: 	a ClyToolbarMorph(178024192)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(498262016)
		classView: 	a ClyQueryViewMorph(945139968)
		methodGroupView: 	a ClyQueryViewMorph(609217792)
		methodView: 	a ClyQueryViewMorph(995944960)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from empty scope


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ProportionalSplitterMorph(1026779392) a PanelMorph(977732352) a PanelMorph([..]
	Arguments and temporary variables: 
		arg1: 	[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBou[..]
		tmp1: 	3
		tmp2: 	1
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(1026779392) a PanelMorph(977732352) a PanelMorph([..]

ClyFullBrowserMorph(Morph)>>submorphBounds
	Receiver: a ClyFullBrowserMorph(666539520)
	Arguments and temporary variables: 
		tmp2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(692016640) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(1026779392) a PanelMorph(97[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (203572224) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(32242432)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(498262016) a ClyQ[..]
		toolPanel: 	a PanelMorph(977732352)
		toolbar: 	a ClyToolbarMorph(178024192)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(498262016)
		classView: 	a ClyQueryViewMorph(945139968)
		methodGroupView: 	a ClyQueryViewMorph(609217792)
		methodView: 	a ClyQueryViewMorph(995944960)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from empty scope


ClyFullBrowserMorph(Morph)>>privateFullBounds
	Receiver: a ClyFullBrowserMorph(666539520)
	Arguments and temporary variables: 
		tmp1: 	(0@0) corner: (915@620)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(692016640) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(1026779392) a PanelMorph(97[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (203572224) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(32242432)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(498262016) a ClyQ[..]
		toolPanel: 	a PanelMorph(977732352)
		toolbar: 	a ClyToolbarMorph(178024192)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(498262016)
		classView: 	a ClyQueryViewMorph(945139968)
		methodGroupView: 	a ClyQueryViewMorph(609217792)
		methodView: 	a ClyQueryViewMorph(995944960)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from empty scope



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #ifEmpty:
ClyClassIconTableDecorator class(ClyClassTableDecorator class)>>decorateTableCell:of:
ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:of:
ClyClassIconTableDecorator class>>decorateMainTableCell:of:
ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:inContext:
ClyTableDecorationStrategyAnnotation>>decorateMainTableCell:inContext:
[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ] in ClyQueryViewMorph>>decorateMainTableCell:of:
SortedCollection(SequenceableCollection)>>select:thenDo:
ClyTableDecorationStrategyAnnotation class(ClassAnnotation class)>>activeInstancesInContext:do:
ClyQueryViewMorph>>decorateMainTableCell:of:
ClyMainTableColumn>>createCellFor:in:
ClyExpandedDataSource(ClyDataSource)>>cellColumn:row:
(self exposedColumnsRange: tmp3) in FTTableContainerMorph>>updateExposedRows
Interval>>do:
FTTableContainerMorph>>updateExposedRows
FTTableMorph>>resizeAllSubviews
FTTableMorph>>extent:
FTTableMorph(Morph)>>bounds:
FTTableMorph(Morph)>>layoutInBounds:
TableLayout>>layoutTopToBottom:in:
TableLayout>>layout:in:
ClyQueryViewMorph(Morph)>>doLayoutIn:
ClyQueryViewMorph(Morph)>>computeFullBounds
ClyQueryViewMorph(Morph)>>fullBounds
ClyQueryViewMorph(Morph)>>position:
ClyQueryViewMorph(Morph)>>bounds:
ClyQueryViewMorph(Morph)>>layoutInBounds:
ClyQueryViewMorph(Morph)>>layoutProportionallyIn:
[ :arg3 | arg3 layoutProportionallyIn: arg2 ] in ProportionalLayout>>layout:in:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
ProportionalLayout>>layout:in:
PanelMorph(Morph)>>doLayoutIn:
PanelMorph(Morph)>>computeFullBounds
PanelMorph(Morph)>>fullBounds
[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBounds.
			tmp2
				ifNil: [ tmp2 := tmp3 copy ]
				ifNotNil: [ tmp2 := tmp2 quickMerge: tmp3 ] ] ] in ClyFullBrowserMorph(Morph)>>submorphBounds
Array(SequenceableCollection)>>do:
ClyFullBrowserMorph(Morph)>>submorphBounds
ClyFullBrowserMorph(Morph)>>privateFullBounds
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
ClyFullBrowserMorph(Morph)>>changed
ClyFullBrowserMorph(BorderedMorph)>>borderStyle:
SystemWindow>>addMorph:fullFrame:
SystemWindow>>addMorph:frame:
ClyFullBrowserMorph(Morph)>>wrappedInWindow
ClyFullBrowserMorph(Morph)>>openInWindowLabeled:inWorld:
ClyFullBrowserMorph(Morph)>>openInWindowLabeled:
ClyFullBrowserMorph(Morph)>>openInWindow
ClyFullBrowserMorph(ClyBrowserMorph)>>open
ClyFullBrowserMorph(ClyBrowserMorph)>>openAnotherBrowser:
ClyFullBrowserMorph(ClyBrowserMorph)>>spawnBrowser:withState:
ClyFullBrowserMorph(ClyBrowserMorph)>>spawnFullBrowser
ClySpawnFullBrowserCommand>>execute
ClyFullBrowserPackageContext(ClySystemBrowserContext)>>executeCommand:by:
[
	self prepareCommandForExecution.
	context executeCommand: command by: self.
	self applyCommandResult ] in CmdCommandActivator>>executeCommand
FullBlockClosure(BlockClosure)>>on:do:
CmdCommandActivator>>executeCommand
CmdShortcutActivation>>tryExecuteCommandInContext:byEvents:
[ :arg2 |
		tmp3 := arg2 tryExecuteCommandInContext: tmp1 byEvents: arg1.
		tmp3 ifTrue: [ ^ self ] ] in CmdKMDispatcher>>dispatch:
SortedCollection(SequenceableCollection)>>select:thenDo:
CmdShortcutActivation class(ClassAnnotation class)>>visibleInstancesInContext:do:
CmdKMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :arg2 |
		arg2 dispatch: KMBuffer uniqueInstance buffer copy.
		arg1 wasHandled ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
FTTableMorph(Morph)>>dispatchKeystrokeForEvent:
FTTableMorph(Morph)>>handleKeystrokeWithKeymappings:
KMShortcutHandler>>handleKeystroke:inMorph:
FTTableMorph(Morph)>>handleKeyDown:
KeyboardEvent>>sentTo:
FTTableMorph(Morph)>>handleEvent:
FTTableMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "ifEmpty:" is nil
7 December 2024 5:53:20.676721 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #ifEmpty:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

ClyClassIconTableDecorator class(ClyClassTableDecorator class)>>decorateTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(735735296)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	a MorphExtension (293081344)
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(735735296)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class>>decorateMainTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(735735296)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	nil
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:inContext:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(735735296)
		arg2: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyTableDecorationStrategyAnnotation>>decorateMainTableCell:inContext:
	Receiver: a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(735735296)
		arg2: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		annotatedClass: 	ClyClassIconTableDecorator
		declarationSelector: 	#decorationStrategy
		priority: 	0
		activeContext: 	a ClyBrowserItemContext


[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ] in ClyQueryViewMorph>>decorateMainTableCell:of:
	Receiver: a ClyQueryViewMorph(43062016)
	Arguments and temporary variables: 
		arg1: 	a ClyFullBrowserClassContext
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	a ClyMainItemCellMorph(735735296)
		arg3: 	a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(42658048)
		submorphs: 	an Array(a FTTableMorph(768822784))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (196765184)
		table: 	a FTTableMorph(768822784)
		browser: 	a ClyFullBrowserMorph(1058159104)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


SortedCollection(SequenceableCollection)>>select:thenDo:
	Receiver: a SortedCollection(a ClyTableDecorationStrategyAnnotation(ClyClassCommentTableDecorato[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 isActiveInContext: arg1 ]
		arg2: 	[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ]
		tmp1: 	a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
		tmp2: 	25
		tmp3: 	1
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil[..]
		firstIndex: 	16
		lastIndex: 	40
		sortBlock: 	a PropertySortFunction


ClyTableDecorationStrategyAnnotation class(ClassAnnotation class)>>activeInstancesInContext:do:
	Receiver: ClyTableDecorationStrategyAnnotation
	Arguments and temporary variables: 
		arg1: 	a ClyFullBrowserClassContext
		arg2: 	[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ]
	Receiver's instance variables: 
		superclass: 	ClassAnnotation
		methodDict: 	a MethodDictionary(#annotatedClass:->ClyTableDecorationStrategy[..]
		format: 	65540
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (accessing) - 1 selector(s) Protocol (decorati[..]
		subclasses: 	nil
		name: 	#ClyTableDecorationStrategyAnnotation
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	9121576
		packageTag: 	a PackageTag(Table)
		redefinedInstances: 	nil


ClyQueryViewMorph>>decorateMainTableCell:of:
	Receiver: a ClyQueryViewMorph(43062016)
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(735735296)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(42658048)
		submorphs: 	an Array(a FTTableMorph(768822784))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (196765184)
		table: 	a FTTableMorph(768822784)
		browser: 	a ClyFullBrowserMorph(1058159104)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyMainTableColumn>>createCellFor:in:
	Receiver: a ClyMainTableColumn
	Arguments and temporary variables: 
		arg1: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		arg2: 	a ClyQueryViewMorph(43062016)
		tmp1: 	a ClyMainItemCellMorph(735735296)
	Receiver's instance variables: 
		id: 	#item
		width: 	nil
		sortingStrategy: 	a FTNullColumnSortingStrategy
		displayBlock: 	tmp2


ClyExpandedDataSource(ClyDataSource)>>cellColumn:row:
	Receiver: a ClyExpandedDataSource
	Arguments and temporary variables: 
		arg1: 	a ClyMainTableColumn
		arg2: 	1
		tmp1: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
	Receiver's instance variables: 
		table: 	a FTTableMorph(768822784)
		query: 	a ClyUnionQuery(all classes) from packages: Announcements-Core, ClyP[..]
		itemCursor: 	a ClyBrowserQueryCursor(a ClyUnionQuery(all classes) from packa[..]
		depth: 	0
		parentItem: 	nil
		lastFilteredDataSource: 	nil
		queryView: 	a ClyQueryViewMorph(43062016)
		dirty: 	false
		collapsedItems: 	a SortedCollection()


(self exposedColumnsRange: tmp3) in FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(113663488)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (87@17)
		owner: 	a FTTableMorph(768822784)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()
		startColumnIndex: 	0
		rowColors: 	nil


Interval>>do:
	Receiver: (1 to: 1)
	Arguments and temporary variables: 
		arg1: 	(self exposedColumnsRange: tmp3)
		tmp1: 	1
		tmp2: 	1
		tmp3: 	1
	Receiver's instance variables: 
		start: 	1
		stop: 	1
		step: 	1


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(113663488)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (87@17)
		owner: 	a FTTableMorph(768822784)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()
		startColumnIndex: 	0
		rowColors: 	nil


FTTableMorph>>resizeAllSubviews
	Receiver: a FTTableMorph(768822784)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(43062016)
		submorphs: 	an Array(a ScrollBarMorph(529113088) a RubTextFieldMorph(7522816[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (566364928) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(113663488)
		verticalScrollBar: 	a ScrollBarMorph(529113088)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph>>extent:
	Receiver: a FTTableMorph(768822784)
	Arguments and temporary variables: 
		arg1: 	(100@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(43062016)
		submorphs: 	an Array(a ScrollBarMorph(529113088) a RubTextFieldMorph(7522816[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (566364928) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(113663488)
		verticalScrollBar: 	a ScrollBarMorph(529113088)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph(Morph)>>bounds:
	Receiver: a FTTableMorph(768822784)
	Arguments and temporary variables: 
		arg1: 	(0@0) corner: (100@40)
		tmp1: 	(50@40)
		tmp2: 	(100@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(43062016)
		submorphs: 	an Array(a ScrollBarMorph(529113088) a RubTextFieldMorph(7522816[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (566364928) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(113663488)
		verticalScrollBar: 	a ScrollBarMorph(529113088)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph(Morph)>>layoutInBounds:
	Receiver: a FTTableMorph(768822784)
	Arguments and temporary variables: 
		arg1: 	(0@0) corner: (100@40)
		tmp1: 	(0@0) corner: (100@40)
		tmp2: 	#center
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(43062016)
		submorphs: 	an Array(a ScrollBarMorph(529113088) a RubTextFieldMorph(7522816[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (566364928) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(113663488)
		verticalScrollBar: 	a ScrollBarMorph(529113088)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


TableLayout>>layoutTopToBottom:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		arg1: 	a ClyQueryViewMorph(43062016)
		arg2: 	(0@0) corner: (8@40)
		tmp1: 	0
		tmp2: 	(8@40)
		tmp3: 	[ :arg3 |
	        | tmp25 tmp26 tmp27 tmp29 |
	        tmp29 := arg3[..]
		tmp4: 	0
		tmp5: 	0
		tmp6: 	nil
		tmp7: 	19.0
		tmp8: 	19
		tmp9: 	0
		tmp10: 	0
		tmp11: 	1073741823
		tmp12: 	1073741823
		tmp13: 	an Array(a FTTableMorph(768822784))
		tmp15: 	1
		tmp16: 	40
		tmp17: 	19.0
		tmp18: 	0
		tmp19: 	a LayoutCell
		tmp20: 	(100@21)
		tmp21: 	100
		tmp22: 	1
		tmp23: 	true
		tmp24: 	a LayoutCell
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


TableLayout>>layout:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		arg1: 	a ClyQueryViewMorph(43062016)
		arg2: 	(0@0) corner: (8@40)
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	(0@0) corner: (8@40)
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


ClyQueryViewMorph(Morph)>>doLayoutIn:
	Receiver: a ClyQueryViewMorph(43062016)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(42658048)
		submorphs: 	an Array(a FTTableMorph(768822784))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (196765184)
		table: 	a FTTableMorph(768822784)
		browser: 	a ClyFullBrowserMorph(1058159104)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>computeFullBounds
	Receiver: a ClyQueryViewMorph(43062016)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(42658048)
		submorphs: 	an Array(a FTTableMorph(768822784))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (196765184)
		table: 	a FTTableMorph(768822784)
		browser: 	a ClyFullBrowserMorph(1058159104)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>fullBounds
	Receiver: a ClyQueryViewMorph(43062016)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(42658048)
		submorphs: 	an Array(a FTTableMorph(768822784))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (196765184)
		table: 	a FTTableMorph(768822784)
		browser: 	a ClyFullBrowserMorph(1058159104)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>position:
	Receiver: a ClyQueryViewMorph(43062016)
	Arguments and temporary variables: 
		arg1: 	(13@0)
		tmp1: 	(13.0@0.0)
		tmp2: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(42658048)
		submorphs: 	an Array(a FTTableMorph(768822784))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (196765184)
		table: 	a FTTableMorph(768822784)
		browser: 	a ClyFullBrowserMorph(1058159104)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>bounds:
	Receiver: a ClyQueryViewMorph(43062016)
	Arguments and temporary variables: 
		arg1: 	(13@0) corner: (21@40)
		tmp1: 	(50@40)
		tmp2: 	(8@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(42658048)
		submorphs: 	an Array(a FTTableMorph(768822784))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (196765184)
		table: 	a FTTableMorph(768822784)
		browser: 	a ClyFullBrowserMorph(1058159104)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>layoutInBounds:
	Receiver: a ClyQueryViewMorph(43062016)
	Arguments and temporary variables: 
		arg1: 	(13@0) corner: (21@40)
		tmp1: 	(13@0) corner: (21@40)
		tmp2: 	#center
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(42658048)
		submorphs: 	an Array(a FTTableMorph(768822784))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (196765184)
		table: 	a FTTableMorph(768822784)
		browser: 	a ClyFullBrowserMorph(1058159104)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>layoutProportionallyIn:
	Receiver: a ClyQueryViewMorph(43062016)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(42658048)
		submorphs: 	an Array(a FTTableMorph(768822784))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (196765184)
		table: 	a FTTableMorph(768822784)
		browser: 	a ClyFullBrowserMorph(1058159104)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


[ :arg3 | arg3 layoutProportionallyIn: arg2 ] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(42658048)
		arg2: 	(0@0) corner: (50@40)
		arg3: 	a ClyQueryViewMorph(43062016)
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a ProportionalSplitterMorph(177734144) a ProportionalSplitterMorph(29348352) [..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 layoutProportionallyIn: arg2 ]
		tmp1: 	7
		tmp2: 	1
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(177734144) a ProportionalSplitterMorph(29348352) [..]

PanelMorph(Morph)>>submorphsDo:
	Receiver: a PanelMorph(42658048)
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 layoutProportionallyIn: arg2 ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(1058159104)
		submorphs: 	an Array(a ProportionalSplitterMorph(177734144) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (983243264) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(42658048)
		arg2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
a ProportionalLayout

PanelMorph(Morph)>>doLayoutIn:
	Receiver: a PanelMorph(42658048)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(1058159104)
		submorphs: 	an Array(a ProportionalSplitterMorph(177734144) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (983243264) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(42658048)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(1058159104)
		submorphs: 	an Array(a ProportionalSplitterMorph(177734144) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (983243264) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>fullBounds
	Receiver: a PanelMorph(42658048)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(1058159104)
		submorphs: 	an Array(a ProportionalSplitterMorph(177734144) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (983243264) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBounds.
			tmp2
				ifNil: [ tmp2 := tmp3 copy ]
				ifNotNil: [ tmp2 := tmp2 quickMerge: tmp3 ] ] ] in ClyFullBrowserMorph(Morph)>>submorphBounds
	Receiver: a ClyFullBrowserMorph(1058159104)
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(42658048)
		tmp3: 	nil
		tmp2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(224223232) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(761144320) a PanelMorph(106[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (166916352) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(42658048)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(750290432) a ClyQ[..]
		toolPanel: 	a PanelMorph(1067043584)
		toolbar: 	a ClyToolbarMorph(108654080)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(750290432)
		classView: 	a ClyQueryViewMorph(43062016)
		methodGroupView: 	a ClyQueryViewMorph(788828416)
		methodView: 	a ClyQueryViewMorph(350231296)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from empty scope


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ProportionalSplitterMorph(761144320) a PanelMorph(1067043584) a PanelMorph([..]
	Arguments and temporary variables: 
		arg1: 	[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBou[..]
		tmp1: 	3
		tmp2: 	1
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(761144320) a PanelMorph(1067043584) a PanelMorph([..]

ClyFullBrowserMorph(Morph)>>submorphBounds
	Receiver: a ClyFullBrowserMorph(1058159104)
	Arguments and temporary variables: 
		tmp2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(224223232) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(761144320) a PanelMorph(106[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (166916352) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(42658048)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(750290432) a ClyQ[..]
		toolPanel: 	a PanelMorph(1067043584)
		toolbar: 	a ClyToolbarMorph(108654080)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(750290432)
		classView: 	a ClyQueryViewMorph(43062016)
		methodGroupView: 	a ClyQueryViewMorph(788828416)
		methodView: 	a ClyQueryViewMorph(350231296)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from empty scope


ClyFullBrowserMorph(Morph)>>privateFullBounds
	Receiver: a ClyFullBrowserMorph(1058159104)
	Arguments and temporary variables: 
		tmp1: 	(0@0) corner: (915@620)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(224223232) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(761144320) a PanelMorph(106[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (166916352) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(42658048)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(750290432) a ClyQ[..]
		toolPanel: 	a PanelMorph(1067043584)
		toolbar: 	a ClyToolbarMorph(108654080)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(750290432)
		classView: 	a ClyQueryViewMorph(43062016)
		methodGroupView: 	a ClyQueryViewMorph(788828416)
		methodView: 	a ClyQueryViewMorph(350231296)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from empty scope



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #ifEmpty:
ClyClassIconTableDecorator class(ClyClassTableDecorator class)>>decorateTableCell:of:
ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:of:
ClyClassIconTableDecorator class>>decorateMainTableCell:of:
ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:inContext:
ClyTableDecorationStrategyAnnotation>>decorateMainTableCell:inContext:
[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ] in ClyQueryViewMorph>>decorateMainTableCell:of:
SortedCollection(SequenceableCollection)>>select:thenDo:
ClyTableDecorationStrategyAnnotation class(ClassAnnotation class)>>activeInstancesInContext:do:
ClyQueryViewMorph>>decorateMainTableCell:of:
ClyMainTableColumn>>createCellFor:in:
ClyExpandedDataSource(ClyDataSource)>>cellColumn:row:
(self exposedColumnsRange: tmp3) in FTTableContainerMorph>>updateExposedRows
Interval>>do:
FTTableContainerMorph>>updateExposedRows
FTTableMorph>>resizeAllSubviews
FTTableMorph>>extent:
FTTableMorph(Morph)>>bounds:
FTTableMorph(Morph)>>layoutInBounds:
TableLayout>>layoutTopToBottom:in:
TableLayout>>layout:in:
ClyQueryViewMorph(Morph)>>doLayoutIn:
ClyQueryViewMorph(Morph)>>computeFullBounds
ClyQueryViewMorph(Morph)>>fullBounds
ClyQueryViewMorph(Morph)>>position:
ClyQueryViewMorph(Morph)>>bounds:
ClyQueryViewMorph(Morph)>>layoutInBounds:
ClyQueryViewMorph(Morph)>>layoutProportionallyIn:
[ :arg3 | arg3 layoutProportionallyIn: arg2 ] in ProportionalLayout>>layout:in:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
ProportionalLayout>>layout:in:
PanelMorph(Morph)>>doLayoutIn:
PanelMorph(Morph)>>computeFullBounds
PanelMorph(Morph)>>fullBounds
[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBounds.
			tmp2
				ifNil: [ tmp2 := tmp3 copy ]
				ifNotNil: [ tmp2 := tmp2 quickMerge: tmp3 ] ] ] in ClyFullBrowserMorph(Morph)>>submorphBounds
Array(SequenceableCollection)>>do:
ClyFullBrowserMorph(Morph)>>submorphBounds
ClyFullBrowserMorph(Morph)>>privateFullBounds
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
ClyFullBrowserMorph(Morph)>>changed
ClyFullBrowserMorph(BorderedMorph)>>borderStyle:
SystemWindow>>addMorph:fullFrame:
SystemWindow>>addMorph:frame:
ClyFullBrowserMorph(Morph)>>wrappedInWindow
ClyFullBrowserMorph(Morph)>>openInWindowLabeled:inWorld:
ClyFullBrowserMorph(Morph)>>openInWindowLabeled:
ClyFullBrowserMorph(Morph)>>openInWindow
ClyFullBrowserMorph(ClyBrowserMorph)>>open
ClyFullBrowserMorph(ClyBrowserMorph)>>openAnotherBrowser:
ClyFullBrowserMorph(ClyBrowserMorph)>>spawnBrowser:withState:
ClyFullBrowserMorph(ClyBrowserMorph)>>spawnFullBrowser
ClySpawnFullBrowserCommand>>execute
ClyFullBrowserPackageContext(ClySystemBrowserContext)>>executeCommand:by:
[
	self prepareCommandForExecution.
	context executeCommand: command by: self.
	self applyCommandResult ] in CmdCommandActivator>>executeCommand
FullBlockClosure(BlockClosure)>>on:do:
CmdCommandActivator>>executeCommand
CmdShortcutActivation>>tryExecuteCommandInContext:byEvents:
[ :arg2 |
		tmp3 := arg2 tryExecuteCommandInContext: tmp1 byEvents: arg1.
		tmp3 ifTrue: [ ^ self ] ] in CmdKMDispatcher>>dispatch:
SortedCollection(SequenceableCollection)>>select:thenDo:
CmdShortcutActivation class(ClassAnnotation class)>>visibleInstancesInContext:do:
CmdKMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :arg2 |
		arg2 dispatch: KMBuffer uniqueInstance buffer copy.
		arg1 wasHandled ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
FTTableMorph(Morph)>>dispatchKeystrokeForEvent:
FTTableMorph(Morph)>>handleKeystrokeWithKeymappings:
KMShortcutHandler>>handleKeystroke:inMorph:
FTTableMorph(Morph)>>handleKeyDown:
KeyboardEvent>>sentTo:
FTTableMorph(Morph)>>handleEvent:
FTTableMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "ifEmpty:" is nil
7 December 2024 5:53:21.01497 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #ifEmpty:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

ClyClassIconTableDecorator class(ClyClassTableDecorator class)>>decorateTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(839198720)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	a MorphExtension (815373312)
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(839198720)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class>>decorateMainTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(839198720)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	nil
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:inContext:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(839198720)
		arg2: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyTableDecorationStrategyAnnotation>>decorateMainTableCell:inContext:
	Receiver: a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(839198720)
		arg2: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		annotatedClass: 	ClyClassIconTableDecorator
		declarationSelector: 	#decorationStrategy
		priority: 	0
		activeContext: 	a ClyBrowserItemContext


[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ] in ClyQueryViewMorph>>decorateMainTableCell:of:
	Receiver: a ClyQueryViewMorph(509930496)
	Arguments and temporary variables: 
		arg1: 	a ClyFullBrowserClassContext
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	a ClyMainItemCellMorph(839198720)
		arg3: 	a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(869155584)
		submorphs: 	an Array(a FTTableMorph(715471104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (88964608)
		table: 	a FTTableMorph(715471104)
		browser: 	a ClyFullBrowserMorph(505593088)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


SortedCollection(SequenceableCollection)>>select:thenDo:
	Receiver: a SortedCollection(a ClyTableDecorationStrategyAnnotation(ClyClassCommentTableDecorato[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 isActiveInContext: arg1 ]
		arg2: 	[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ]
		tmp1: 	a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
		tmp2: 	25
		tmp3: 	1
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil[..]
		firstIndex: 	16
		lastIndex: 	40
		sortBlock: 	a PropertySortFunction


ClyTableDecorationStrategyAnnotation class(ClassAnnotation class)>>activeInstancesInContext:do:
	Receiver: ClyTableDecorationStrategyAnnotation
	Arguments and temporary variables: 
		arg1: 	a ClyFullBrowserClassContext
		arg2: 	[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ]
	Receiver's instance variables: 
		superclass: 	ClassAnnotation
		methodDict: 	a MethodDictionary(#annotatedClass:->ClyTableDecorationStrategy[..]
		format: 	65540
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (accessing) - 1 selector(s) Protocol (decorati[..]
		subclasses: 	nil
		name: 	#ClyTableDecorationStrategyAnnotation
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	9121576
		packageTag: 	a PackageTag(Table)
		redefinedInstances: 	nil


ClyQueryViewMorph>>decorateMainTableCell:of:
	Receiver: a ClyQueryViewMorph(509930496)
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(839198720)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(869155584)
		submorphs: 	an Array(a FTTableMorph(715471104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (88964608)
		table: 	a FTTableMorph(715471104)
		browser: 	a ClyFullBrowserMorph(505593088)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyMainTableColumn>>createCellFor:in:
	Receiver: a ClyMainTableColumn
	Arguments and temporary variables: 
		arg1: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		arg2: 	a ClyQueryViewMorph(509930496)
		tmp1: 	a ClyMainItemCellMorph(839198720)
	Receiver's instance variables: 
		id: 	#item
		width: 	nil
		sortingStrategy: 	a FTNullColumnSortingStrategy
		displayBlock: 	tmp2


ClyExpandedDataSource(ClyDataSource)>>cellColumn:row:
	Receiver: a ClyExpandedDataSource
	Arguments and temporary variables: 
		arg1: 	a ClyMainTableColumn
		arg2: 	1
		tmp1: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
	Receiver's instance variables: 
		table: 	a FTTableMorph(715471104)
		query: 	a ClyUnionQuery(all classes) from packages: Announcements-Core, ClyP[..]
		itemCursor: 	a ClyBrowserQueryCursor(a ClyUnionQuery(all classes) from packa[..]
		depth: 	0
		parentItem: 	nil
		lastFilteredDataSource: 	nil
		queryView: 	a ClyQueryViewMorph(509930496)
		dirty: 	false
		collapsedItems: 	a SortedCollection()


(self exposedColumnsRange: tmp3) in FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(509168896)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (87@17)
		owner: 	a FTTableMorph(715471104)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()
		startColumnIndex: 	0
		rowColors: 	nil


Interval>>do:
	Receiver: (1 to: 1)
	Arguments and temporary variables: 
		arg1: 	(self exposedColumnsRange: tmp3)
		tmp1: 	1
		tmp2: 	1
		tmp3: 	1
	Receiver's instance variables: 
		start: 	1
		stop: 	1
		step: 	1


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(509168896)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (87@17)
		owner: 	a FTTableMorph(715471104)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()
		startColumnIndex: 	0
		rowColors: 	nil


FTTableMorph>>resizeAllSubviews
	Receiver: a FTTableMorph(715471104)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(509930496)
		submorphs: 	an Array(a ScrollBarMorph(546494464) a RubTextFieldMorph(1457006[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (660104448) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(509168896)
		verticalScrollBar: 	a ScrollBarMorph(546494464)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph>>extent:
	Receiver: a FTTableMorph(715471104)
	Arguments and temporary variables: 
		arg1: 	(100@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(509930496)
		submorphs: 	an Array(a ScrollBarMorph(546494464) a RubTextFieldMorph(1457006[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (660104448) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(509168896)
		verticalScrollBar: 	a ScrollBarMorph(546494464)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph(Morph)>>bounds:
	Receiver: a FTTableMorph(715471104)
	Arguments and temporary variables: 
		arg1: 	(0@0) corner: (100@40)
		tmp1: 	(50@40)
		tmp2: 	(100@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(509930496)
		submorphs: 	an Array(a ScrollBarMorph(546494464) a RubTextFieldMorph(1457006[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (660104448) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(509168896)
		verticalScrollBar: 	a ScrollBarMorph(546494464)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph(Morph)>>layoutInBounds:
	Receiver: a FTTableMorph(715471104)
	Arguments and temporary variables: 
		arg1: 	(0@0) corner: (100@40)
		tmp1: 	(0@0) corner: (100@40)
		tmp2: 	#center
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(509930496)
		submorphs: 	an Array(a ScrollBarMorph(546494464) a RubTextFieldMorph(1457006[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (660104448) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(509168896)
		verticalScrollBar: 	a ScrollBarMorph(546494464)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


TableLayout>>layoutTopToBottom:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		arg1: 	a ClyQueryViewMorph(509930496)
		arg2: 	(0@0) corner: (8@40)
		tmp1: 	0
		tmp2: 	(8@40)
		tmp3: 	[ :arg3 |
	        | tmp25 tmp26 tmp27 tmp29 |
	        tmp29 := arg3[..]
		tmp4: 	0
		tmp5: 	0
		tmp6: 	nil
		tmp7: 	19.0
		tmp8: 	19
		tmp9: 	0
		tmp10: 	0
		tmp11: 	1073741823
		tmp12: 	1073741823
		tmp13: 	an Array(a FTTableMorph(715471104))
		tmp15: 	1
		tmp16: 	40
		tmp17: 	19.0
		tmp18: 	0
		tmp19: 	a LayoutCell
		tmp20: 	(100@21)
		tmp21: 	100
		tmp22: 	1
		tmp23: 	true
		tmp24: 	a LayoutCell
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


TableLayout>>layout:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		arg1: 	a ClyQueryViewMorph(509930496)
		arg2: 	(0@0) corner: (8@40)
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	(0@0) corner: (8@40)
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


ClyQueryViewMorph(Morph)>>doLayoutIn:
	Receiver: a ClyQueryViewMorph(509930496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(869155584)
		submorphs: 	an Array(a FTTableMorph(715471104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (88964608)
		table: 	a FTTableMorph(715471104)
		browser: 	a ClyFullBrowserMorph(505593088)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>computeFullBounds
	Receiver: a ClyQueryViewMorph(509930496)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(869155584)
		submorphs: 	an Array(a FTTableMorph(715471104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (88964608)
		table: 	a FTTableMorph(715471104)
		browser: 	a ClyFullBrowserMorph(505593088)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>fullBounds
	Receiver: a ClyQueryViewMorph(509930496)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(869155584)
		submorphs: 	an Array(a FTTableMorph(715471104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (88964608)
		table: 	a FTTableMorph(715471104)
		browser: 	a ClyFullBrowserMorph(505593088)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>position:
	Receiver: a ClyQueryViewMorph(509930496)
	Arguments and temporary variables: 
		arg1: 	(13@0)
		tmp1: 	(13.0@0.0)
		tmp2: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(869155584)
		submorphs: 	an Array(a FTTableMorph(715471104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (88964608)
		table: 	a FTTableMorph(715471104)
		browser: 	a ClyFullBrowserMorph(505593088)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>bounds:
	Receiver: a ClyQueryViewMorph(509930496)
	Arguments and temporary variables: 
		arg1: 	(13@0) corner: (21@40)
		tmp1: 	(50@40)
		tmp2: 	(8@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(869155584)
		submorphs: 	an Array(a FTTableMorph(715471104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (88964608)
		table: 	a FTTableMorph(715471104)
		browser: 	a ClyFullBrowserMorph(505593088)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>layoutInBounds:
	Receiver: a ClyQueryViewMorph(509930496)
	Arguments and temporary variables: 
		arg1: 	(13@0) corner: (21@40)
		tmp1: 	(13@0) corner: (21@40)
		tmp2: 	#center
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(869155584)
		submorphs: 	an Array(a FTTableMorph(715471104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (88964608)
		table: 	a FTTableMorph(715471104)
		browser: 	a ClyFullBrowserMorph(505593088)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>layoutProportionallyIn:
	Receiver: a ClyQueryViewMorph(509930496)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(869155584)
		submorphs: 	an Array(a FTTableMorph(715471104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (88964608)
		table: 	a FTTableMorph(715471104)
		browser: 	a ClyFullBrowserMorph(505593088)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


[ :arg3 | arg3 layoutProportionallyIn: arg2 ] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(869155584)
		arg2: 	(0@0) corner: (50@40)
		arg3: 	a ClyQueryViewMorph(509930496)
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a ProportionalSplitterMorph(131620608) a ProportionalSplitterMorph(240207872)[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 layoutProportionallyIn: arg2 ]
		tmp1: 	7
		tmp2: 	1
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(131620608) a ProportionalSplitterMorph(240207872)[..]

PanelMorph(Morph)>>submorphsDo:
	Receiver: a PanelMorph(869155584)
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 layoutProportionallyIn: arg2 ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(505593088)
		submorphs: 	an Array(a ProportionalSplitterMorph(131620608) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (34768640) [sticky]  [externalName = navigation[..]
		borderWidth: 	0
		borderColor: 	Color black


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(869155584)
		arg2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
a ProportionalLayout

PanelMorph(Morph)>>doLayoutIn:
	Receiver: a PanelMorph(869155584)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(505593088)
		submorphs: 	an Array(a ProportionalSplitterMorph(131620608) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (34768640) [sticky]  [externalName = navigation[..]
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(869155584)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(505593088)
		submorphs: 	an Array(a ProportionalSplitterMorph(131620608) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (34768640) [sticky]  [externalName = navigation[..]
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>fullBounds
	Receiver: a PanelMorph(869155584)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(505593088)
		submorphs: 	an Array(a ProportionalSplitterMorph(131620608) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (34768640) [sticky]  [externalName = navigation[..]
		borderWidth: 	0
		borderColor: 	Color black


[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBounds.
			tmp2
				ifNil: [ tmp2 := tmp3 copy ]
				ifNotNil: [ tmp2 := tmp2 quickMerge: tmp3 ] ] ] in ClyFullBrowserMorph(Morph)>>submorphBounds
	Receiver: a ClyFullBrowserMorph(505593088)
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(869155584)
		tmp3: 	nil
		tmp2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(815294976) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(644052224) a PanelMorph(195[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1024823296) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(869155584)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(313881600) a ClyQ[..]
		toolPanel: 	a PanelMorph(195745536)
		toolbar: 	a ClyToolbarMorph(115276544)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(313881600)
		classView: 	a ClyQueryViewMorph(509930496)
		methodGroupView: 	a ClyQueryViewMorph(423969024)
		methodView: 	a ClyQueryViewMorph(297448960)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from empty scope


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ProportionalSplitterMorph(644052224) a PanelMorph(195745536) a PanelMorph(8[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBou[..]
		tmp1: 	3
		tmp2: 	1
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(644052224) a PanelMorph(195745536) a PanelMorph(8[..]

ClyFullBrowserMorph(Morph)>>submorphBounds
	Receiver: a ClyFullBrowserMorph(505593088)
	Arguments and temporary variables: 
		tmp2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(815294976) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(644052224) a PanelMorph(195[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1024823296) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(869155584)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(313881600) a ClyQ[..]
		toolPanel: 	a PanelMorph(195745536)
		toolbar: 	a ClyToolbarMorph(115276544)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(313881600)
		classView: 	a ClyQueryViewMorph(509930496)
		methodGroupView: 	a ClyQueryViewMorph(423969024)
		methodView: 	a ClyQueryViewMorph(297448960)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from empty scope


ClyFullBrowserMorph(Morph)>>privateFullBounds
	Receiver: a ClyFullBrowserMorph(505593088)
	Arguments and temporary variables: 
		tmp1: 	(0@0) corner: (915@620)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(815294976) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(644052224) a PanelMorph(195[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1024823296) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(869155584)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(313881600) a ClyQ[..]
		toolPanel: 	a PanelMorph(195745536)
		toolbar: 	a ClyToolbarMorph(115276544)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(313881600)
		classView: 	a ClyQueryViewMorph(509930496)
		methodGroupView: 	a ClyQueryViewMorph(423969024)
		methodView: 	a ClyQueryViewMorph(297448960)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from empty scope



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #ifEmpty:
ClyClassIconTableDecorator class(ClyClassTableDecorator class)>>decorateTableCell:of:
ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:of:
ClyClassIconTableDecorator class>>decorateMainTableCell:of:
ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:inContext:
ClyTableDecorationStrategyAnnotation>>decorateMainTableCell:inContext:
[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ] in ClyQueryViewMorph>>decorateMainTableCell:of:
SortedCollection(SequenceableCollection)>>select:thenDo:
ClyTableDecorationStrategyAnnotation class(ClassAnnotation class)>>activeInstancesInContext:do:
ClyQueryViewMorph>>decorateMainTableCell:of:
ClyMainTableColumn>>createCellFor:in:
ClyExpandedDataSource(ClyDataSource)>>cellColumn:row:
(self exposedColumnsRange: tmp3) in FTTableContainerMorph>>updateExposedRows
Interval>>do:
FTTableContainerMorph>>updateExposedRows
FTTableMorph>>resizeAllSubviews
FTTableMorph>>extent:
FTTableMorph(Morph)>>bounds:
FTTableMorph(Morph)>>layoutInBounds:
TableLayout>>layoutTopToBottom:in:
TableLayout>>layout:in:
ClyQueryViewMorph(Morph)>>doLayoutIn:
ClyQueryViewMorph(Morph)>>computeFullBounds
ClyQueryViewMorph(Morph)>>fullBounds
ClyQueryViewMorph(Morph)>>position:
ClyQueryViewMorph(Morph)>>bounds:
ClyQueryViewMorph(Morph)>>layoutInBounds:
ClyQueryViewMorph(Morph)>>layoutProportionallyIn:
[ :arg3 | arg3 layoutProportionallyIn: arg2 ] in ProportionalLayout>>layout:in:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
ProportionalLayout>>layout:in:
PanelMorph(Morph)>>doLayoutIn:
PanelMorph(Morph)>>computeFullBounds
PanelMorph(Morph)>>fullBounds
[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBounds.
			tmp2
				ifNil: [ tmp2 := tmp3 copy ]
				ifNotNil: [ tmp2 := tmp2 quickMerge: tmp3 ] ] ] in ClyFullBrowserMorph(Morph)>>submorphBounds
Array(SequenceableCollection)>>do:
ClyFullBrowserMorph(Morph)>>submorphBounds
ClyFullBrowserMorph(Morph)>>privateFullBounds
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
ClyFullBrowserMorph(Morph)>>changed
ClyFullBrowserMorph(BorderedMorph)>>borderStyle:
SystemWindow>>addMorph:fullFrame:
SystemWindow>>addMorph:frame:
ClyFullBrowserMorph(Morph)>>wrappedInWindow
ClyFullBrowserMorph(Morph)>>openInWindowLabeled:inWorld:
ClyFullBrowserMorph(Morph)>>openInWindowLabeled:
ClyFullBrowserMorph(Morph)>>openInWindow
ClyFullBrowserMorph(ClyBrowserMorph)>>open
ClyFullBrowserMorph(ClyBrowserMorph)>>openAnotherBrowser:
ClyFullBrowserMorph(ClyBrowserMorph)>>spawnBrowser:withState:
ClyFullBrowserMorph(ClyBrowserMorph)>>spawnFullBrowser
ClySpawnFullBrowserCommand>>execute
ClyFullBrowserPackageContext(ClySystemBrowserContext)>>executeCommand:by:
[
	self prepareCommandForExecution.
	context executeCommand: command by: self.
	self applyCommandResult ] in CmdCommandActivator>>executeCommand
FullBlockClosure(BlockClosure)>>on:do:
CmdCommandActivator>>executeCommand
CmdShortcutActivation>>tryExecuteCommandInContext:byEvents:
[ :arg2 |
		tmp3 := arg2 tryExecuteCommandInContext: tmp1 byEvents: arg1.
		tmp3 ifTrue: [ ^ self ] ] in CmdKMDispatcher>>dispatch:
SortedCollection(SequenceableCollection)>>select:thenDo:
CmdShortcutActivation class(ClassAnnotation class)>>visibleInstancesInContext:do:
CmdKMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :arg2 |
		arg2 dispatch: KMBuffer uniqueInstance buffer copy.
		arg1 wasHandled ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
FTTableMorph(Morph)>>dispatchKeystrokeForEvent:
FTTableMorph(Morph)>>handleKeystrokeWithKeymappings:
KMShortcutHandler>>handleKeystroke:inMorph:
FTTableMorph(Morph)>>handleKeyDown:
KeyboardEvent>>sentTo:
FTTableMorph(Morph)>>handleEvent:
FTTableMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "ifEmpty:" is nil
7 December 2024 5:53:21.202331 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #ifEmpty:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

ClyClassIconTableDecorator class(ClyClassTableDecorator class)>>decorateTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(902717696)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	a MorphExtension (5150208)
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(902717696)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class>>decorateMainTableCell:of:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(902717696)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	nil
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:inContext:
	Receiver: ClyClassIconTableDecorator
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(902717696)
		arg2: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		superclass: 	ClyClassTableDecorator
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#ClyClassIconTableDecorator
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	6987934
		packageTag: 	a PackageTag(TableDecorators)


ClyTableDecorationStrategyAnnotation>>decorateMainTableCell:inContext:
	Receiver: a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(902717696)
		arg2: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		annotatedClass: 	ClyClassIconTableDecorator
		declarationSelector: 	#decorationStrategy
		priority: 	0
		activeContext: 	a ClyBrowserItemContext


[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ] in ClyQueryViewMorph>>decorateMainTableCell:of:
	Receiver: a ClyQueryViewMorph(91076608)
	Arguments and temporary variables: 
		arg1: 	a ClyFullBrowserClassContext
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	a ClyMainItemCellMorph(902717696)
		arg3: 	a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(643795968)
		submorphs: 	an Array(a FTTableMorph(183280384))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (903207168)
		table: 	a FTTableMorph(183280384)
		browser: 	a ClyFullBrowserMorph(101330176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


SortedCollection(SequenceableCollection)>>select:thenDo:
	Receiver: a SortedCollection(a ClyTableDecorationStrategyAnnotation(ClyClassCommentTableDecorato[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 isActiveInContext: arg1 ]
		arg2: 	[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ]
		tmp1: 	a ClyTableDecorationStrategyAnnotation(ClyClassIconTableDecorator; 0)
		tmp2: 	25
		tmp3: 	1
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil[..]
		firstIndex: 	16
		lastIndex: 	40
		sortBlock: 	a PropertySortFunction


ClyTableDecorationStrategyAnnotation class(ClassAnnotation class)>>activeInstancesInContext:do:
	Receiver: ClyTableDecorationStrategyAnnotation
	Arguments and temporary variables: 
		arg1: 	a ClyFullBrowserClassContext
		arg2: 	[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ]
	Receiver's instance variables: 
		superclass: 	ClassAnnotation
		methodDict: 	a MethodDictionary(#annotatedClass:->ClyTableDecorationStrategy[..]
		format: 	65540
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (accessing) - 1 selector(s) Protocol (decorati[..]
		subclasses: 	nil
		name: 	#ClyTableDecorationStrategyAnnotation
		classPool: 	nil
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	9121576
		packageTag: 	a PackageTag(Table)
		redefinedInstances: 	nil


ClyQueryViewMorph>>decorateMainTableCell:of:
	Receiver: a ClyQueryViewMorph(91076608)
	Arguments and temporary variables: 
		arg1: 	a ClyMainItemCellMorph(902717696)
		arg2: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		tmp1: 	a ClyFullBrowserClassContext
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(643795968)
		submorphs: 	an Array(a FTTableMorph(183280384))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (903207168)
		table: 	a FTTableMorph(183280384)
		browser: 	a ClyFullBrowserMorph(101330176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyMainTableColumn>>createCellFor:in:
	Receiver: a ClyMainTableColumn
	Arguments and temporary variables: 
		arg1: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
		arg2: 	a ClyQueryViewMorph(91076608)
		tmp1: 	a ClyMainItemCellMorph(902717696)
	Receiver's instance variables: 
		id: 	#item
		width: 	nil
		sortingStrategy: 	a FTNullColumnSortingStrategy
		displayBlock: 	tmp2


ClyExpandedDataSource(ClyDataSource)>>cellColumn:row:
	Receiver: a ClyExpandedDataSource
	Arguments and temporary variables: 
		arg1: 	a ClyMainTableColumn
		arg2: 	1
		tmp1: 	a ClyDataSourceItem(AbstractAnnouncementSubscription)
	Receiver's instance variables: 
		table: 	a FTTableMorph(183280384)
		query: 	a ClyUnionQuery(all classes) from packages: Announcements-Core, ClyP[..]
		itemCursor: 	a ClyBrowserQueryCursor(a ClyUnionQuery(all classes) from packa[..]
		depth: 	0
		parentItem: 	nil
		lastFilteredDataSource: 	nil
		queryView: 	a ClyQueryViewMorph(91076608)
		dirty: 	false
		collapsedItems: 	a SortedCollection()


(self exposedColumnsRange: tmp3) in FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(667504896)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (87@17)
		owner: 	a FTTableMorph(183280384)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()
		startColumnIndex: 	0
		rowColors: 	nil


Interval>>do:
	Receiver: (1 to: 1)
	Arguments and temporary variables: 
		arg1: 	(self exposedColumnsRange: tmp3)
		tmp1: 	1
		tmp2: 	1
		tmp3: 	1
	Receiver's instance variables: 
		start: 	1
		stop: 	1
		step: 	1


FTTableContainerMorph>>updateExposedRows
	Receiver: a FTTableContainerMorph(667504896)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (87@17)
		owner: 	a FTTableMorph(183280384)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	nil
		needsRefreshExposedRows: 	true
		headerRow: 	nil
		exposedRows: 	a SmallDictionary()
		startColumnIndex: 	0
		rowColors: 	nil


FTTableMorph>>resizeAllSubviews
	Receiver: a FTTableMorph(183280384)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(91076608)
		submorphs: 	an Array(a ScrollBarMorph(871240960) a RubTextFieldMorph(3309053[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (618016768) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(667504896)
		verticalScrollBar: 	a ScrollBarMorph(871240960)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph>>extent:
	Receiver: a FTTableMorph(183280384)
	Arguments and temporary variables: 
		arg1: 	(100@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(91076608)
		submorphs: 	an Array(a ScrollBarMorph(871240960) a RubTextFieldMorph(3309053[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (618016768) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(667504896)
		verticalScrollBar: 	a ScrollBarMorph(871240960)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph(Morph)>>bounds:
	Receiver: a FTTableMorph(183280384)
	Arguments and temporary variables: 
		arg1: 	(0@0) corner: (100@40)
		tmp1: 	(50@40)
		tmp2: 	(100@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(91076608)
		submorphs: 	an Array(a ScrollBarMorph(871240960) a RubTextFieldMorph(3309053[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (618016768) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(667504896)
		verticalScrollBar: 	a ScrollBarMorph(871240960)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


FTTableMorph(Morph)>>layoutInBounds:
	Receiver: a FTTableMorph(183280384)
	Arguments and temporary variables: 
		arg1: 	(0@0) corner: (100@40)
		tmp1: 	(0@0) corner: (100@40)
		tmp2: 	#center
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (100@40)
		owner: 	a ClyQueryViewMorph(91076608)
		submorphs: 	an Array(a ScrollBarMorph(871240960) a RubTextFieldMorph(3309053[..]
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (618016768) [other:  (announcer -> an Announcer[..]
		container: 	a FTTableContainerMorph(667504896)
		verticalScrollBar: 	a ScrollBarMorph(871240960)
		horizontalScrollBar: 	nil
		selectionColor: 	nil
		selectedIndexes: 	#()
		highlightedIndexes: 	#()
		showIndex: 	1
		dataSource: 	a ClyExpandedDataSource
		intercellSpacing: 	nil
		rowHeight: 	20.333333333333336
		selectionStrategy: 	a FTMultipleSelectionStrategy
		columns: 	an Array(a ClyMainTableColumn)
		secondarySelectionColor: 	nil
		headerColor: 	nil
		showColumnHeaders: 	true
		allowsDeselection: 	true
		needToggleAtMouseUp: 	false
		function: 	a FTFilterFunction
		resizable: 	true
		selectionModeStrategy: 	a FTRowSelectionModeStrategy


TableLayout>>layoutTopToBottom:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		arg1: 	a ClyQueryViewMorph(91076608)
		arg2: 	(0@0) corner: (8@40)
		tmp1: 	0
		tmp2: 	(8@40)
		tmp3: 	[ :arg3 |
	        | tmp25 tmp26 tmp27 tmp29 |
	        tmp29 := arg3[..]
		tmp4: 	0
		tmp5: 	0
		tmp6: 	nil
		tmp7: 	19.0
		tmp8: 	19
		tmp9: 	0
		tmp10: 	0
		tmp11: 	1073741823
		tmp12: 	1073741823
		tmp13: 	an Array(a FTTableMorph(183280384))
		tmp15: 	1
		tmp16: 	40
		tmp17: 	19.0
		tmp18: 	0
		tmp19: 	a LayoutCell
		tmp20: 	(100@21)
		tmp21: 	100
		tmp22: 	1
		tmp23: 	true
		tmp24: 	a LayoutCell
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


TableLayout>>layout:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		arg1: 	a ClyQueryViewMorph(91076608)
		arg2: 	(0@0) corner: (8@40)
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	(0@0) corner: (8@40)
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


ClyQueryViewMorph(Morph)>>doLayoutIn:
	Receiver: a ClyQueryViewMorph(91076608)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(643795968)
		submorphs: 	an Array(a FTTableMorph(183280384))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (903207168)
		table: 	a FTTableMorph(183280384)
		browser: 	a ClyFullBrowserMorph(101330176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>computeFullBounds
	Receiver: a ClyQueryViewMorph(91076608)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(643795968)
		submorphs: 	an Array(a FTTableMorph(183280384))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (903207168)
		table: 	a FTTableMorph(183280384)
		browser: 	a ClyFullBrowserMorph(101330176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>fullBounds
	Receiver: a ClyQueryViewMorph(91076608)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(643795968)
		submorphs: 	an Array(a FTTableMorph(183280384))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (903207168)
		table: 	a FTTableMorph(183280384)
		browser: 	a ClyFullBrowserMorph(101330176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>position:
	Receiver: a ClyQueryViewMorph(91076608)
	Arguments and temporary variables: 
		arg1: 	(13@0)
		tmp1: 	(13.0@0.0)
		tmp2: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(643795968)
		submorphs: 	an Array(a FTTableMorph(183280384))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (903207168)
		table: 	a FTTableMorph(183280384)
		browser: 	a ClyFullBrowserMorph(101330176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>bounds:
	Receiver: a ClyQueryViewMorph(91076608)
	Arguments and temporary variables: 
		arg1: 	(13@0) corner: (21@40)
		tmp1: 	(50@40)
		tmp2: 	(8@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(643795968)
		submorphs: 	an Array(a FTTableMorph(183280384))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (903207168)
		table: 	a FTTableMorph(183280384)
		browser: 	a ClyFullBrowserMorph(101330176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>layoutInBounds:
	Receiver: a ClyQueryViewMorph(91076608)
	Arguments and temporary variables: 
		arg1: 	(13@0) corner: (21@40)
		tmp1: 	(13@0) corner: (21@40)
		tmp2: 	#center
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(643795968)
		submorphs: 	an Array(a FTTableMorph(183280384))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (903207168)
		table: 	a FTTableMorph(183280384)
		browser: 	a ClyFullBrowserMorph(101330176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


ClyQueryViewMorph(Morph)>>layoutProportionallyIn:
	Receiver: a ClyQueryViewMorph(91076608)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (8@40)
		owner: 	a PanelMorph(643795968)
		submorphs: 	an Array(a FTTableMorph(183280384))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (903207168)
		table: 	a FTTableMorph(183280384)
		browser: 	a ClyFullBrowserMorph(101330176)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection()
		desiredSelection: 	nil
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	#classSelectionChanged
		dataSourceClass: 	ClyExpandedDataSource
		hoverOverDropItemStartTime: 	nil
		targetDropItem: 	nil


[ :arg3 | arg3 layoutProportionallyIn: arg2 ] in ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(643795968)
		arg2: 	(0@0) corner: (50@40)
		arg3: 	a ClyQueryViewMorph(91076608)
	Receiver's instance variables: 
a ProportionalLayout

Array(SequenceableCollection)>>do:
	Receiver: an Array(a ProportionalSplitterMorph(796432128) a ProportionalSplitterMorph(370541824)[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 layoutProportionallyIn: arg2 ]
		tmp1: 	7
		tmp2: 	1
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(796432128) a ProportionalSplitterMorph(370541824)[..]

PanelMorph(Morph)>>submorphsDo:
	Receiver: a PanelMorph(643795968)
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 layoutProportionallyIn: arg2 ]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(101330176)
		submorphs: 	an Array(a ProportionalSplitterMorph(796432128) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (171257600) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


ProportionalLayout>>layout:in:
	Receiver: a ProportionalLayout
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(643795968)
		arg2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
a ProportionalLayout

PanelMorph(Morph)>>doLayoutIn:
	Receiver: a PanelMorph(643795968)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(101330176)
		submorphs: 	an Array(a ProportionalSplitterMorph(796432128) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (171257600) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(643795968)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(101330176)
		submorphs: 	an Array(a ProportionalSplitterMorph(796432128) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (171257600) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>fullBounds
	Receiver: a PanelMorph(643795968)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a ClyFullBrowserMorph(101330176)
		submorphs: 	an Array(a ProportionalSplitterMorph(796432128) a ProportionalSp[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (171257600) [sticky]  [externalName = navigatio[..]
		borderWidth: 	0
		borderColor: 	Color black


[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBounds.
			tmp2
				ifNil: [ tmp2 := tmp3 copy ]
				ifNotNil: [ tmp2 := tmp2 quickMerge: tmp3 ] ] ] in ClyFullBrowserMorph(Morph)>>submorphBounds
	Receiver: a ClyFullBrowserMorph(101330176)
	Arguments and temporary variables: 
		arg1: 	a PanelMorph(643795968)
		tmp3: 	nil
		tmp2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(486869760) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(908164096) a PanelMorph(275[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (915416832) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(643795968)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(839185664) a ClyQ[..]
		toolPanel: 	a PanelMorph(275277824)
		toolbar: 	a ClyToolbarMorph(595403264)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(839185664)
		classView: 	a ClyQueryViewMorph(91076608)
		methodGroupView: 	a ClyQueryViewMorph(743944704)
		methodView: 	a ClyQueryViewMorph(829648128)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from empty scope


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ProportionalSplitterMorph(908164096) a PanelMorph(275277824) a PanelMorph(6[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBou[..]
		tmp1: 	3
		tmp2: 	1
	Receiver's instance variables: 
an Array(a ProportionalSplitterMorph(908164096) a PanelMorph(275277824) a PanelMorph(6[..]

ClyFullBrowserMorph(Morph)>>submorphBounds
	Receiver: a ClyFullBrowserMorph(101330176)
	Arguments and temporary variables: 
		tmp2: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(486869760) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(908164096) a PanelMorph(275[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (915416832) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(643795968)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(839185664) a ClyQ[..]
		toolPanel: 	a PanelMorph(275277824)
		toolbar: 	a ClyToolbarMorph(595403264)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(839185664)
		classView: 	a ClyQueryViewMorph(91076608)
		methodGroupView: 	a ClyQueryViewMorph(743944704)
		methodView: 	a ClyQueryViewMorph(829648128)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from empty scope


ClyFullBrowserMorph(Morph)>>privateFullBounds
	Receiver: a ClyFullBrowserMorph(101330176)
	Arguments and temporary variables: 
		tmp1: 	(0@0) corner: (915@620)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (915@620)
		owner: 	a SystemWindow(486869760) named: Untitled Window
		submorphs: 	an Array(a ProportionalSplitterMorph(908164096) a PanelMorph(275[..]
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (915416832) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.823069403714565 g: 0.823069403714565 b: 0.82306940[..]
		navigationPanel: 	a PanelMorph(643795968)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(839185664) a ClyQ[..]
		toolPanel: 	a PanelMorph(275277824)
		toolbar: 	a ClyToolbarMorph(595403264)
		tabManager: 	a ClyNotebookManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnal[..]
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(Current image)
		packageView: 	a ClyQueryViewMorph(839185664)
		classView: 	a ClyQueryViewMorph(91076608)
		methodGroupView: 	a ClyQueryViewMorph(743944704)
		methodView: 	a ClyQueryViewMorph(829648128)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from empty scope



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #ifEmpty:
ClyClassIconTableDecorator class(ClyClassTableDecorator class)>>decorateTableCell:of:
ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:of:
ClyClassIconTableDecorator class>>decorateMainTableCell:of:
ClyClassIconTableDecorator class(ClyTableDecorator class)>>decorateMainTableCell:inContext:
ClyTableDecorationStrategyAnnotation>>decorateMainTableCell:inContext:
[ :arg3 | arg3 decorateMainTableCell: arg1 inContext: tmp1 ] in ClyQueryViewMorph>>decorateMainTableCell:of:
SortedCollection(SequenceableCollection)>>select:thenDo:
ClyTableDecorationStrategyAnnotation class(ClassAnnotation class)>>activeInstancesInContext:do:
ClyQueryViewMorph>>decorateMainTableCell:of:
ClyMainTableColumn>>createCellFor:in:
ClyExpandedDataSource(ClyDataSource)>>cellColumn:row:
(self exposedColumnsRange: tmp3) in FTTableContainerMorph>>updateExposedRows
Interval>>do:
FTTableContainerMorph>>updateExposedRows
FTTableMorph>>resizeAllSubviews
FTTableMorph>>extent:
FTTableMorph(Morph)>>bounds:
FTTableMorph(Morph)>>layoutInBounds:
TableLayout>>layoutTopToBottom:in:
TableLayout>>layout:in:
ClyQueryViewMorph(Morph)>>doLayoutIn:
ClyQueryViewMorph(Morph)>>computeFullBounds
ClyQueryViewMorph(Morph)>>fullBounds
ClyQueryViewMorph(Morph)>>position:
ClyQueryViewMorph(Morph)>>bounds:
ClyQueryViewMorph(Morph)>>layoutInBounds:
ClyQueryViewMorph(Morph)>>layoutProportionallyIn:
[ :arg3 | arg3 layoutProportionallyIn: arg2 ] in ProportionalLayout>>layout:in:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
ProportionalLayout>>layout:in:
PanelMorph(Morph)>>doLayoutIn:
PanelMorph(Morph)>>computeFullBounds
PanelMorph(Morph)>>fullBounds
[ :arg1 |
		| tmp3 |
		arg1 visible ifTrue: [
			tmp3 := arg1 fullBounds.
			tmp2
				ifNil: [ tmp2 := tmp3 copy ]
				ifNotNil: [ tmp2 := tmp2 quickMerge: tmp3 ] ] ] in ClyFullBrowserMorph(Morph)>>submorphBounds
Array(SequenceableCollection)>>do:
ClyFullBrowserMorph(Morph)>>submorphBounds
ClyFullBrowserMorph(Morph)>>privateFullBounds
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
ClyFullBrowserMorph(Morph)>>changed
ClyFullBrowserMorph(BorderedMorph)>>borderStyle:
SystemWindow>>addMorph:fullFrame:
SystemWindow>>addMorph:frame:
ClyFullBrowserMorph(Morph)>>wrappedInWindow
ClyFullBrowserMorph(Morph)>>openInWindowLabeled:inWorld:
ClyFullBrowserMorph(Morph)>>openInWindowLabeled:
ClyFullBrowserMorph(Morph)>>openInWindow
ClyFullBrowserMorph(ClyBrowserMorph)>>open
ClyFullBrowserMorph(ClyBrowserMorph)>>openAnotherBrowser:
ClyFullBrowserMorph(ClyBrowserMorph)>>spawnBrowser:withState:
ClyFullBrowserMorph(ClyBrowserMorph)>>spawnFullBrowser
ClySpawnFullBrowserCommand>>execute
ClyFullBrowserPackageContext(ClySystemBrowserContext)>>executeCommand:by:
[
	self prepareCommandForExecution.
	context executeCommand: command by: self.
	self applyCommandResult ] in CmdCommandActivator>>executeCommand
FullBlockClosure(BlockClosure)>>on:do:
CmdCommandActivator>>executeCommand
CmdShortcutActivation>>tryExecuteCommandInContext:byEvents:
[ :arg2 |
		tmp3 := arg2 tryExecuteCommandInContext: tmp1 byEvents: arg1.
		tmp3 ifTrue: [ ^ self ] ] in CmdKMDispatcher>>dispatch:
SortedCollection(SequenceableCollection)>>select:thenDo:
CmdShortcutActivation class(ClassAnnotation class)>>visibleInstancesInContext:do:
CmdKMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :arg2 |
		arg2 dispatch: KMBuffer uniqueInstance buffer copy.
		arg1 wasHandled ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
FTTableMorph(Morph)>>dispatchKeystrokeForEvent:
FTTableMorph(Morph)>>handleKeystrokeWithKeymappings:
KMShortcutHandler>>handleKeystroke:inMorph:
FTTableMorph(Morph)>>handleKeyDown:
KeyboardEvent>>sentTo:
FTTableMorph(Morph)>>handleEvent:
FTTableMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "includesSubstring:caseSensitive:" is nil
7 December 2024 5:56:24.963943 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #includesSubstring:caseSensitive:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)
				 includesSubstring: arg1
				 caseSensitive: arg2) ifTrue: [ tmp2 value: arg6 value: arg7 ] ].
		(arg6 comment includesSubstring: arg1 caseSensitive: arg2) ifTrue: [
			tmp3 value: arg6 ] ] in SystemNavigation>>allMethodsWithSourceString:matchCase:
	Receiver: a SystemNavigation
	Arguments and temporary variables: 
		arg1: 	''
		arg2: 	false
		tmp1: 	an OrderedCollection()
		tmp2: 	[ :arg5 | tmp1 add: (RGCommentDefinition realClass: arg5) ]
		tmp3: 	[ :arg3 :arg4 | tmp1 add: arg3 >> arg4 ]
		arg6: 	AColorSelectorMorph
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)


OrderedCollection>>do:
	Receiver: an OrderedCollection(AColorSelectorMorph AColorSelectorMorph class AIAstar AIAstar cla[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)[..]
		tmp1: 	20802
		tmp2: 	1
	Receiver's instance variables: 
		array: 	{AColorSelectorMorph. AColorSelectorMorph class. AIAstar. AIAstar cl[..]
		firstIndex: 	1
		lastIndex: 	20802


SystemDictionary>>allBehaviorsDo:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		arg1: 	[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)[..]
	Receiver's instance variables: 
		tally: 	10450
		array: 	an Array(nil nil #ASTCache->ASTCache #ClyMethodGroupProviderTest->Cl[..]
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AIAstar #AIAst[..]
		cachedNonClassNames: 	an OrderedCollection(#ActiveWorld #CategoryAdded #Cate[..]
		cachedBehaviors: 	an OrderedCollection(AColorSelectorMorph AColorSelectorMor[..]
		pseudoVariables: 	a Dictionary(#self->self #super->super #thisContext->thisC[..]


SystemNavigation>>allBehaviorsDo:
	Receiver: a SystemNavigation
	Arguments and temporary variables: 
		arg1: 	[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)[..]
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)


SystemNavigation>>allMethodsWithSourceString:matchCase:
	Receiver: a SystemNavigation
	Arguments and temporary variables: 
		arg1: 	''
		arg2: 	false
		tmp1: 	an OrderedCollection()
		tmp2: 	[ :arg3 :arg4 | tmp1 add: arg3 >> arg4 ]
		tmp3: 	[ :arg5 | tmp1 add: (RGCommentDefinition realClass: arg5) ]
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)


SystemNavigation>>browseMethodsWithSourceString:matchCase:
	Receiver: a SystemNavigation
	Arguments and temporary variables: 
		arg1: 	''
		arg2: 	false
		tmp1: 	' (case-insensitive)'
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)


SpCodePresenter>>doBrowseMethodsContainingString
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (23 to: 22) ]
		text: 	an ObservableValueHolder[ '| j |

MyCounter new.

j := MyCounter valu[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


SpBrowseMethodsContainingStringCommand>>execute
	Receiver: a SpBrowseMethodsContainingStringCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Method source with it'
		basicDescription: 	'Browse all methods containing the selected string'
		transform: 	[ :arg1 | arg1 ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Method source with it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpBrowseMethodsContainingStringCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallSystemBrowser
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Method source with it)


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Method source with it)


[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
	Receiver: a SpMenuPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpMenuItemPresenter
		arg2: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ arg2 execute ]
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpMenuPresenterBuilder>>fillItem:with:
		compiledBlock: 	a CompiledBlock: [ arg2 execute ]
		numArgs: 	0
		receiver: 	a SpMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
		tmp1: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ [ arg1 canBeExecuted ] ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Method source with it' ]
		icon: 	an ObservableValueHolder[ Form(16x16x32) ]
		description: 	an ObservableValueHolder[ 'Browse all methods containing the s[..]
		action: 	[ arg2 execute ]
		shortcut: 	nil
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(697081600)'Method source with it'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(697081600)'Method source with it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(839.0@534.0) corner: (1192.0@552.0)
		owner: 	a MenuMorph(284943104)
		submorphs: 	#()
		fullBounds: 	(839.0@534.0) corner: (1192.0@552.0)
		color: 	Color black
		extension: 	a MorphExtension (513080320) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: Cursor normal
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	[ tmp1 show ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: Cursor normal
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(697081600)'Method source with it'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		arg1: 	Cursor normal
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(697081600)'Method source with it'
	Arguments and temporary variables: 
		arg1: 	[(989@543) mouseUp 1866866 nil]
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(839.0@534.0) corner: (1192.0@552.0)
		owner: 	a MenuMorph(284943104)
		submorphs: 	#()
		fullBounds: 	(839.0@534.0) corner: (1192.0@552.0)
		color: 	Color black
		extension: 	a MorphExtension (513080320) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(697081600)'Method source with it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(839.0@534.0) corner: (1192.0@552.0)
		owner: 	a MenuMorph(284943104)
		submorphs: 	#()
		fullBounds: 	(839.0@534.0) corner: (1192.0@552.0)
		color: 	Color black
		extension: 	a MorphExtension (513080320) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(697081600)'Method source with it'
	Arguments and temporary variables: 
		arg1: 	[(989@543) mouseUp 1866866 nil]
	Receiver's instance variables: 
		bounds: 	(839.0@534.0) corner: (1192.0@552.0)
		owner: 	a MenuMorph(284943104)
		submorphs: 	#()
		fullBounds: 	(839.0@534.0) corner: (1192.0@552.0)
		color: 	Color black
		extension: 	a MorphExtension (513080320) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(989@543) mouseUp 1866866 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToggleMenuItemMorph(697081600)'Method source with it'
	Receiver's instance variables: 
		timeStamp: 	1866866
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(989@543)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(697081600)'Method source with it'
	Arguments and temporary variables: 
		arg1: 	[(989@543) mouseUp 1866866 nil]
	Receiver's instance variables: 
		bounds: 	(839.0@534.0) corner: (1192.0@552.0)
		owner: 	a MenuMorph(284943104)
		submorphs: 	#()
		fullBounds: 	(839.0@534.0) corner: (1192.0@552.0)
		color: 	Color black
		extension: 	a MorphExtension (513080320) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(989@543) mouseUp 1866866 nil]
		arg2: 	a SpToggleMenuItemMorph(697081600)'Method source with it'
		tmp1: 	nil
		tmp2: 	1
		tmp3: 	nil
		tmp4: 	#()
		tmp5: 	true
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(697081600)'Method source with it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(989@543) mouseUp 1866866 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(697081600)'Method source with it'


MouseButtonEvent>>sentTo:
	Receiver: [(989@543) mouseUp 1866866 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1866866
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(989@543)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(989@543) mouseUp 1866866 nil]
		arg2: 	a SpToggleMenuItemMorph(697081600)'Method source with it'
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(697081600)'Method source with it'


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ arg1 sentTo: self ]
	Arguments and temporary variables: 
		arg1: 	[ morph := nil ]
		tmp1: 	[ morph := nil ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		compiledBlock: 	a CompiledBlock: [ ^ arg1 sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(989@543) mouseUp 1866866 nil]
		arg2: 	a SpToggleMenuItemMorph(697081600)'Method source with it'
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(697081600)'Method source with it'


SpToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a SpToggleMenuItemMorph(697081600)'Method source with it'
	Arguments and temporary variables: 
		arg1: 	[(989@543) mouseUp 1866866 nil]
		arg2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(839.0@534.0) corner: (1192.0@552.0)
		owner: 	a MenuMorph(284943104)
		submorphs: 	#()
		fullBounds: 	(839.0@534.0) corner: (1192.0@552.0)
		color: 	Color black
		extension: 	a MorphExtension (513080320) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(989@543) mouseUp 1866866 nil]
		arg2: 	a MenuMorph(284943104)
		tmp1: 	[(989@543) mouseUp 1866866 nil]
		tmp2: 	7
		tmp3: 	a SpToggleMenuItemMorph(697081600)'Method source with it'
		tmp4: 	an Array(a SpToggleMenuItemMorph(151020544)'Browse full class' a SpTo[..]
		tmp5: 	false
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(697081600)'Method source with it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(989@543) mouseUp 1866866 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(697081600)'Method source with it'


MouseButtonEvent>>sentTo:
	Receiver: [(989@543) mouseUp 1866866 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1866866
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(989@543)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(989@543) mouseUp 1866866 nil]
		arg2: 	a MenuMorph(284943104)
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(697081600)'Method source with it'



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #includesSubstring:caseSensitive:
[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)
				 includesSubstring: arg1
				 caseSensitive: arg2) ifTrue: [ tmp2 value: arg6 value: arg7 ] ].
		(arg6 comment includesSubstring: arg1 caseSensitive: arg2) ifTrue: [
			tmp3 value: arg6 ] ] in SystemNavigation>>allMethodsWithSourceString:matchCase:
OrderedCollection>>do:
SystemDictionary>>allBehaviorsDo:
SystemNavigation>>allBehaviorsDo:
SystemNavigation>>allMethodsWithSourceString:matchCase:
SystemNavigation>>browseMethodsWithSourceString:matchCase:
SpCodePresenter>>doBrowseMethodsContainingString
SpBrowseMethodsContainingStringCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "includesSubstring:caseSensitive:" is nil
7 December 2024 5:56:31.1952 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #includesSubstring:caseSensitive:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)
				 includesSubstring: arg1
				 caseSensitive: arg2) ifTrue: [ tmp2 value: arg6 value: arg7 ] ].
		(arg6 comment includesSubstring: arg1 caseSensitive: arg2) ifTrue: [
			tmp3 value: arg6 ] ] in SystemNavigation>>allMethodsWithSourceString:matchCase:
	Receiver: a SystemNavigation
	Arguments and temporary variables: 
		arg1: 	'MyCounter value'
		arg2: 	false
		tmp1: 	an OrderedCollection()
		tmp2: 	[ :arg5 | tmp1 add: (RGCommentDefinition realClass: arg5) ]
		tmp3: 	[ :arg3 :arg4 | tmp1 add: arg3 >> arg4 ]
		arg6: 	AColorSelectorMorph
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)


OrderedCollection>>do:
	Receiver: an OrderedCollection(AColorSelectorMorph AColorSelectorMorph class AIAstar AIAstar cla[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)[..]
		tmp1: 	20802
		tmp2: 	1
	Receiver's instance variables: 
		array: 	{AColorSelectorMorph. AColorSelectorMorph class. AIAstar. AIAstar cl[..]
		firstIndex: 	1
		lastIndex: 	20802


SystemDictionary>>allBehaviorsDo:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		arg1: 	[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)[..]
	Receiver's instance variables: 
		tally: 	10450
		array: 	an Array(nil nil #ASTCache->ASTCache #ClyMethodGroupProviderTest->Cl[..]
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AIAstar #AIAst[..]
		cachedNonClassNames: 	an OrderedCollection(#ActiveWorld #CategoryAdded #Cate[..]
		cachedBehaviors: 	an OrderedCollection(AColorSelectorMorph AColorSelectorMor[..]
		pseudoVariables: 	a Dictionary(#self->self #super->super #thisContext->thisC[..]


SystemNavigation>>allBehaviorsDo:
	Receiver: a SystemNavigation
	Arguments and temporary variables: 
		arg1: 	[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)[..]
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)


SystemNavigation>>allMethodsWithSourceString:matchCase:
	Receiver: a SystemNavigation
	Arguments and temporary variables: 
		arg1: 	'MyCounter value'
		arg2: 	false
		tmp1: 	an OrderedCollection()
		tmp2: 	[ :arg3 :arg4 | tmp1 add: arg3 >> arg4 ]
		tmp3: 	[ :arg5 | tmp1 add: (RGCommentDefinition realClass: arg5) ]
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)


SystemNavigation>>browseMethodsWithSourceString:matchCase:
	Receiver: a SystemNavigation
	Arguments and temporary variables: 
		arg1: 	'MyCounter value'
		arg2: 	false
		tmp1: 	' (case-insensitive)'
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)


SpCodePresenter>>doBrowseMethodsContainingString
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (29 to: 43) ]
		text: 	an ObservableValueHolder[ '| j |

MyCounter new.

j := MyCounter valu[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


SpBrowseMethodsContainingStringCommand>>execute
	Receiver: a SpBrowseMethodsContainingStringCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Method source with it'
		basicDescription: 	'Browse all methods containing the selected string'
		transform: 	[ :arg1 | arg1 ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Method source with it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpBrowseMethodsContainingStringCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallSystemBrowser
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Method source with it)


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Method source with it)


[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
	Receiver: a SpMenuPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpMenuItemPresenter
		arg2: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ arg2 execute ]
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpMenuPresenterBuilder>>fillItem:with:
		compiledBlock: 	a CompiledBlock: [ arg2 execute ]
		numArgs: 	0
		receiver: 	a SpMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
		tmp1: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ [ arg1 canBeExecuted ] ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Method source with it' ]
		icon: 	an ObservableValueHolder[ Form(16x16x32) ]
		description: 	an ObservableValueHolder[ 'Browse all methods containing the s[..]
		action: 	[ arg2 execute ]
		shortcut: 	nil
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(700863744)'Method source with it'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(700863744)'Method source with it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(751.0@542.0) corner: (1104.0@560.0)
		owner: 	a MenuMorph(732455680)
		submorphs: 	#()
		fullBounds: 	(751.0@542.0) corner: (1104.0@560.0)
		color: 	Color black
		extension: 	a MorphExtension (257088512) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: Cursor normal
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	[ tmp1 show ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: Cursor normal
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(700863744)'Method source with it'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		arg1: 	Cursor normal
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(700863744)'Method source with it'
	Arguments and temporary variables: 
		arg1: 	[(884@557) mouseUp 1873096 nil]
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(751.0@542.0) corner: (1104.0@560.0)
		owner: 	a MenuMorph(732455680)
		submorphs: 	#()
		fullBounds: 	(751.0@542.0) corner: (1104.0@560.0)
		color: 	Color black
		extension: 	a MorphExtension (257088512) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(700863744)'Method source with it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(751.0@542.0) corner: (1104.0@560.0)
		owner: 	a MenuMorph(732455680)
		submorphs: 	#()
		fullBounds: 	(751.0@542.0) corner: (1104.0@560.0)
		color: 	Color black
		extension: 	a MorphExtension (257088512) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(700863744)'Method source with it'
	Arguments and temporary variables: 
		arg1: 	[(884@557) mouseUp 1873096 nil]
	Receiver's instance variables: 
		bounds: 	(751.0@542.0) corner: (1104.0@560.0)
		owner: 	a MenuMorph(732455680)
		submorphs: 	#()
		fullBounds: 	(751.0@542.0) corner: (1104.0@560.0)
		color: 	Color black
		extension: 	a MorphExtension (257088512) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(884@557) mouseUp 1873096 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToggleMenuItemMorph(700863744)'Method source with it'
	Receiver's instance variables: 
		timeStamp: 	1873096
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(884@557)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(700863744)'Method source with it'
	Arguments and temporary variables: 
		arg1: 	[(884@557) mouseUp 1873096 nil]
	Receiver's instance variables: 
		bounds: 	(751.0@542.0) corner: (1104.0@560.0)
		owner: 	a MenuMorph(732455680)
		submorphs: 	#()
		fullBounds: 	(751.0@542.0) corner: (1104.0@560.0)
		color: 	Color black
		extension: 	a MorphExtension (257088512) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(884@557) mouseUp 1873096 nil]
		arg2: 	a SpToggleMenuItemMorph(700863744)'Method source with it'
		tmp1: 	nil
		tmp2: 	1
		tmp3: 	nil
		tmp4: 	#()
		tmp5: 	true
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(700863744)'Method source with it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(884@557) mouseUp 1873096 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(700863744)'Method source with it'


MouseButtonEvent>>sentTo:
	Receiver: [(884@557) mouseUp 1873096 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1873096
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(884@557)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(884@557) mouseUp 1873096 nil]
		arg2: 	a SpToggleMenuItemMorph(700863744)'Method source with it'
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(700863744)'Method source with it'


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ arg1 sentTo: self ]
	Arguments and temporary variables: 
		arg1: 	[ morph := nil ]
		tmp1: 	[ morph := nil ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		compiledBlock: 	a CompiledBlock: [ ^ arg1 sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(884@557) mouseUp 1873096 nil]
		arg2: 	a SpToggleMenuItemMorph(700863744)'Method source with it'
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(700863744)'Method source with it'


SpToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a SpToggleMenuItemMorph(700863744)'Method source with it'
	Arguments and temporary variables: 
		arg1: 	[(884@557) mouseUp 1873096 nil]
		arg2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(751.0@542.0) corner: (1104.0@560.0)
		owner: 	a MenuMorph(732455680)
		submorphs: 	#()
		fullBounds: 	(751.0@542.0) corner: (1104.0@560.0)
		color: 	Color black
		extension: 	a MorphExtension (257088512) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(884@557) mouseUp 1873096 nil]
		arg2: 	a MenuMorph(732455680)
		tmp1: 	[(884@557) mouseUp 1873096 nil]
		tmp2: 	7
		tmp3: 	a SpToggleMenuItemMorph(700863744)'Method source with it'
		tmp4: 	an Array(a SpToggleMenuItemMorph(1007150080)'Browse full class' a SpT[..]
		tmp5: 	false
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(700863744)'Method source with it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(884@557) mouseUp 1873096 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(700863744)'Method source with it'


MouseButtonEvent>>sentTo:
	Receiver: [(884@557) mouseUp 1873096 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1873096
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(884@557)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(884@557) mouseUp 1873096 nil]
		arg2: 	a MenuMorph(732455680)
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(700863744)'Method source with it'



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #includesSubstring:caseSensitive:
[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)
				 includesSubstring: arg1
				 caseSensitive: arg2) ifTrue: [ tmp2 value: arg6 value: arg7 ] ].
		(arg6 comment includesSubstring: arg1 caseSensitive: arg2) ifTrue: [
			tmp3 value: arg6 ] ] in SystemNavigation>>allMethodsWithSourceString:matchCase:
OrderedCollection>>do:
SystemDictionary>>allBehaviorsDo:
SystemNavigation>>allBehaviorsDo:
SystemNavigation>>allMethodsWithSourceString:matchCase:
SystemNavigation>>browseMethodsWithSourceString:matchCase:
SpCodePresenter>>doBrowseMethodsContainingString
SpBrowseMethodsContainingStringCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
receiver of "includesSubstring:caseSensitive:" is nil
7 December 2024 5:56:41.185212 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #includesSubstring:caseSensitive:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
nil

[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)
				 includesSubstring: arg1
				 caseSensitive: arg2) ifTrue: [ tmp2 value: arg6 value: arg7 ] ].
		(arg6 comment includesSubstring: arg1 caseSensitive: arg2) ifTrue: [
			tmp3 value: arg6 ] ] in SystemNavigation>>allMethodsWithSourceString:matchCase:
	Receiver: a SystemNavigation
	Arguments and temporary variables: 
		arg1: 	'MyCounter'
		arg2: 	false
		tmp1: 	an OrderedCollection()
		tmp2: 	[ :arg5 | tmp1 add: (RGCommentDefinition realClass: arg5) ]
		tmp3: 	[ :arg3 :arg4 | tmp1 add: arg3 >> arg4 ]
		arg6: 	AColorSelectorMorph
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)


OrderedCollection>>do:
	Receiver: an OrderedCollection(AColorSelectorMorph AColorSelectorMorph class AIAstar AIAstar cla[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)[..]
		tmp1: 	20802
		tmp2: 	1
	Receiver's instance variables: 
		array: 	{AColorSelectorMorph. AColorSelectorMorph class. AIAstar. AIAstar cl[..]
		firstIndex: 	1
		lastIndex: 	20802


SystemDictionary>>allBehaviorsDo:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		arg1: 	[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)[..]
	Receiver's instance variables: 
		tally: 	10450
		array: 	an Array(nil nil #ASTCache->ASTCache #ClyMethodGroupProviderTest->Cl[..]
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AIAstar #AIAst[..]
		cachedNonClassNames: 	an OrderedCollection(#ActiveWorld #CategoryAdded #Cate[..]
		cachedBehaviors: 	an OrderedCollection(AColorSelectorMorph AColorSelectorMor[..]
		pseudoVariables: 	a Dictionary(#self->self #super->super #thisContext->thisC[..]


SystemNavigation>>allBehaviorsDo:
	Receiver: a SystemNavigation
	Arguments and temporary variables: 
		arg1: 	[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)[..]
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)


SystemNavigation>>allMethodsWithSourceString:matchCase:
	Receiver: a SystemNavigation
	Arguments and temporary variables: 
		arg1: 	'MyCounter'
		arg2: 	false
		tmp1: 	an OrderedCollection()
		tmp2: 	[ :arg3 :arg4 | tmp1 add: arg3 >> arg4 ]
		tmp3: 	[ :arg5 | tmp1 add: (RGCommentDefinition realClass: arg5) ]
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)


SystemNavigation>>browseMethodsWithSourceString:matchCase:
	Receiver: a SystemNavigation
	Arguments and temporary variables: 
		arg1: 	'MyCounter'
		arg2: 	false
		tmp1: 	' (case-insensitive)'
	Receiver's instance variables: 
		environment: 	a SystemDictionary(lots of globals)


SpCodePresenter>>doBrowseMethodsContainingString
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (29 to: 37) ]
		text: 	an ObservableValueHolder[ '| j |

MyCounter new.

j := MyCounter valu[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


SpBrowseMethodsContainingStringCommand>>execute
	Receiver: a SpBrowseMethodsContainingStringCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Method source with it'
		basicDescription: 	'Browse all methods containing the selected string'
		transform: 	[ :arg1 | arg1 ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Method source with it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpBrowseMethodsContainingStringCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallSystemBrowser
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Method source with it)


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Method source with it)


[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
	Receiver: a SpMenuPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpMenuItemPresenter
		arg2: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ arg2 execute ]
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpMenuPresenterBuilder>>fillItem:with:
		compiledBlock: 	a CompiledBlock: [ arg2 execute ]
		numArgs: 	0
		receiver: 	a SpMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
		tmp1: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ [ arg1 canBeExecuted ] ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Method source with it' ]
		icon: 	an ObservableValueHolder[ Form(16x16x32) ]
		description: 	an ObservableValueHolder[ 'Browse all methods containing the s[..]
		action: 	[ arg2 execute ]
		shortcut: 	nil
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(714640640)'Method source with it'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(714640640)'Method source with it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(696.0@541.0) corner: (1049.0@559.0)
		owner: 	a MenuMorph(582827520)
		submorphs: 	#()
		fullBounds: 	(696.0@541.0) corner: (1049.0@559.0)
		color: 	Color black
		extension: 	a MorphExtension (73266944) [balloonText]  [other:  (presenter -[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: Cursor normal
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	[ tmp1 show ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: Cursor normal
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(714640640)'Method source with it'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		arg1: 	Cursor normal
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(714640640)'Method source with it'
	Arguments and temporary variables: 
		arg1: 	[(773@550) mouseUp 1883076 nil]
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(696.0@541.0) corner: (1049.0@559.0)
		owner: 	a MenuMorph(582827520)
		submorphs: 	#()
		fullBounds: 	(696.0@541.0) corner: (1049.0@559.0)
		color: 	Color black
		extension: 	a MorphExtension (73266944) [balloonText]  [other:  (presenter -[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(714640640)'Method source with it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(696.0@541.0) corner: (1049.0@559.0)
		owner: 	a MenuMorph(582827520)
		submorphs: 	#()
		fullBounds: 	(696.0@541.0) corner: (1049.0@559.0)
		color: 	Color black
		extension: 	a MorphExtension (73266944) [balloonText]  [other:  (presenter -[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(714640640)'Method source with it'
	Arguments and temporary variables: 
		arg1: 	[(773@550) mouseUp 1883076 nil]
	Receiver's instance variables: 
		bounds: 	(696.0@541.0) corner: (1049.0@559.0)
		owner: 	a MenuMorph(582827520)
		submorphs: 	#()
		fullBounds: 	(696.0@541.0) corner: (1049.0@559.0)
		color: 	Color black
		extension: 	a MorphExtension (73266944) [balloonText]  [other:  (presenter -[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(773@550) mouseUp 1883076 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToggleMenuItemMorph(714640640)'Method source with it'
	Receiver's instance variables: 
		timeStamp: 	1883076
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(773@550)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(714640640)'Method source with it'
	Arguments and temporary variables: 
		arg1: 	[(773@550) mouseUp 1883076 nil]
	Receiver's instance variables: 
		bounds: 	(696.0@541.0) corner: (1049.0@559.0)
		owner: 	a MenuMorph(582827520)
		submorphs: 	#()
		fullBounds: 	(696.0@541.0) corner: (1049.0@559.0)
		color: 	Color black
		extension: 	a MorphExtension (73266944) [balloonText]  [other:  (presenter -[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(773@550) mouseUp 1883076 nil]
		arg2: 	a SpToggleMenuItemMorph(714640640)'Method source with it'
		tmp1: 	nil
		tmp2: 	1
		tmp3: 	nil
		tmp4: 	#()
		tmp5: 	true
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(714640640)'Method source with it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(773@550) mouseUp 1883076 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(714640640)'Method source with it'


MouseButtonEvent>>sentTo:
	Receiver: [(773@550) mouseUp 1883076 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1883076
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(773@550)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(773@550) mouseUp 1883076 nil]
		arg2: 	a SpToggleMenuItemMorph(714640640)'Method source with it'
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(714640640)'Method source with it'


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [ ^ arg1 sentTo: self ]
	Arguments and temporary variables: 
		arg1: 	[ morph := nil ]
		tmp1: 	[ morph := nil ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		compiledBlock: 	a CompiledBlock: [ ^ arg1 sentTo: self ]
		numArgs: 	0
		receiver: 	a MorphicEventDispatcher


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(773@550) mouseUp 1883076 nil]
		arg2: 	a SpToggleMenuItemMorph(714640640)'Method source with it'
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(714640640)'Method source with it'


SpToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a SpToggleMenuItemMorph(714640640)'Method source with it'
	Arguments and temporary variables: 
		arg1: 	[(773@550) mouseUp 1883076 nil]
		arg2: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(696.0@541.0) corner: (1049.0@559.0)
		owner: 	a MenuMorph(582827520)
		submorphs: 	#()
		fullBounds: 	(696.0@541.0) corner: (1049.0@559.0)
		color: 	Color black
		extension: 	a MorphExtension (73266944) [balloonText]  [other:  (presenter -[..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Method source with it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	nil
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(773@550) mouseUp 1883076 nil]
		arg2: 	a MenuMorph(582827520)
		tmp1: 	[(773@550) mouseUp 1883076 nil]
		tmp2: 	7
		tmp3: 	a SpToggleMenuItemMorph(714640640)'Method source with it'
		tmp4: 	an Array(a SpToggleMenuItemMorph(910554624)'Browse full class' a SpTo[..]
		tmp5: 	false
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(714640640)'Method source with it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(773@550) mouseUp 1883076 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(714640640)'Method source with it'


MouseButtonEvent>>sentTo:
	Receiver: [(773@550) mouseUp 1883076 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1883076
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(773@550)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(773@550) mouseUp 1883076 nil]
		arg2: 	a MenuMorph(582827520)
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(714640640)'Method source with it'



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #includesSubstring:caseSensitive:
[ :arg6 |
		arg6 selectorsDo: [ :arg7 |
			((arg6 sourceCodeAt: arg7)
				 includesSubstring: arg1
				 caseSensitive: arg2) ifTrue: [ tmp2 value: arg6 value: arg7 ] ].
		(arg6 comment includesSubstring: arg1 caseSensitive: arg2) ifTrue: [
			tmp3 value: arg6 ] ] in SystemNavigation>>allMethodsWithSourceString:matchCase:
OrderedCollection>>do:
SystemDictionary>>allBehaviorsDo:
SystemNavigation>>allBehaviorsDo:
SystemNavigation>>allMethodsWithSourceString:matchCase:
SystemNavigation>>browseMethodsWithSourceString:matchCase:
SpCodePresenter>>doBrowseMethodsContainingString
SpBrowseMethodsContainingStringCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: TonelReader class >> #fileIn:
7 December 2024 6:09:23.683041 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

TonelReader class(Object)>>doesNotUnderstand: #fileIn:
	Receiver: TonelReader
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		superclass: 	MCVersionReader
		methodDict: 	a MethodDictionary(#canBeLoaded:->TonelReader>>#canBeLoaded: #e[..]
		format: 	65542
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (private) - 2 selector(s) Protocol (loading) -[..]
		subclasses: 	{IceLibgitTonelReader}
		name: 	#TonelReader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	80459570
		packageTag: 	a PackageTag(Reading)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		tonelFile: 	'/home/gravity/Code/aoc/2024/day5/shit.tonel'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| tonelFile |
	tonelFile := '/home/gravity/Code/aoc/2024/day5/s[..]
		source: 	'| tonelFile |
tonelFile := ''/home/gravity/Code/aoc/2024/day5/shit[..]
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 104) ]
		text: 	an ObservableValueHolder[ '| tonelFile |
tonelFile := ''/home/gravity[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary()
		arg1: 	'| tonelFile |
tonelFile := ''/home/gravity/Code/aoc/2024/day5/shit.t[..]
		arg2: 	[ ^ self ]
		arg3: 	[ :arg1 | arg1 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 104) ]
		text: 	an ObservableValueHolder[ '| tonelFile |
tonelFile := ''/home/gravity[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


StPlaygroundPagePresenter>>doEvaluateAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
		tmp1: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundPagePresenter>>doEvaluateAllAndGo
	Receiver: a StPlaygroundPagePresenter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpMillerColumnPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	a StPharoApplication
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	an ObservableValueHolder[ a SpBoxLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		text: 	a SpCodePresenter
		toolbar: 	a SpToolbarPresenter
		statusbar: 	a SpPresenter
		lineLabel: 	a SpLabelPresenter
		toggleLineNumberButton: 	a SpToggleButtonPresenter
		page: 	a StPlaygroundPage
		activationBlock: 	arg1
		whenActivatedDo: [ :arg2 | self changeSelection: ar[..]
		loading: 	false


StPlaygroundDoItCommand>>execute
	Receiver: a StPlaygroundDoItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a StPlaygroundPagePresenter
		basicName: 	'Do it'
		basicDescription: 	'Do it all and inspect.'


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
	Receiver: a SpCommand(Do it)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		decoratedCommand: 	a StPlaygroundDoItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#glamorousGo
		shortcutKey: 	nil
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	a SpToolbarButtonPresenter


FullBlockClosure(BlockClosure)>>cull:
	Receiver: tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifT[..]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonPresenter
	Receiver's instance variables: 
		outerContext: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg[..]
		compiledBlock: 	a CompiledBlock: tmp2
			label: arg2 name;
			help: arg2 des[..]
		numArgs: 	0
		receiver: 	a SpCommand(Do it)


SpMorphicToolbarButtonAdapter>>execute
	Receiver: a SpMorphicToolbarButtonAdapter
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpToolbarButtonMorph(830757632))
		announcer: 	nil
		model: 	a SpToolbarButtonPresenter
		widget: 	a SpToolbarButtonMorph(830757632)
		selector: 	nil
		owner: 	a SpToolbarButtonPresenter
		unsubscribed: 	false


SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
	Receiver: a SpToolbarButtonMorph(830757632)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(679390208)
		submorphs: 	an Array(an AlignmentMorph(326886912))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (550253056) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1039868416)'Do it'
		iconMorph: 	an ImageMorph(97638912)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(830757632)
	Arguments and temporary variables: 
		arg1: 	[(11.0@37.0) mouseUp 2645587 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(830757632) a SpToolbarButtonMorph(408[..]
		arg3: 	a SpToolbarButtonMorph(830757632)
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(679390208)
		submorphs: 	an Array(an AlignmentMorph(326886912))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (550253056) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1039868416)'Do it'
		iconMorph: 	an ImageMorph(97638912)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


Array(SequenceableCollection)>>do:
	Receiver: an Array(a SpToolbarButtonMorph(830757632) a SpToolbarButtonMorph(408005120) a SpToolb[..]
	Arguments and temporary variables: 
		arg1: 	[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 [..]
		tmp1: 	5
		tmp2: 	1
	Receiver's instance variables: 
an Array(a SpToolbarButtonMorph(830757632) a SpToolbarButtonMorph(408005120) a SpToolb[..]

SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
	Receiver: a SpToolbarButtonMorph(830757632)
	Arguments and temporary variables: 
		arg1: 	[(11.0@37.0) mouseUp 2645587 nil]
		tmp1: 	an Array(a SpToolbarButtonMorph(830757632) a SpToolbarButtonMorph(408[..]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(679390208)
		submorphs: 	an Array(an AlignmentMorph(326886912))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (550253056) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1039868416)'Do it'
		iconMorph: 	an ImageMorph(97638912)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleMouseUp:
	Receiver: a SpToolbarButtonMorph(830757632)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(679390208)
		submorphs: 	an Array(an AlignmentMorph(326886912))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (550253056) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1039868416)'Do it'
		iconMorph: 	an ImageMorph(97638912)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


MouseButtonEvent>>sentTo:
	Receiver: [(11.0@37.0) mouseUp 2645587 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToolbarButtonMorph(830757632)
	Receiver's instance variables: 
		timeStamp: 	2645587
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(11.0@37.0)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToolbarButtonMorph(Morph)>>handleEvent:
	Receiver: a SpToolbarButtonMorph(830757632)
	Arguments and temporary variables: 
		arg1: 	[(11.0@37.0) mouseUp 2645587 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(679390208)
		submorphs: 	an Array(an AlignmentMorph(326886912))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (550253056) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1039868416)'Do it'
		iconMorph: 	an ImageMorph(97638912)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


SpToolbarButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a SpToolbarButtonMorph(830757632)
	Arguments and temporary variables: 
		arg1: 	[(11.0@37.0) mouseUp 2645587 nil]
	Receiver's instance variables: 
		bounds: 	(0.0@5.0) corner: (45.0@39.0)
		owner: 	a Morph(679390208)
		submorphs: 	an Array(an AlignmentMorph(326886912))
		fullBounds: 	nil
		color: 	(Color r: 0.9012707722385142 g: 0.9012707722385142 b: 0.901270772238[..]
		extension: 	a MorphExtension (550253056) [balloonText]  [other:  (presenter [..]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a SpMorphicToolbarButtonAdapter
		label: 	'Do it'
		icon: 	Form(13x13x32)
		getIconSelector: 	#icon
		getStateSelector: 	#state
		actionSelector: 	#execute
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(1039868416)'Do it'
		iconMorph: 	an ImageMorph(97638912)
		iconPosition: 	#top
		lastState: 	false
		badgeFont: 	nil
		badgeSelector: 	#badge


tmp1 in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(274@222.0) corner: (290@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(274@222.0) corner: (290@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(315428864)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(274@222) mouseUp 2645587 nil]
		targetOffset: 	(12.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: tmp1
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 |
			ActiveWorld := tmp1.
			arg2 pass ]
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		compiledBlock: 	a CompiledBlock: tmp1
		numArgs: 	0
		receiver: 	a HandMorph(566076672)


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
		arg1: 	tmp1
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(274@222.0) corner: (290@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(274@222.0) corner: (290@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(315428864)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(274@222) mouseUp 2645587 nil]
		targetOffset: 	(12.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(274@222) mouseUp 2645587 nil]
		arg2: 	a SpToolbarButtonMorph(830757632)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	nil
	Receiver's instance variables: 
		bounds: 	(274@222.0) corner: (290@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(274@222.0) corner: (290@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(315428864)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(274@222) mouseUp 2645587 nil]
		targetOffset: 	(12.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(274@222) mouseUp 2645587 nil]
	Receiver's instance variables: 
		bounds: 	(274@222.0) corner: (290@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(274@222.0) corner: (290@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(315428864)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(274@222) mouseUp 2645587 nil]
		targetOffset: 	(12.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


HandMorph>>handleEvent:
	Receiver: a HandMorph(566076672)
	Arguments and temporary variables: 
		arg1: 	[(274@222) mouseUp 2645587 nil]
		tmp1: 	[(274@222) mouseUp 2645587 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
	Receiver's instance variables: 
		bounds: 	(274@222.0) corner: (290@238.0)
		owner: 	a WorldMorph(73223680) [world]
		submorphs: 	#()
		fullBounds: 	(274@222.0) corner: (290@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (921490688)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(315428864)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(274@222) mouseUp 2645587 nil]
		targetOffset: 	(12.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		captureBlock: 	nil
		recentModifiers: 	0
		pendingEventQueue: 	WaitfreeQueue with 0 items
		supressNextKeyPress: 	false


[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
	Receiver: an OSWindowMorphicEventHandler
	Arguments and temporary variables: 
		arg1: 	[(274@222) mouseUp 2645587 nil]
	Receiver's instance variables: 
		morphicWorld: 	a WorldMorph(73223680) [world]


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
		[..]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2629828
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(737335040)))
		lastAlarmTime: 	2645566
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(566076672))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2629828
		lastStepMessage: 	nil
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(737335040)))
		lastAlarmTime: 	2645566
		activeHand: 	a HandMorph(566076672)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
	[..]
		worldRenderer: 	an OSWorldRenderer
		realWindowExtent: 	(1424@815)
		deferredUIMessages: 	WaitfreeQueue with 0 items


WorldMorph>>doOneCycleNow
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(73223680) [world]
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1424@815)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(929505792) a TaskbarMorph(1066364416) a [..]
		fullBounds: 	(0@0) corner: (1424@815)
		color: 	(Color r: 0.9403714565004888 g: 0.9403714565004888 b: 0.940371456500[..]
		extension: 	a MorphExtension (583922944) [other:  (dragEnabled -> true) (dro[..]
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alph[..]
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
		tmp1: 	#()
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 d[..]
	Arguments and temporary variables: 
		arg1: 	[ self doInterCycleWait ]
		tmp1: 	[ self doInterCycleWait ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	WorldMorph class>>doOneCycle
		compiledBlock: 	a CompiledBlock: [
		| tmp1 |
		tmp1 := ExtraWorldListMutex [..]
		numArgs: 	0
		receiver: 	WorldMorph


WorldState class>>doDrawCycleWith:
	Receiver: WorldState
	Arguments and temporary variables: 
		arg1: 	[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorl[..]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #active[..]
		format: 	65548
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (hands) - 12 selector(s) Protocol (alarms) - 5[..]
		subclasses: 	{AthensWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->nil #DebugShowDamage->false #Des[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	83001790
		packageTag: 	a PackageTag(Worlds)


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#ac[..]
		format: 	65547
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (operations) - 1 selector(s) Protocol (structu[..]
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorp[..]
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	82960026
		packageTag: 	a PackageTag(Worlds)
		announcer: 	nil
		displayScaleFactor: 	1



--- The full stack ---
TonelReader class(Object)>>doesNotUnderstand: #fileIn:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
StPlaygroundPagePresenter>>doEvaluateAndGo
StPlaygroundPagePresenter>>doEvaluateAllAndGo
StPlaygroundDoItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself in [ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			label: arg2 name;
			help: arg2 description;
			in: [ :arg3 | arg2 hasIcon ifTrue: [ arg3 icon: arg2 icon ] ];
			action: [ arg2 execute ];
			enabled: arg2 canBeExecuted;
			yourself ] in SpCommand>>configureAsButtonOfClass:
FullBlockClosure(BlockClosure)>>cull:
SpMorphicToolbarButtonAdapter>>execute
SpToolbarButtonMorph(PluggableButtonMorph)>>performAction:
[ :arg3 |
		(arg3 containsPoint: arg1 cursorPoint) ifTrue: [
			arg3 enabled ifTrue: [ arg3 performAction: arg1 ] ] ] in SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
Array(SequenceableCollection)>>do:
SpToolbarButtonMorph(PluggableButtonMorph)>>mouseUp:
SpToolbarButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToolbarButtonMorph(Morph)>>handleEvent:
SpToolbarButtonMorph(Morph)>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
[ MorphicRenderLoop new doOneCycleWhile: [ true ] ] in MorphicUIManager>>spawnNewProcess
[
			  self value.
			  Processor terminateRealActive ] in FullBlockClosure(BlockClosure)>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Message not understood: TonelReader class >> #fileIn:
7 December 2024 6:09:25.77248 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
StackToRegisterMappingCogit VMMaker-tonel.1 uuid: 4a244330-80dd-0d00-b995-396d03d7915b Jan  1 1980
v10.3.1 - Commit: 6cdb1e5 - Date: 2024-09-02 09:56:37 +0200

Image: Pharo12.0.0SNAPSHOT [Build information: Pharo-12.0.0+SNAPSHOT.build.1544.sha.2132280c015ee49ad1ef4571ff54988be79bd49b (64 Bit)]

TonelReader class(Object)>>doesNotUnderstand: #fileIn:
	Receiver: TonelReader
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		superclass: 	MCVersionReader
		methodDict: 	a MethodDictionary(#canBeLoaded:->TonelReader>>#canBeLoaded: #e[..]
		format: 	65542
		layout: 	a FixedLayout
		protocols: 	an Array(Protocol (private) - 2 selector(s) Protocol (loading) -[..]
		subclasses: 	{IceLibgitTonelReader}
		name: 	#TonelReader
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	80459570
		packageTag: 	a PackageTag(Reading)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		tonelFile: 	'/home/gravity/Code/aoc/2024/day5/shit.tonel'
	Receiver's instance variables: 
nil

OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
	Receiver: an OCReceiverDoItSemanticScope
	Arguments and temporary variables: 
		arg1: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		outerScope: 	nil
		targetReceiver: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	UndefinedObject>>#DoIt
	Receiver's instance variables: 
		ast: 	DoIt

	| tonelFile |
	tonelFile := '/home/gravity/Code/aoc/2024/day5/s[..]
		source: 	'| tonelFile |
tonelFile := ''/home/gravity/Code/aoc/2024/day5/shit[..]
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		permitFaulty: 	false
		permitUndeclared: 	false
		failBlock: 	tmp5
		  source: arg1;
		  environment: self environment
		logged: 	nil
		changeStamp: 	nil
		protocol: 	nil
		requestor: 	a StPlaygroundInteractionModel
		priorMethod: 	nil


[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 104) ]
		text: 	an ObservableValueHolder[ '| tonelFile |
tonelFile := ''/home/gravity[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


FullBlockClosure(BlockClosure)>>on:do:
	Receiver: [
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newCo[..]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg5 |
			  self announcer announce:
				  (SpCodeEvaluationFailed[..]
	Receiver's instance variables: 
		outerContext: 	SpCodePresenter>>evaluate:onCompileError:onError:
		compiledBlock: 	a CompiledBlock: [
	  | tmp5 |
	  self announcer announce:
	[..]
		numArgs: 	0
		receiver: 	a SpCodePresenter


SpCodePresenter>>evaluate:onCompileError:onError:
	Receiver: a SpCodePresenter
	Arguments and temporary variables: 
		tmp2: 	nil
		tmp3: 	a Dictionary(#tonelFile->nil )
		arg1: 	'| tonelFile |
tonelFile := ''/home/gravity/Code/aoc/2024/day5/shit.t[..]
		arg2: 	[ ^ self ]
		arg3: 	[ :arg3 | arg3 pass ]
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicCodeAdapter)
		announcer: 	an Announcer
		owner: 	a StPlaygroundPagePresenter
		adapter: 	a SpMorphicCodeAdapter
		needRebuild: 	true
		eventHandler: 	a SpEventHandler
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ a KMCategory ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Code' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	a SpActionGroup
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ true ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		selection: 	an ObservableValueHolder[ (1 to: 104) ]
		text: 	an ObservableValueHolder[ '| tonelFile |
tonelFile := ''/home/gravity[..]
		actionToPerform: 	an ObservableValueHolder[ actionToPerform ]
		readSelection: 	an ObservableValueHolder[ tmp1 ]
		placeholder: 	an ObservableValueHolder[ '' ]
		editable: 	an ObservableValueHolder[ true ]
		contextMenu: 	an ObservableValueHolder[ tmp2
		interactionModel: StPlaygroun[..]
		scrollValue: 	an ObservableValueHolder[ (0@0) ]
		editionContextMenu: 	an ObservableValueHolder[ true ]
		wrapWord: 	an ObservableValueHolder[ true ]
		undoRedoHistory: 	true
		wrapScrollBars: 	true
		propagateNaturalHeight: 	false
		propagateNaturalWidth: 	false
		scrollBarStyles: 	#()
		syntaxHighlight: 	an ObservableValueHolder[ true ]
		smartCharacters: 	an ObservableValueHolder[ true ]
		lineNumbers: 	an ObservableValueHolder[ true ]
		interactionModel: 	an ObservableValueHolder[ a StPlaygroundInteractionModel ]
		overrideContextMenu: 	true
		submitBlock: 	nil
		resetBlock: 	nil
		environment: 	nil
		systemNavigation: 	nil
		syntaxHighlightTheme: 	an ObservableValueHolder[ nil ]
		styleScheme: 	nil


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	'| tonelFile |
tonelFile := ''/home/gravity/Code/aoc/2024/day5/shit.t[..]
		arg2: 	[ :arg1 | self printObject: arg1 ]
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
		arg1: 	[ :arg1 | self printObject: arg1 ]
		tmp1: 	'| tonelFile |
tonelFile := ''/home/gravity/Code/aoc/2024/day5/shit.t[..]
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCodePrintItCommand>>execute
	Receiver: a SpCodePrintItCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		context: 	a SpCodePresenter
		basicName: 	'Print it'
		basicDescription: 	'Evaluate selection and print the result.'
		transform: 	[ :arg1 | arg1 ]


SpCommand(CmCommandDecorator)>>execute
	Receiver: a SpCommand(Print it)
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCodePrintItCommand
		iconProvider: 	a StPharoApplication
		iconName: 	#smallPrintIt
		shortcutKey: 	a KMKeyCombinationChoice
		displayStrategy: 	a CmUIDisableWhenCantBeRun
		positionStrategy: 	a CmUILeftPositionStrategy
		buildPresenterBlock: 	[ :arg2 |
		| tmp2 |
		tmp2 := arg1 new.
		tmp2
			lab[..]
		presenter: 	nil


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	a StPharoApplication
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpCommand(Print it)


[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	[ self decoratedCommand execute ]
		arg2: 	a Process in nil
		tmp1: 	a StPharoApplication
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: [
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToolCurrentApplication(DynamicVariable)>>value:during:
		compiledBlock: 	a CompiledBlock: [
	  tmp1 psValueAt: index put: arg1.
	  ar[..]
		numArgs: 	0
		receiver: 	a SpToolCurrentApplication


SpToolCurrentApplication(DynamicVariable)>>value:during:
	Receiver: a SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
		tmp1: 	a Process in nil
		tmp2: 	nil
	Receiver's instance variables: 
		index: 	13


SpToolCurrentApplication class(DynamicVariable class)>>value:during:
	Receiver: SpToolCurrentApplication
	Arguments and temporary variables: 
		arg1: 	a StPharoApplication
		arg2: 	[ self decoratedCommand execute ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		protocols: 	#()
		subclasses: 	nil
		name: 	#SpToolCurrentApplication
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		commentSourcePointer: 	69005180
		packageTag: 	a PackageTag(Presenters)
		soleInstance: 	a SpToolCurrentApplication


SpToolCurrentApplicationCommand>>execute
	Receiver: a SpToolCurrentApplicationCommand
	Arguments and temporary variables: 
x
	Receiver's instance variables: 
		decoratedCommand: 	a SpToolCurrentApplicationCommand


[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
	Receiver: a SpMenuPresenterBuilder
	Arguments and temporary variables: 
		arg1: 	a SpMenuItemPresenter
		arg2: 	a SpToolCurrentApplicationCommand
	Receiver's instance variables: 
		menuPresenter: 	a SpMenuPresenter
		stack: 	a Stack(a SpMenuPresenter)


FullBlockClosure(BlockClosure)>>cull:
	Receiver: [ arg2 execute ]
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		outerContext: 	SpMenuPresenterBuilder>>fillItem:with:
		compiledBlock: 	a CompiledBlock: [ arg2 execute ]
		numArgs: 	0
		receiver: 	a SpMenuPresenterBuilder


SpMenuItemPresenter>>performMenuActionWith:
	Receiver: a SpMenuItemPresenter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
		tmp1: 	true
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicMenuItemAdapter)
		announcer: 	an Announcer
		owner: 	a SpMenuGroupPresenter
		adapter: 	a SpMorphicMenuItemAdapter
		needRebuild: 	true
		eventHandler: 	nil
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	an ObservableValueHolder[ nil ]
		windowIcon: 	an ObservableValueHolder[ nil ]
		aboutText: 	an ObservableValueHolder[ nil ]
		askOkToClose: 	an ObservableValueHolder[ false ]
		titleHolder: 	an ObservableValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	an ObservableValueHolder[ a SpAbstractWidgetLayout ]
		visible: 	an ObservableValueHolder[ true ]
		extent: 	an ObservableValueHolder[ nil ]
		styles: 	#()
		actionGroup: 	nil
		borderWidth: 	an ObservableValueHolder[ nil ]
		borderColor: 	an ObservableValueHolder[ nil ]
		dragEnabled: 	an ObservableValueHolder[ false ]
		dropEnabled: 	an ObservableValueHolder[ false ]
		color: 	an ObservableValueHolder[ nil ]
		help: 	an ObservableValueHolder[ nil ]
		enabled: 	an ObservableValueHolder[ [ arg1 canBeExecuted ] ]
		wantsDrop: 	an ObservableValueHolder[ tmp1 ]
		acceptDrop: 	an ObservableValueHolder[ acceptDrop value: tmp1 ]
		deferredActions: 	nil
		name: 	an ObservableValueHolder[ 'Print it' ]
		icon: 	an ObservableValueHolder[ Form(13x13x32) ]
		description: 	an ObservableValueHolder[ 'Evaluate selection and print the re[..]
		action: 	[ arg2 execute ]
		shortcut: 	a KMKeyCombinationChoice
		subMenu: 	nil
		state: 	nil


SpMorphicMenuItemAdapter>>performMenuActionWith:
	Receiver: a SpMorphicMenuItemAdapter
	Arguments and temporary variables: 
		arg1: 	a SpMorphicMenuItemAdapter
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpMenuItemPresenter
		widget: 	a SpToggleMenuItemMorph(309423360)'Print it'
		selector: 	nil
		owner: 	a SpMenuItemPresenter
		unsubscribed: 	false


Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(309423360)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(547.0@358.0) corner: (704.0@375.0)
		owner: 	a MenuMorph(270041856)
		submorphs: 	#()
		fullBounds: 	(547.0@358.0) corner: (704.0@375.0)
		color: 	Color black
		extension: 	a MorphExtension (316739328) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


FullBlockClosure(BlockClosure)>>ensure:
	Receiver: Cursor normal
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	[ tmp1 show ]
		tmp2: 	nil
		tmp3: 	nil
	Receiver's instance variables: 
		outerContext: 	SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		compiledBlock: 	a CompiledBlock: Cursor normal
		numArgs: 	0
		receiver: 	a SpToggleMenuItemMorph(309423360)'Print it'


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000[..]
	Arguments and temporary variables: 
		arg1: 	Cursor normal
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r[..]
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a SpToggleMenuItemMorph(309423360)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(584@365) mouseUp 2647664 nil]
		tmp1: 	a WorldMorph(73223680) [world]
	Receiver's instance variables: 
		bounds: 	(547.0@358.0) corner: (704.0@375.0)
		owner: 	a MenuMorph(270041856)
		submorphs: 	#()
		fullBounds: 	(547.0@358.0) corner: (704.0@375.0)
		color: 	Color black
		extension: 	a MorphExtension (316739328) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a SpToggleMenuItemMorph(309423360)'Print it'
	Arguments and temporary variables: 
<<error during printing>>
	Receiver's instance variables: 
		bounds: 	(547.0@358.0) corner: (704.0@375.0)
		owner: 	a MenuMorph(270041856)
		submorphs: 	#()
		fullBounds: 	(547.0@358.0) corner: (704.0@375.0)
		color: 	Color black
		extension: 	a MorphExtension (316739328) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a SpToggleMenuItemMorph(309423360)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(584@365) mouseUp 2647664 nil]
	Receiver's instance variables: 
		bounds: 	(547.0@358.0) corner: (704.0@375.0)
		owner: 	a MenuMorph(270041856)
		submorphs: 	#()
		fullBounds: 	(547.0@358.0) corner: (704.0@375.0)
		color: 	Color black
		extension: 	a MorphExtension (316739328) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MouseButtonEvent>>sentTo:
	Receiver: [(584@365) mouseUp 2647664 nil]
	Arguments and temporary variables: 
		arg1: 	a SpToggleMenuItemMorph(309423360)'Print it'
	Receiver's instance variables: 
		timeStamp: 	2647664
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(584@365)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


SpToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a SpToggleMenuItemMorph(309423360)'Print it'
	Arguments and temporary variables: 
		arg1: 	[(584@365) mouseUp 2647664 nil]
	Receiver's instance variables: 
		bounds: 	(547.0@358.0) corner: (704.0@375.0)
		owner: 	a MenuMorph(270041856)
		submorphs: 	#()
		fullBounds: 	(547.0@358.0) corner: (704.0@375.0)
		color: 	Color black
		extension: 	a MorphExtension (316739328) [balloonText]  [other:  (presenter [..]
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSiz[..]
		emphasis: 	0
		contents: 	'Print it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a SpMorphicMenuItemAdapter
		selector: 	#performMenuActionWith:
		arguments: 	an Array(a SpMorphicMenuItemAdapter)
		iconFormSet: 	a FormSet
		keyText: 	'Ctrl+P'
		getStateSelector: 	nil
		enablementSelector: 	#enabled


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(584@365) mouseUp 2647664 nil]
		arg2: 	a SpToggleMenuItemMorph(309423360)'Print it'
		tmp1: 	nil
		tmp2: 	1
		tmp3: 	nil
		tmp4: 	#()
		tmp5: 	true
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(309423360)'Print it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(584@365) mouseUp 2647664 nil]
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(309423360)'Print it'


MouseButtonEvent>>sentTo:
	Receiver: [(584@365) mouseUp 2647664 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	2647664
		source: 	a HandMorph(566076672)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(584@365)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(584@365) mouseUp 2647664 nil]
		arg2: 	a SpToggleMenuItemMorph(309423360)'Print it'
	Receiver's instance variables: 
		morph: 	a SpToggleMenuItemMorph(309423360)'Print it'



--- The full stack ---
TonelReader class(Object)>>doesNotUnderstand: #fileIn:
UndefinedObject>>DoIt
OCReceiverDoItSemanticScope(OCDoItSemanticScope)>>evaluateDoIt:
OpalCompiler>>evaluate
[
	  | tmp5 |
	  self announcer announce:
		  (SpCodeWillBeEvaluatedAnnouncement newContent: arg1).
	  tmp3 := self interactionModel bindings copy.
	  tmp5 := self interactionModel compiler.
	  tmp5
		  source: arg1;
		  environment: self environment;
		  failBlock: [
			  self announcer announce:
					  (SpCodeEvaluationFailedAnnouncement newContent: arg1).
			  ^ arg2 value ].
	  tmp2 := tmp5 evaluate.
	  tmp3 size = self interactionModel bindings size ifFalse: [
		  self withAdapterDo: [ :arg4 | arg4 refreshStyling ] ].
	  self announcer announce:
		  (SpCodeEvaluationSucceedAnnouncement newContent: arg1).
	  tmp2 ] in SpCodePresenter>>evaluate:onCompileError:onError:
FullBlockClosure(BlockClosure)>>on:do:
SpCodePresenter>>evaluate:onCompileError:onError:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluate:andDo:
SpCodePrintItCommand(SpCodeSelectionCommand)>>evaluateSelectionAndDo:
SpCodePrintItCommand>>execute
SpCommand(CmCommandDecorator)>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ self decoratedCommand execute ] in SpToolCurrentApplicationCommand>>execute
[
	  tmp1 psValueAt: index put: arg1.
	  arg2 value ] in SpToolCurrentApplication(DynamicVariable)>>value:during:
FullBlockClosure(BlockClosure)>>ensure:
SpToolCurrentApplication(DynamicVariable)>>value:during:
SpToolCurrentApplication class(DynamicVariable class)>>value:during:
SpToolCurrentApplicationCommand>>execute
[ arg2 execute ] in SpMenuPresenterBuilder>>fillItem:with:
FullBlockClosure(BlockClosure)>>cull:
SpMenuItemPresenter>>performMenuActionWith:
SpMorphicMenuItemAdapter>>performMenuActionWith:
Cursor normal in SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
FullBlockClosure(BlockClosure)>>ensure:
CursorWithMask(Cursor)>>showWhile:
SpToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
SpToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
SpToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
SpToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -
			- - - - - - - - - - - - - - - - - -
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
tmp1 in HandMorph>>sendFocusEvent:to:clear:
FullBlockClosure(BlockClosure)>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
WorldMorph>>doOneCycle
[
		| tmp1 |
		tmp1 := ExtraWorldListMutex critical: [ self extraWorldList ].
		tmp1 do: [ :arg1 | arg1 doOneCycle ].
		(self currentWorld isNotNil and: [
			 (tmp1 includes: self currentWorld) not ]) ifTrue: [
			self currentWorld doOneCycle ] ] in WorldMorph class>>doOneCycle
FullBlockClosure(BlockClosure)>>ensure:
WorldState class>>doDrawCycleWith:
WorldMorph class>>doOneCycle
MorphicRenderLoop>>doOneCycle
MorphicRenderLoop>>doOneCycleWhile:
MenuMorph>>invokeAt:in:allowKeyboard:
MenuMorph>>invokeAt:in:
MenuMorph>>invokeModal
ByteSymbol(Symbol)>>value:
RubEditingArea(RubAbstractTextArea)>>openMenu:and:
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpRubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MillerScrollPaneMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SpWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
FullBlockClosure(BlockClosure)>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
[
		(morphicWorld activeHand isNotNil and: [ arg1 hand isNotNil ])
			ifTrue: [ morphicWorld activeHand handleEvent: arg1 ] ] in OSWindowMorphicEventHandler>>dispatchMorphicEvent:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycleNow
-- and more not shown ---------------------------------------------------------------------------------

