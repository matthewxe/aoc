Object subclass: #SolvePart1	instanceVariableNames: ''	classVariableNames: ''	package: 'Advent-Of-Code-Day5'!!SolvePart1 methodsFor: 'as yet unclassified' stamp: '12/7/2024 18:47'!solve: aFileName	| ruleFinder |	ruleFinder := RuleFinder new.	ruleFinder read: aFileName.		^ ruleFinder rules.		! !Object subclass: #MyCounter	instanceVariableNames: 'value'	classVariableNames: ''	package: 'Advent-Of-Code-Day5'!!MyCounter methodsFor: 'initialization' stamp: '12/7/2024 17:48'!value	^ value! !!MyCounter methodsFor: 'initialization' stamp: '12/7/2024 17:48'!value: anInteger	value := anInteger ! !!MyCounter methodsFor: 'initialization' stamp: '12/7/2024 17:49'!init	"Method for initialization. Setting variables to some default values. For example 0."	value := 0! !!MyCounter methodsFor: 'initialization' stamp: '12/7/2024 17:51'!increment  "This method adds 1 to variable value."	self value: (value + 1)! !!MyCounter methodsFor: 'initialization' stamp: '12/7/2024 17:51'!decrement  "This method substracts 1 to variable value."	self value: (value - 1)! !Object subclass: #RuleFinder	instanceVariableNames: 'rules'	classVariableNames: ''	package: 'Advent-Of-Code-Day5'!!RuleFinder methodsFor: 'initialization' stamp: '12/7/2024 18:25'!init	rules := Dictionary new.! !!RuleFinder methodsFor: 'meta-object-protocol' stamp: '12/7/2024 21:29'!read: aFileName	"comment Reads the file reference and changes the #rule variable to hold a dict of lists and shi"	| input string parts result |	input := aFileName asFileReference.	input isFile ifFalse: [input close. ^ self error: 'Incorrect filename'].	string := input readStream upToEnd.		parts := string splitOn: Character lf.		1 to: (parts size) do: [ :each |    	(parts at: each) isEmpty ifTrue: [ ^self ].		result := (parts at: each) splitOn: '|'.		self at: result first put: result last.	].	"cutoff := parts detect: [:a | a isEmpty] ifNone: []."	"self at: 'balls' put: parts."! !!RuleFinder methodsFor: 'accessing' stamp: '12/7/2024 18:33'!rules	^ rules! !!RuleFinder methodsFor: 'adding' stamp: '12/7/2024 20:06'!at: key put: val	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	(rules includesKey: key)		ifTrue: [ (rules at: key) addLast: val ]		ifFalse: [ rules at: key put: (OrderedCollection with: val) ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RuleFinder class	instanceVariableNames: 'aFileName'!