* Advent of Code 2024
To be quirky I decided to scramble through a bunch of random programming languages that I want to learn/master and use a different one every day of advent of code.

The ones ive used
** Day 1 - C
Its something I've used before
** Day 2 - Go
I've also used go before so nothing new
*** Recommended resources
1. Go Tour
2. Go by Example
3. Go in y minutes
4. Learn go with TDD
** Day 3 - C#
*** Installation Process
Running C# code seems to require installing the dotnet sdk which i install very chaddly with nixos and write my first hello world code
*** General thoughts
You use the dotnet binary
https://learn.microsoft.com/en-us/dotnet/core/tutorials/top-level-templates
- apparently a new change just appeared in C# when it went to .NET 6 removing the main method from the default template, kinda weird and it seems recent so im gonna use the old template for now
- setting up the lsp was kinda easy
- wow i did not expect it to be that fast, I completed both parts in just 1 hour while I never touched C# before
- i think i barely scratched the surface of what C# has to offer, the only features i dabbled in to are
  1. file reading
  2. enums (first time i have used them but i have heard of them before)
  3. writing new methods in a class
  4. Subranges (i used them like go slices)
  5. methods in types (uncommon for me cause the languages i mainly use are go and C and those dont have these OOP concepts of types)
  6. ref and out arguments
     - very cool feature, it allows for like pointer-like way of writing code from C, but im guessing this one is alot safer and more restrictions
- I think I should learn more about the language first so I can write more cleaner solutions
*** Recommended resources
1. Google
   - You just search what you need and since its popular enough its right there
** +Day 4 - Solidity+
- I realized thhat solidity is a very domain specific language for ethereum and crypto shit so im just gonna reroll cause my ass does not give a shit aobut that
** Day 4 - R(script)
*** Installation process
I just install R with nixpkgs
and just used Rscript to run my scripts
*** General thoughts
- This doesnt look as bad as solidity so ill go with it
- The funny thing about this language is that its literally just the letter R, and also the irritating part about it that its name is just the letter R.
- I just realize that R isn't just a language, but an entire suite of statistical tools actually it is just a statistical tool that makes use of code as an interface.
- I gave up trying to install the LSP cause I couldn't immediately make it compatible with NixOS
- After beating it
  1. This was a tough one, since R treats most stuff as a piece of data and not a chunk of memory if you get me. It's pretty tricky even just getting a single letter out of a character vector.
  2. But maybe I'm just skill issuing and R ia actually amazing at string manipulation and I just don't know it
  3. Types are practically nonexistant, which seems completely fair to make it alot easier to comprehend for the average statistician whos gonna use this, just like python.
  4. Although the variable assignment looks funny (<-)
  5. This is definitely not a language for doing advent of code challengnes. And for what I said earlier, its basically a statistical tool in a medium of programming languages, just because It's a programming language I could do anything, but that doesn't mean I should do anything when its made for a specific usecase
  6. I wanted to show like plots, graphs or something based on the AOC challenge, to atleast learn the other cool stuff R can do but I never got around to doing that.
*** Recommended resources
1. Google
2. W3 Schools
3. [[https://www.rdocumentation.org][Rdocumentation]] searching up function definitions
** Day 5 - Smalltalk (Pharo)
- I was kinda excited for this cause my only backgrund knowledge of small talk is that its a purely object oriented language and that seems very intriguing
- Everyone seems to be recommending the implementation Pharo for smalltalk so im gonna be using that
*** Installation
This is kindof cool, you install the Pharo VM and then download a Pharo image, the Pharo VM is just an environment to run Pharo in, and the fun part is the Pharo image, where it includes the source code for the Pharo language with all the libraries needed for the actual Pharo programming language to be used. It also includes within the image itself the IDE that is used which is really cool. that also means you can edit the IDE source code from within it.


Update: adding examples and adding information

You should understand the original philosophy of the Smalltalk.

The whole OS was supposed to be written in Smalltalk and the GUI was to call the Smalltalk libraries in the OS.

Very cool

*** General thoughts
Everything is an object is a very cool concept

IN REALITY THIS THING IS SO HARD TO GRASP AND I DONT GOT MUCH TIME AND IM SO FRUSTRATED WITH THIS THING SO IM GONNA USE THE EASIER IMPLEMENTATION

nvm guys i was just hungry and didnt find the correct resources
that is my biggest threat here is finding a good resource to learn from
the MOOC scared me and other youtube tutorials were too old but i found
*** After solving thoughts
1. That was extremely difficult to slog through.
   The most important thing you need to know when learning this language is just knowing where you can find the stuff you want and just generally learning the whole OS and IDE thing cause its pretty difficult otherwise
In concept this is kinda like how a Lisp machine would work but its an OOP VM or something. If you fw that but its purely objects then go for it.
*** Recommended resources
1. [[https://github.com/pharo-open-documentation/pharo-wiki?tab=readme-ov-file#beginners][Pharo-wiki]]
2. https://learnxinyminutes.com/docs/smalltalk/
3. https://mooc.pharo.org/
** Day 6 - Lua
Lua is something I already know cause I use neovim btw.
*** Recommended Resources
1. https://www.lua.org
2. https://www.lua.org/pil
2. and google like stack overflow
** Day 7 - Free Pascal
So aparrently Delphi is not open source  so were gonna be using the open source Free Pascal instead lol
** Day 8 - Odin
I lost my mind using free pascal so im just gonna skip to using odin
Odin literally kinda just feels like Go but it's manual memory management so it's fast and slick now ðŸ˜Ž
I'm sure there is more to odin than what I've seen at face value, but at face value it feels like Go and occasionally feels like C. That isn't really a bad thing though, cause I love Go and C.
*** Recommended Resources
https://odin-lang.org/docs/overview/
https://pkg.odin-lang.org/

** Day 9 - Zig
well i guess im gonna start using the language that Odin is usually compared to, the C killer Zig
the tests are really nice tbh, they are pretty easy to use. my main issue is that coming from simpler languages, the different kinds of strings threw me off and the typings are very strict.
something I REALLY dont like is that there is no scoped temporary variables like in C,
I want to do reverse loops and I would usually make a for loop that has a condition that goes backwards but zig's best answer is defining a variable that is not scoped insid the while loop and that kinda sucks
https://github.com/ziglang/zig/issues/5070
the president of zig adiveses using anonymous blocks, but it looks ugly and at that point why not just add those C style loops? doesn't zig want to replace C, just make it a little easier for us...
https://github.com/ziglang/zig/issues/5070#issuecomment-617436226
*** Recommended Resources
https://zig.guide
https://ziglang.org/documentation/master/std/
https://ziglang.org/learn/getting-started/
https://ziggit.dev
Google

** Day 10 - OCaml
my first thing thinking about ocaml is that its anohetr functional programming language but apparently its actually a dialect of ML which is interesting and i havent added ML to the list and i would like to add ML but people dont really use that in production anyway and OCaml has been used to bootstrap rust so i trust that its very production ready

OCaml was alot of fun, probably because I got a little bit of some functional programming due to learning some lisp
But one thing struck me that this is very different from lisp! It is statically typed instead of dynamically typed. The very common realization of this is to add floats together you have to use +. instead of + and if you want to you have to do type conversion first.
Also a new thing that I discovered is pattern matching. I'll be honest I still have NO clue how it works but i managed to make it play along with my horrible code and it worked.
*** Recommended resources
https://ocaml.org/docs
https://ocaml.org/api

** Day 11 - Bash!?
Well this is fun
I have done some shell scripting before yes but I haven't used bash in this way before so this is interesting
and probably a terrible use of bash
HOLY FUCK THIS LANGUAGE IS SLOWWWW
i had to optimize my solution so it can even finish
It took me an entire HOUR to complete JUST the example
** My list of languages to randomize in
- Heavily used languages
  1. C
  2. C++
  3. Python
  4. JavaScript w/ JSDoc
  5. TypeScript
  6. PHP
     - probably only with Laravel when im actually gonna use it for webdev
  7. Java
  8. C#
  9. Go
  10. Ruby
- Mediumly known, hipster languages
  1. Dart
  2. Swift
  3. Scala
  4. Kotlin
  5. Lua
  6. Rust
  7. Solidity
- Lesser known but promising languages
  1. Elixir
  2. Zig
  3. Clojure
  4. Haskell
  5. Nim
  6. Gleam
  7. Julia
  8. Odin
  9. C3
  10. F#
  11. OCaml
  12. Crystal
  13. D
- Lesser known legacy languages
  1. Delphi Open Pascal
  2. Perl
  3. Smalltalk
  4. Fortran
  5. Erlang
  6. COBOL
  7. R
  8. Groovy
- Incomplete Langauges (takes longer to understand)
  1. Assembly
  2. Bash
  3. SQL
- (relatively) Esoteric languages
  1. Forth
  2. Factor
  3. Prolog
